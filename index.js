(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Generated by psc-make version 0.6.9.3

/**
 *  | This module defines the `Alt` type class.
 */
"use strict";
var Prelude = require("Prelude");

/**
 *  | The `Alt` type class identifies an associative operation on a type
 *  | constructor.  It is similar to `Semigroup`, except that it applies to
 *  | types of kind `* -> *`, like `Array` or `List`, rather than concrete types
 *  | `String` or `Number`.
 *  |
 *  | `Alt` instances are required to satisfy the following laws:
 *  |
 *  | - Associativity: `(x <|> y) <|> z == x <|> (y <|> z)`
 *  | - Distributivity: `f <$> (x <|> y) == (f <$> x) <|> (f <$> y)`
 *  |
 *  | For example, the `Array` (`[]`) type is an instance of `Alt`, where
 *  | `(<|>)` is defined to be concatenation.
 */
var Alt = function ($less$bar$greater, __superclass_Prelude$dotFunctor_0) {
    this["<|>"] = $less$bar$greater;
    this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
};

/**
 *  | The `Alt` type class identifies an associative operation on a type
 *  | constructor.  It is similar to `Semigroup`, except that it applies to
 *  | types of kind `* -> *`, like `Array` or `List`, rather than concrete types
 *  | `String` or `Number`.
 *  |
 *  | `Alt` instances are required to satisfy the following laws:
 *  |
 *  | - Associativity: `(x <|> y) <|> z == x <|> (y <|> z)`
 *  | - Distributivity: `f <$> (x <|> y) == (f <$> x) <|> (f <$> y)`
 *  |
 *  | For example, the `Array` (`[]`) type is an instance of `Alt`, where
 *  | `(<|>)` is defined to be concatenation.
 */
var $less$bar$greater = function (dict) {
    return dict["<|>"];
};
module.exports = {
    Alt: Alt, 
    "<|>": $less$bar$greater
};

},{"Prelude":44}],2:[function(require,module,exports){
// Generated by psc-make version 0.6.9.3

/**
 *  | This module defines the `Alternative` type class and associated
 *  | helper functions.
 */
"use strict";
var Prelude = require("Prelude");
var Control_Lazy = require("Control.Lazy");
var Control_Alt = require("Control.Alt");
var Control_Plus = require("Control.Plus");

/**
 *  | The `Alternative` type class has no members of its own; it just specifies
 *  | that the type constructor has both `Applicative` and `Plus` instances.
 *  |
 *  | Types which have `Alternative` instances should also satisfy the following
 *  | laws:
 *  |
 *  | - Distributivity: `(f <|> g) <*> x == (f <*> x) <|> (g <*> x)`
 *  | - Annihilation: `empty <*> f = empty`
 */
var Alternative = function (__superclass_Control$dotPlus$dotPlus_1, __superclass_Prelude$dotApplicative_0) {
    this["__superclass_Control.Plus.Plus_1"] = __superclass_Control$dotPlus$dotPlus_1;
    this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
};
var some = function (__dict_Alternative_0) {
    return function (__dict_Lazy1_1) {
        return function (v) {
            return Prelude["<*>"]((__dict_Alternative_0["__superclass_Prelude.Applicative_0"]())["__superclass_Prelude.Apply_0"]())(Prelude["<$>"](((__dict_Alternative_0["__superclass_Control.Plus.Plus_1"]())["__superclass_Control.Alt.Alt_0"]())["__superclass_Prelude.Functor_0"]())(Prelude[":"])(v))(Control_Lazy.defer1(__dict_Lazy1_1)(function (_21) {
                return many(__dict_Alternative_0)(__dict_Lazy1_1)(v);
            }));
        };
    };
};
var many = function (__dict_Alternative_2) {
    return function (__dict_Lazy1_3) {
        return function (v) {
            return Control_Alt["<|>"]((__dict_Alternative_2["__superclass_Control.Plus.Plus_1"]())["__superclass_Control.Alt.Alt_0"]())(some(__dict_Alternative_2)(__dict_Lazy1_3)(v))(Prelude.pure(__dict_Alternative_2["__superclass_Prelude.Applicative_0"]())([  ]));
        };
    };
};
module.exports = {
    Alternative: Alternative, 
    many: many, 
    some: some
};

},{"Control.Alt":1,"Control.Lazy":6,"Control.Plus":9,"Prelude":44}],3:[function(require,module,exports){
// Generated by psc-make version 0.6.9.3

/**
 *  | This module defines helper functions for working with `Apply` instances.
 */
"use strict";
var Prelude = require("Prelude");

/**
 *  | Combine two effectful actions, keeping only the result of the first.
 */
var $less$times = function (__dict_Apply_0) {
    return function (a) {
        return function (b) {
            return Prelude["<*>"](__dict_Apply_0)(Prelude["<$>"](__dict_Apply_0["__superclass_Prelude.Functor_0"]())(Prelude["const"])(a))(b);
        };
    };
};

/**
 *  | Combine two effectful actions, keeping only the result of the second.
 */
var $times$greater = function (__dict_Apply_1) {
    return function (a) {
        return function (b) {
            return Prelude["<*>"](__dict_Apply_1)(Prelude["<$>"](__dict_Apply_1["__superclass_Prelude.Functor_0"]())(Prelude["const"](Prelude.id(Prelude.categoryArr)))(a))(b);
        };
    };
};

/**
 *  | Lift a function of five arguments to a function which accepts and returns
 *  | values wrapped with the type constructor `f`.
 */
var lift5 = function (__dict_Apply_2) {
    return function (f) {
        return function (a) {
            return function (b) {
                return function (c) {
                    return function (d) {
                        return function (e) {
                            return Prelude["<*>"](__dict_Apply_2)(Prelude["<*>"](__dict_Apply_2)(Prelude["<*>"](__dict_Apply_2)(Prelude["<*>"](__dict_Apply_2)(Prelude["<$>"](__dict_Apply_2["__superclass_Prelude.Functor_0"]())(f)(a))(b))(c))(d))(e);
                        };
                    };
                };
            };
        };
    };
};

/**
 *  | Lift a function of four arguments to a function which accepts and returns
 *  | values wrapped with the type constructor `f`.
 */
var lift4 = function (__dict_Apply_3) {
    return function (f) {
        return function (a) {
            return function (b) {
                return function (c) {
                    return function (d) {
                        return Prelude["<*>"](__dict_Apply_3)(Prelude["<*>"](__dict_Apply_3)(Prelude["<*>"](__dict_Apply_3)(Prelude["<$>"](__dict_Apply_3["__superclass_Prelude.Functor_0"]())(f)(a))(b))(c))(d);
                    };
                };
            };
        };
    };
};

/**
 *  | Lift a function of three arguments to a function which accepts and returns
 *  | values wrapped with the type constructor `f`.
 */
var lift3 = function (__dict_Apply_4) {
    return function (f) {
        return function (a) {
            return function (b) {
                return function (c) {
                    return Prelude["<*>"](__dict_Apply_4)(Prelude["<*>"](__dict_Apply_4)(Prelude["<$>"](__dict_Apply_4["__superclass_Prelude.Functor_0"]())(f)(a))(b))(c);
                };
            };
        };
    };
};

/**
 *  | Lift a function of two arguments to a function which accepts and returns
 *  | values wrapped with the type constructor `f`.
 */
var lift2 = function (__dict_Apply_5) {
    return function (f) {
        return function (a) {
            return function (b) {
                return Prelude["<*>"](__dict_Apply_5)(Prelude["<$>"](__dict_Apply_5["__superclass_Prelude.Functor_0"]())(f)(a))(b);
            };
        };
    };
};
module.exports = {
    lift5: lift5, 
    lift4: lift4, 
    lift3: lift3, 
    lift2: lift2, 
    "*>": $times$greater, 
    "<*": $less$times
};

},{"Prelude":44}],4:[function(require,module,exports){
// Generated by psc-make version 0.6.9.3

/**
 *  | This module defines the `Comonad` type class.
 */
"use strict";
var Prelude = require("Prelude");
var Control_Extend = require("Control.Extend");

/**
 *  | `Comonad` extends the `Extend` class with the `extract` function
 *  | which extracts a value, discarding the comonadic context.
 *  |
 *  | `Comonad` is the dual of `Monad`, and `extract` is the dual of 
 *  | `pure` or `return`.
 *  | 
 *  | Laws:
 *  |
 *  | - Left Identity: `extract <<= xs = xs`
 *  | - Right Identity: `extract (f <<= xs) = f xs`
 */
var Comonad = function (__superclass_Control$dotExtend$dotExtend_0, extract) {
    this["__superclass_Control.Extend.Extend_0"] = __superclass_Control$dotExtend$dotExtend_0;
    this.extract = extract;
};

/**
 *  | `Comonad` extends the `Extend` class with the `extract` function
 *  | which extracts a value, discarding the comonadic context.
 *  |
 *  | `Comonad` is the dual of `Monad`, and `extract` is the dual of 
 *  | `pure` or `return`.
 *  | 
 *  | Laws:
 *  |
 *  | - Left Identity: `extract <<= xs = xs`
 *  | - Right Identity: `extract (f <<= xs) = f xs`
 */
var extract = function (dict) {
    return dict.extract;
};
module.exports = {
    Comonad: Comonad, 
    extract: extract
};

},{"Control.Extend":5,"Prelude":44}],5:[function(require,module,exports){
// Generated by psc-make version 0.6.9.3

/**
 *  | This module defines the `Extend` type class and associated helper functions.
 */
"use strict";
var Prelude = require("Prelude");

/**
 *  | The `Extend` class defines the extension operator `(<<=)`
 *  | which extends a local context-dependent computation to
 *  | a global computation.
 *  |
 *  | `Extend` is the dual of `Bind`, and `(<<=)` is the dual of 
 *  | `(>>=)`.
 *  |
 *  | Laws:
 *  |
 *  | - Associativity: `extend f <<< extend g = extend (f <<< extend g)`
 */
var Extend = function ($less$less$eq, __superclass_Prelude$dotFunctor_0) {
    this["<<="] = $less$less$eq;
    this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
};

/**
 *  | The `Extend` class defines the extension operator `(<<=)`
 *  | which extends a local context-dependent computation to
 *  | a global computation.
 *  |
 *  | `Extend` is the dual of `Bind`, and `(<<=)` is the dual of 
 *  | `(>>=)`.
 *  |
 *  | Laws:
 *  |
 *  | - Associativity: `extend f <<< extend g = extend (f <<< extend g)`
 */
var $less$less$eq = function (dict) {
    return dict["<<="];
};

/**
 *  | Backwards co-Kleisli composition.
 */
var $eq$less$eq = function (__dict_Extend_0) {
    return function (f) {
        return function (g) {
            return function (w) {
                return f($less$less$eq(__dict_Extend_0)(g)(w));
            };
        };
    };
};

/**
 *  | Forwards co-Kleisli composition.
 */
var $eq$greater$eq = function (__dict_Extend_1) {
    return function (f) {
        return function (g) {
            return function (w) {
                return g($less$less$eq(__dict_Extend_1)(f)(w));
            };
        };
    };
};

/**
 *  | A version of `(<<=)` with its arguments flipped.
 */
var $eq$greater$greater = function (__dict_Extend_2) {
    return function (w) {
        return function (f) {
            return $less$less$eq(__dict_Extend_2)(f)(w);
        };
    };
};
var extendArr = function (__dict_Semigroup_3) {
    return new Extend(function (f) {
        return function (g) {
            return function (w) {
                return f(function (w$prime) {
                    return g(Prelude["<>"](__dict_Semigroup_3)(w)(w$prime));
                });
            };
        };
    }, function () {
        return Prelude.functorArr;
    });
};

/**
 *  | An alias for `(<<=)`.
 */
var extend = function (__dict_Extend_4) {
    return $less$less$eq(__dict_Extend_4);
};

/**
 *  | Duplicate a comonadic context.
 *  |
 *  | `duplicate` is dual to `Control.Bind.join`.
 */
var duplicate = function (__dict_Extend_5) {
    return function (w) {
        return $less$less$eq(__dict_Extend_5)(Prelude.id(Prelude.categoryArr))(w);
    };
};
module.exports = {
    Extend: Extend, 
    duplicate: duplicate, 
    extend: extend, 
    "=<=": $eq$less$eq, 
    "=>=": $eq$greater$eq, 
    "=>>": $eq$greater$greater, 
    "<<=": $less$less$eq, 
    extendArr: extendArr
};

},{"Prelude":44}],6:[function(require,module,exports){
// Generated by psc-make version 0.6.9.3

/**
 *  | This module defines the `Lazy` type class and associated
 *  | helper functions.
 */
"use strict";
var Prelude = require("Prelude");

/**
 *  | The `Lazy` class represents types which allow evaluation of values
 *  | to be _deferred_.
 *  |
 *  | Usually, this means that a type contains a function arrow which can
 *  | be used to delay evaluation.
 */
var Lazy = function (defer) {
    this.defer = defer;
};

/**
 *  | A version of `Lazy` for type constructors of one type argument.
 */
var Lazy1 = function (defer1) {
    this.defer1 = defer1;
};

/**
 *  | A version of `Lazy` for type constructors of two type arguments.
 */
var Lazy2 = function (defer2) {
    this.defer2 = defer2;
};

/**
 *  | A version of `Lazy` for type constructors of two type arguments.
 */
var defer2 = function (dict) {
    return dict.defer2;
};

/**
 *  | A version of `fix` for type constructors of two type arguments.
 */
var fix2 = function (__dict_Lazy2_0) {
    return function (f) {
        return defer2(__dict_Lazy2_0)(function (_20) {
            return f(fix2(__dict_Lazy2_0)(f));
        });
    };
};

/**
 *  | A version of `Lazy` for type constructors of one type argument.
 */
var defer1 = function (dict) {
    return dict.defer1;
};

/**
 *  | A version of `fix` for type constructors of one type argument.
 */
var fix1 = function (__dict_Lazy1_1) {
    return function (f) {
        return defer1(__dict_Lazy1_1)(function (_19) {
            return f(fix1(__dict_Lazy1_1)(f));
        });
    };
};

/**
 *  | The `Lazy` class represents types which allow evaluation of values
 *  | to be _deferred_.
 *  |
 *  | Usually, this means that a type contains a function arrow which can
 *  | be used to delay evaluation.
 */
var defer = function (dict) {
    return dict.defer;
};

/**
 *  | `fix` defines a value as the fixed point of a function.
 *  |
 *  | The `Lazy` instance allows us to generate the result lazily.
 */
var fix = function (__dict_Lazy_2) {
    return function (f) {
        return defer(__dict_Lazy_2)(function (_18) {
            return f(fix(__dict_Lazy_2)(f));
        });
    };
};
module.exports = {
    Lazy2: Lazy2, 
    Lazy1: Lazy1, 
    Lazy: Lazy, 
    fix2: fix2, 
    fix1: fix1, 
    fix: fix, 
    defer2: defer2, 
    defer1: defer1, 
    defer: defer
};

},{"Prelude":44}],7:[function(require,module,exports){
// Generated by psc-make version 0.6.9.3
"use strict";
var Prelude = require("Prelude");

    function returnE(a) {
      return function() {
        return a;
      };
    }
    ;

    function bindE(a) {
      return function(f) {
        return function() {
          return f(a())();
        };
      };
    }
    ;

    function runPure(f) {
      return f();
    }
    ;

    function untilE(f) {
      return function() {
        while (!f());
        return {};
      };
    }
    ;

    function whileE(f) {
      return function(a) {
        return function() {
          while (f()) {
            a();
          }
          return {};
        };
      };
    }
    ;

    function forE(lo) {
      return function(hi) {
        return function(f) {
          return function() {
            for (var i = lo; i < hi; i++) {
              f(i)();
            }
          };
        };
      };
    }
    ;

    function foreachE(as) {
      return function(f) {
        return function() {
          for (var i = 0; i < as.length; i++) {
            f(as[i])();
          }
        };
      };
    }
    ;
var monadEff = new Prelude.Monad(function () {
    return applicativeEff;
}, function () {
    return bindEff;
});
var bindEff = new Prelude.Bind(bindE, function () {
    return applyEff;
});
var applyEff = new Prelude.Apply(Prelude.ap(monadEff), function () {
    return functorEff;
});
var applicativeEff = new Prelude.Applicative(function () {
    return applyEff;
}, returnE);
var functorEff = new Prelude.Functor(Prelude.liftA1(applicativeEff));
module.exports = {
    foreachE: foreachE, 
    forE: forE, 
    whileE: whileE, 
    untilE: untilE, 
    runPure: runPure, 
    functorEff: functorEff, 
    applyEff: applyEff, 
    applicativeEff: applicativeEff, 
    bindEff: bindEff, 
    monadEff: monadEff
};

},{"Prelude":44}],8:[function(require,module,exports){
// Generated by psc-make version 0.6.9.3

/**
 *  | This module defines the `MonadPlus` type class.
 */
"use strict";
var Prelude = require("Prelude");
var Control_Plus = require("Control.Plus");
var Control_Alternative = require("Control.Alternative");

/**
 *  | The `MonadPlus` type class has no members of its own; it just specifies
 *  | that the type has both `Monad` and `Alternative` instances.
 *  |
 *  | Types which have `MonadPlus` instances should also satisfy the following
 *  | laws:
 *  |
 *  | - Distributivity: `(x <|> y) >>= f == (x >>= f) <|> (y >>= f)`
 *  | - Annihilation: `empty >>= f = empty`
 */
var MonadPlus = function (__superclass_Control$dotAlternative$dotAlternative_1, __superclass_Prelude$dotMonad_0) {
    this["__superclass_Control.Alternative.Alternative_1"] = __superclass_Control$dotAlternative$dotAlternative_1;
    this["__superclass_Prelude.Monad_0"] = __superclass_Prelude$dotMonad_0;
};

/**
 *  | Fail using `Plus` if a condition does not hold, or
 *  | succeed using `Monad` if it does.
 *  |
 *  | For example:
 *  |
 *  | ```purescript
 *  | import Data.Array
 *  | 
 *  | factors :: Number -> [Number]
 *  | factors n = do
 *  |   a <- 1 .. n
 *  |   b <- 1 .. a
 *  |   guard $ a * b == n
 *  |   return a
 *  | ```
 */
var guard = function (__dict_MonadPlus_0) {
    return function (_22) {
        if (_22) {
            return Prelude["return"](__dict_MonadPlus_0["__superclass_Prelude.Monad_0"]())(Prelude.unit);
        };
        if (!_22) {
            return Control_Plus.empty((__dict_MonadPlus_0["__superclass_Control.Alternative.Alternative_1"]())["__superclass_Control.Plus.Plus_1"]());
        };
        throw new Error("Failed pattern match");
    };
};
module.exports = {
    MonadPlus: MonadPlus, 
    guard: guard
};

},{"Control.Alternative":2,"Control.Plus":9,"Prelude":44}],9:[function(require,module,exports){
// Generated by psc-make version 0.6.9.3

/**
 *  | This module defines the `Plus` type class.
 */
"use strict";
var Prelude = require("Prelude");
var Control_Alt = require("Control.Alt");

/**
 *  | The `Plus` type class extends the `Alt` type class with a value that
 *  | should be the left and right identity for `(<|>)`.
 *  |
 *  | It is similar to `Monoid`, except that it applies to types of
 *  | kind `* -> *`, like `Array` or `List`, rather than concrete types like
 *  | `String` or `Number`.
 *  |
 *  | `Plus` instances should satisfy the following laws:
 *  |
 *  | - Left identity: `empty <|> x == x`
 *  | - Right identity: `x <|> empty == x`
 *  | - Annihilation: `f <$> empty == empty`
 */
var Plus = function (__superclass_Control$dotAlt$dotAlt_0, empty) {
    this["__superclass_Control.Alt.Alt_0"] = __superclass_Control$dotAlt$dotAlt_0;
    this.empty = empty;
};

/**
 *  | The `Plus` type class extends the `Alt` type class with a value that
 *  | should be the left and right identity for `(<|>)`.
 *  |
 *  | It is similar to `Monoid`, except that it applies to types of
 *  | kind `* -> *`, like `Array` or `List`, rather than concrete types like
 *  | `String` or `Number`.
 *  |
 *  | `Plus` instances should satisfy the following laws:
 *  |
 *  | - Left identity: `empty <|> x == x`
 *  | - Right identity: `x <|> empty == x`
 *  | - Annihilation: `f <$> empty == empty`
 */
var empty = function (dict) {
    return dict.empty;
};
module.exports = {
    Plus: Plus, 
    empty: empty
};

},{"Control.Alt":1,"Prelude":44}],10:[function(require,module,exports){
// Generated by psc-make version 0.6.9.3
"use strict";
var Prelude = require("Prelude");
module.exports = {};

},{"Prelude":44}],11:[function(require,module,exports){
// Generated by psc-make version 0.6.9.3

/**
 *  | Helper functions for working with immutable Javascript arrays.
 *  |
 *  | _Note_: Depending on your use-case, you may prefer to use `Data.List` or
 *  | `Data.Sequence` instead, which might give better performance for certain
 *  | use cases. This module is useful when integrating with JavaScript libraries
 *  | which use arrays, but immutable arrays are not a practical data structure
 *  | for many use cases due to their poor asymptotics.
 */
"use strict";
var Prelude = require("Prelude");
var Data_Maybe = require("Data.Maybe");
var Control_Alt = require("Control.Alt");
var Control_Plus = require("Control.Plus");
var Control_Alternative = require("Control.Alternative");
var Control_MonadPlus = require("Control.MonadPlus");
var Prelude_Unsafe = require("Prelude.Unsafe");
function snoc(l) {  return function (e) {    var l1 = l.slice();    l1.push(e);     return l1;  };};
function length (xs) {  return xs.length;};
function findIndex (f) {  return function (arr) {    for (var i = 0, l = arr.length; i < l; i++) {      if (f(arr[i])) {        return i;      }    }    return -1;  };};
function findLastIndex (f) {  return function (arr) {    for (var i = arr.length - 1; i >= 0; i--) {      if (f(arr[i])) {        return i;      }    }    return -1;  };};
function append (l1) {  return function (l2) {    return l1.concat(l2);  };};
function concat (xss) {  var result = [];  for (var i = 0, l = xss.length; i < l; i++) {    result.push.apply(result, xss[i]);  }  return result;};
function reverse (l) {  return l.slice().reverse();};
function drop (n) {  return function (l) {    return l.slice(n);  };};
function slice (s) {  return function (e) {    return function (l) {      return l.slice(s, e);    };  };};
function insertAt (index) {  return function (a) {    return function (l) {      var l1 = l.slice();      l1.splice(index, 0, a);      return l1;    };   };};
function deleteAt (index) {  return function (n) {    return function (l) {      var l1 = l.slice();      l1.splice(index, n);      return l1;    };   };};
function updateAt (index) {  return function (a) {    return function (l) {      var i = ~~index;      if (i < 0 || i >= l.length) return l;      var l1 = l.slice();      l1[i] = a;      return l1;    };   };};
function concatMap (f) {  return function (arr) {    var result = [];    for (var i = 0, l = arr.length; i < l; i++) {      Array.prototype.push.apply(result, f(arr[i]));    }    return result;  };};
function map (f) {  return function (arr) {    var l = arr.length;    var result = new Array(l);    for (var i = 0; i < l; i++) {      result[i] = f(arr[i]);    }    return result;  };};
function filter (f) {  return function (arr) {    var n = 0;    var result = [];    for (var i = 0, l = arr.length; i < l; i++) {      if (f(arr[i])) {        result[n++] = arr[i];      }    }    return result;  };};
function range (start) {  return function (end) {    var i = ~~start, e = ~~end;    var step = i > e ? -1 : 1;    var result = [i], n = 1;    while (i !== e) {      i += step;      result[n++] = i;    }    return result;  };};
function zipWith (f) {  return function (xs) {    return function (ys) {      var l = xs.length < ys.length ? xs.length : ys.length;      var result = new Array(l);      for (var i = 0; i < l; i++) {        result[i] = f(xs[i])(ys[i]);      }      return result;    };  };};
function sortJS (f) {  return function (l) {    return l.slice().sort(function (x, y) {      return f(x)(y);    });  };};

/**
 *  | An infix synonym for `range`.
 */
var $dot$dot = range;

/**
 *  | This operator provides a safe way to read a value at a particular index from an array.
 *  |
 *  | This function returns `Nothing` if the index is out-of-bounds.
 *  |
 *  | `Data.Array.Unsafe` provides the `unsafeIndex` function, which is an unsafe version of
 *  | this function without bounds checking.
 */
var $bang$bang = function (xs) {
    return function (n) {
        var isInt = function (n_1) {
            return n_1 !== ~~n_1;
        };
        var _112 = n < 0 || (n >= length(xs) || isInt(n));
        if (_112) {
            return Data_Maybe.Nothing.value;
        };
        if (!_112) {
            return new Data_Maybe.Just(xs[n]);
        };
        throw new Error("Failed pattern match");
    };
};

/**
 *  | Keep only a number of elements from the start of an array, creating a new array.
 */
var take = function (n) {
    return slice(0)(n);
};

/**
 *  | Get all but the first element of an array, creating a new array, or `Nothing` if the array is empty
 *  |
 *  | Running time: `O(n)` where `n` is the length of the array
 */
var tail = function (_32) {
    if (_32.length >= 1) {
        var _115 = _32.slice(1);
        return new Data_Maybe.Just(_115);
    };
    return Data_Maybe.Nothing.value;
};

/**
 *  | Split an array into two parts:
 *  |
 *  | 1. the longest initial subarray for which all element satisfy the specified predicate
 *  | 2. the remaining elements
 *  |
 *  | For example,
 *  |
 *  | ```purescript
 *  | span (\n -> n % 2 == 1) [1,3,2,4,5] == { init: [1,3], rest: [2,4,5] }
 *  | ```
 */
var span = (function () {
    var go = function (__copy_acc) {
        return function (__copy_p) {
            return function (__copy_xs) {
                var acc = __copy_acc;
                var p = __copy_p;
                var xs = __copy_xs;
                tco: while (true) {
                    if (xs.length >= 1) {
                        var _120 = xs.slice(1);
                        if (p(xs[0])) {
                            var __tco_acc = Prelude[":"](xs[0])(acc);
                            var __tco_p = p;
                            acc = __tco_acc;
                            p = __tco_p;
                            xs = _120;
                            continue tco;
                        };
                    };
                    return {
                        init: reverse(acc), 
                        rest: xs
                    };
                };
            };
        };
    };
    return go([  ]);
})();

/**
 *  | Calculate the longest initial subarray for which all element satisfy the specified predicate,
 *  | creating a new array.
 */
var takeWhile = function (p) {
    return function (xs) {
        return (span(p)(xs)).init;
    };
};

/**
 *  | Sort the elements of an array in increasing order, where elements are compared using
 *  | the specified partial ordering, creating a new array.
 */
var sortBy = function (comp) {
    return function (xs) {
        var comp$prime = function (x) {
            return function (y) {
                var _121 = comp(x)(y);
                if (_121 instanceof Prelude.GT) {
                    return 1;
                };
                if (_121 instanceof Prelude.EQ) {
                    return 0;
                };
                if (_121 instanceof Prelude.LT) {
                    return -1;
                };
                throw new Error("Failed pattern match");
            };
        };
        return sortJS(comp$prime)(xs);
    };
};

/**
 *  | Sort the elements of an array in increasing order, creating a new array.
 */
var sort = function (__dict_Ord_0) {
    return function (xs) {
        return sortBy(Prelude.compare(__dict_Ord_0))(xs);
    };
};

/**
 *  | Create an array of one element
 */
var singleton = function (a) {
    return [ a ];
};
var semigroupArray = new Prelude.Semigroup(append);

/**
 *  | Test whether an array is empty.
 */
var $$null = function (_33) {
    if (_33.length === 0) {
        return true;
    };
    return false;
};

/**
 *  | Remove the duplicates from an array, where element equality is determined by the
 *  | specified equivalence relation, creating a new array.
 */
var nubBy = function ($eq$eq) {
    return function (_34) {
        if (_34.length === 0) {
            return [  ];
        };
        if (_34.length >= 1) {
            var _126 = _34.slice(1);
            return Prelude[":"](_34[0])(nubBy($eq$eq)(filter(function (y) {
                return !$eq$eq(_34[0])(y);
            })(_126)));
        };
        throw new Error("Failed pattern match");
    };
};

/**
 *  | Remove the duplicates from an array, creating a new array.
 */
var nub = function (__dict_Eq_1) {
    return nubBy(Prelude["=="](__dict_Eq_1));
};

/**
 *  | Apply a function to the element at the specified index, creating a new array.
 */
var modifyAt = function (i) {
    return function (f) {
        return function (xs) {
            var _127 = $bang$bang(xs)(i);
            if (_127 instanceof Data_Maybe.Just) {
                return updateAt(i)(f(_127.value0))(xs);
            };
            if (_127 instanceof Data_Maybe.Nothing) {
                return xs;
            };
            throw new Error("Failed pattern match");
        };
    };
};

/**
 *  | Apply a function to each element in an array, keeping only the results which
 *  | contain a value, creating a new array.
 */
var mapMaybe = function (f) {
    return concatMap(Prelude["<<<"](Prelude.semigroupoidArr)(Data_Maybe.maybe([  ])(singleton))(f));
};

/**
 *  | Get the last element in an array, or `Nothing` if the array is empty
 *  |
 *  | Running time: `O(1)`.
 */
var last = function (xs) {
    return $bang$bang(xs)(length(xs) - 1);
};

/**
 *  | Calculate the intersection of two arrays, using the specified equivalence relation
 *  | to compare elements, creating a new array.
 */
var intersectBy = function (eq) {
    return function (xs) {
        return function (ys) {
            if (xs.length === 0) {
                return [  ];
            };
            if (ys.length === 0) {
                return [  ];
            };
            var el = function (x) {
                return findIndex(eq(x))(ys) >= 0;
            };
            return filter(el)(xs);
        };
    };
};

/**
 *  | Calculate the intersection of two arrays, creating a new array.
 */
var intersect = function (__dict_Eq_2) {
    return intersectBy(Prelude["=="](__dict_Eq_2));
};

/**
 *  | Get all but the last element of an array, creating a new array, or `Nothing` if the array is empty.
 *  |
 *  | Running time: `O(n)` where `n` is the length of the array
 */
var init = function (xs) {
    if (xs.length === 0) {
        return Data_Maybe.Nothing.value;
    };
    return new Data_Maybe.Just(slice(0)(length(xs) - 1)(xs));
};

/**
 *  | Get the first element in an array, or `Nothing` if the array is empty
 *  |
 *  | Running time: `O(1)`.
 */
var head = function (xs) {
    return $bang$bang(xs)(0);
};

/**
 *  | Group equal, consecutive elements of an array into arrays, using the specified
 *  | equivalence relation to detemine equality.
 */
var groupBy = (function () {
    var go = function (__copy_acc) {
        return function (__copy_op) {
            return function (__copy__36) {
                var acc = __copy_acc;
                var op = __copy_op;
                var _36 = __copy__36;
                tco: while (true) {
                    if (_36.length === 0) {
                        return reverse(acc);
                    };
                    if (_36.length >= 1) {
                        var _137 = _36.slice(1);
                        var sp = span(op(_36[0]))(_137);
                        var __tco_acc = Prelude[":"](Prelude[":"](_36[0])(sp.init))(acc);
                        var __tco_op = op;
                        acc = __tco_acc;
                        op = __tco_op;
                        _36 = sp.rest;
                        continue tco;
                    };
                    throw new Error("Failed pattern match");
                };
            };
        };
    };
    return go([  ]);
})();

/**
 *  | Group equal, consecutive elements of an array into arrays.
 *  |
 *  | For example,
 *  |
 *  | ```purescript
 *  | group [1,1,2,2,1] == [[1,1],[2,2],[1]]
 *  | ```
 */
var group = function (__dict_Eq_3) {
    return function (xs) {
        return groupBy(Prelude["=="](__dict_Eq_3))(xs);
    };
};

/**
 *  | Sort and group the elements of an array into arrays.
 *  |
 *  | For example,
 *  |
 *  | ```purescript
 *  | group [1,1,2,2,1] == [[1,1,1],[2,2]]
 *  | ```
 */
var group$prime = function (__dict_Ord_4) {
    return Prelude["<<<"](Prelude.semigroupoidArr)(group(__dict_Ord_4["__superclass_Prelude.Eq_0"]()))(sort(__dict_Ord_4));
};
var functorArray = new Prelude.Functor(map);

/**
 *  | Find the index of the last element equal to the specified element,
 *  | or `-1` if no such element exists
 */
var elemLastIndex = function (__dict_Eq_5) {
    return function (x) {
        return findLastIndex(Prelude["=="](__dict_Eq_5)(x));
    };
};

/**
 *  | Find the index of the first element equal to the specified element,
 *  | or `-1` if no such element exists
 */
var elemIndex = function (__dict_Eq_6) {
    return function (x) {
        return findIndex(Prelude["=="](__dict_Eq_6)(x));
    };
};

/**
 *  | Remove the longest initial subarray for which all element satisfy the specified predicate,
 *  | creating a new array.
 */
var dropWhile = function (p) {
    return function (xs) {
        return (span(p)(xs)).rest;
    };
};

/**
 *  | Delete the first element of an array which matches the specified value, under the
 *  | equivalence relation provided in the first argument, creating a new array.
 */
var deleteBy = function (eq) {
    return function (x) {
        return function (ys) {
            if (ys.length === 0) {
                return [  ];
            };
            var _141 = findIndex(eq(x))(ys);
            if (_141 < 0) {
                return ys;
            };
            return deleteAt(_141)(1)(ys);
        };
    };
};

/**
 *  | Delete the first element of an array which is equal to the specified value,
 *  | creating a new array.
 */
var $$delete = function (__dict_Eq_7) {
    return deleteBy(Prelude["=="](__dict_Eq_7));
};

/**
 *  | Delete the first occurrence of each element in the second array from the first array,
 *  | creating a new array.
 */
var $bslash$bslash = function (__dict_Eq_8) {
    return function (xs) {
        return function (ys) {
            var go = function (__copy_xs_1) {
                return function (__copy__35) {
                    var xs_1 = __copy_xs_1;
                    var _35 = __copy__35;
                    tco: while (true) {
                        if (_35.length === 0) {
                            return xs_1;
                        };
                        if (xs_1.length === 0) {
                            return [  ];
                        };
                        if (_35.length >= 1) {
                            var _145 = _35.slice(1);
                            var __tco_xs_1 = $$delete(__dict_Eq_8)(_35[0])(xs_1);
                            xs_1 = __tco_xs_1;
                            _35 = _145;
                            continue tco;
                        };
                        throw new Error("Failed pattern match");
                    };
                };
            };
            return go(xs)(ys);
        };
    };
};

/**
 *  | Filter an array of optional values, keeping only the elements which contain
 *  | a value, creating a new array.
 */
var catMaybes = concatMap(Data_Maybe.maybe([  ])(singleton));
var monadArray = new Prelude.Monad(function () {
    return applicativeArray;
}, function () {
    return bindArray;
});
var bindArray = new Prelude.Bind(Prelude.flip(concatMap), function () {
    return applyArray;
});
var applyArray = new Prelude.Apply(Prelude.ap(monadArray), function () {
    return functorArray;
});
var applicativeArray = new Prelude.Applicative(function () {
    return applyArray;
}, singleton);
var altArray = new Control_Alt.Alt(append, function () {
    return functorArray;
});
var plusArray = new Control_Plus.Plus(function () {
    return altArray;
}, [  ]);
var alternativeArray = new Control_Alternative.Alternative(function () {
    return plusArray;
}, function () {
    return applicativeArray;
});
var monadPlusArray = new Control_MonadPlus.MonadPlus(function () {
    return alternativeArray;
}, function () {
    return monadArray;
});
module.exports = {
    takeWhile: takeWhile, 
    dropWhile: dropWhile, 
    span: span, 
    groupBy: groupBy, 
    "group'": group$prime, 
    group: group, 
    sortBy: sortBy, 
    sort: sort, 
    nubBy: nubBy, 
    nub: nub, 
    zipWith: zipWith, 
    range: range, 
    filter: filter, 
    concatMap: concatMap, 
    intersect: intersect, 
    intersectBy: intersectBy, 
    "\\\\": $bslash$bslash, 
    "delete": $$delete, 
    deleteBy: deleteBy, 
    modifyAt: modifyAt, 
    updateAt: updateAt, 
    deleteAt: deleteAt, 
    insertAt: insertAt, 
    take: take, 
    drop: drop, 
    reverse: reverse, 
    concat: concat, 
    append: append, 
    elemLastIndex: elemLastIndex, 
    elemIndex: elemIndex, 
    findLastIndex: findLastIndex, 
    findIndex: findIndex, 
    length: length, 
    catMaybes: catMaybes, 
    mapMaybe: mapMaybe, 
    map: map, 
    "null": $$null, 
    init: init, 
    tail: tail, 
    last: last, 
    head: head, 
    singleton: singleton, 
    snoc: snoc, 
    "..": $dot$dot, 
    "!!": $bang$bang, 
    functorArray: functorArray, 
    applyArray: applyArray, 
    applicativeArray: applicativeArray, 
    bindArray: bindArray, 
    monadArray: monadArray, 
    semigroupArray: semigroupArray, 
    altArray: altArray, 
    plusArray: plusArray, 
    alternativeArray: alternativeArray, 
    monadPlusArray: monadPlusArray
};

},{"Control.Alt":1,"Control.Alternative":2,"Control.MonadPlus":8,"Control.Plus":9,"Data.Maybe":20,"Prelude":44,"Prelude.Unsafe":43}],12:[function(require,module,exports){
// Generated by psc-make version 0.6.9.3

/**
 *  | A type and functions for single characters.
 */
"use strict";
var Prelude = require("Prelude");

    function toCharCode(c) {
      return c.charCodeAt(0);
    }
    ;

    function fromCharCode(c) {
      return String.fromCharCode(c);
    }
    ;

/**
 * | A unicode character.
 */
var Char = function (x) {
    return x;
};

/**
 *  | Characters can be rendered as a string with `show`.
 */
var showChar = new Prelude.Show(function (_13) {
    return "Char " + Prelude.show(Prelude.showString)(_13);
});

/**
 *  | Characters can be compared for equality with `==` and `/=`.
 */
var eqChar = new Prelude.Eq(function (a) {
    return function (b) {
        return !Prelude["=="](eqChar)(a)(b);
    };
}, function (_9) {
    return function (_10) {
        return _9 === _10;
    };
});

/**
 *  | Characters can be compared with `compare`, `>`, `>=`, `<` and `<=`.
 */
var ordChar = new Prelude.Ord(function () {
    return eqChar;
}, function (_11) {
    return function (_12) {
        return Prelude.compare(Prelude.ordString)(_11)(_12);
    };
});

/**
 *  | Returns the string of length `1` containing only the given character.
 */
var charString = function (_8) {
    return _8;
};
module.exports = {
    toCharCode: toCharCode, 
    fromCharCode: fromCharCode, 
    charString: charString, 
    eqChar: eqChar, 
    ordChar: ordChar, 
    showChar: showChar
};

},{"Prelude":44}],13:[function(require,module,exports){
// Generated by psc-make version 0.6.9.3
"use strict";
var Prelude = require("Prelude");
var Data_Monoid = require("Data.Monoid");
var Data_Contravariant = require("Data.Contravariant");
var Data_Foldable = require("Data.Foldable");
var Data_Traversable = require("Data.Traversable");
var Const = function (x) {
    return x;
};
var showConst = function (__dict_Show_2) {
    return new Prelude.Show(function (_193) {
        return "Const (" + (Prelude.show(__dict_Show_2)(_193) + ")");
    });
};
var semigroupoidConst = new Prelude.Semigroupoid(function (_194) {
    return function (_195) {
        return _195;
    };
});
var semigroupConst = function (__dict_Semigroup_3) {
    return new Prelude.Semigroup(function (_196) {
        return function (_197) {
            return Prelude["<>"](__dict_Semigroup_3)(_196)(_197);
        };
    });
};
var monoidConst = function (__dict_Monoid_5) {
    return new Data_Monoid.Monoid(function () {
        return semigroupConst(__dict_Monoid_5["__superclass_Prelude.Semigroup_0"]());
    }, Data_Monoid.mempty(__dict_Monoid_5));
};
var getConst = function (_188) {
    return _188;
};
var functorConst = new Prelude.Functor(function (_198) {
    return function (_199) {
        return _199;
    };
});
var foldableConst = new Data_Foldable.Foldable(function (__dict_Monoid_6) {
    return function (_211) {
        return function (_212) {
            return Data_Monoid.mempty(__dict_Monoid_6);
        };
    };
}, function (_209) {
    return function (z) {
        return function (_210) {
            return z;
        };
    };
}, function (_207) {
    return function (z) {
        return function (_208) {
            return z;
        };
    };
});
var traversableConst = new Data_Traversable.Traversable(function () {
    return foldableConst;
}, function () {
    return functorConst;
}, function (__dict_Applicative_1) {
    return function (_215) {
        return Prelude.pure(__dict_Applicative_1)(_215);
    };
}, function (__dict_Applicative_0) {
    return function (_213) {
        return function (_214) {
            return Prelude.pure(__dict_Applicative_0)(_214);
        };
    };
});
var eqConst = function (__dict_Eq_7) {
    return new Prelude.Eq(function (c) {
        return function (c$prime) {
            return !Prelude["=="](eqConst(__dict_Eq_7))(c)(c$prime);
        };
    }, function (_189) {
        return function (_190) {
            return Prelude["=="](__dict_Eq_7)(_189)(_190);
        };
    });
};
var ordConst = function (__dict_Ord_4) {
    return new Prelude.Ord(function () {
        return eqConst(__dict_Ord_4["__superclass_Prelude.Eq_0"]());
    }, function (_191) {
        return function (_192) {
            return Prelude.compare(__dict_Ord_4)(_191)(_192);
        };
    });
};
var contravariantConst = new Data_Contravariant.Contravariant(function (_205) {
    return function (_206) {
        return _206;
    };
});
var applyConst = function (__dict_Semigroup_9) {
    return new Prelude.Apply(function (_200) {
        return function (_201) {
            return Prelude["<>"](__dict_Semigroup_9)(_200)(_201);
        };
    }, function () {
        return functorConst;
    });
};
var bindConst = function (__dict_Semigroup_8) {
    return new Prelude.Bind(function (_202) {
        return function (_203) {
            return _202;
        };
    }, function () {
        return applyConst(__dict_Semigroup_8);
    });
};
var applicativeConst = function (__dict_Monoid_10) {
    return new Prelude.Applicative(function () {
        return applyConst(__dict_Monoid_10["__superclass_Prelude.Semigroup_0"]());
    }, function (_204) {
        return Data_Monoid.mempty(__dict_Monoid_10);
    });
};
module.exports = {
    Const: Const, 
    getConst: getConst, 
    eqConst: eqConst, 
    ordConst: ordConst, 
    showConst: showConst, 
    semigroupoidConst: semigroupoidConst, 
    semigroupConst: semigroupConst, 
    monoidConst: monoidConst, 
    functorConst: functorConst, 
    applyConst: applyConst, 
    bindConst: bindConst, 
    applicativeConst: applicativeConst, 
    contravariantConst: contravariantConst, 
    foldableConst: foldableConst, 
    traversableConst: traversableConst
};

},{"Data.Contravariant":14,"Data.Foldable":17,"Data.Monoid":26,"Data.Traversable":31,"Prelude":44}],14:[function(require,module,exports){
// Generated by psc-make version 0.6.9.3
"use strict";
var Prelude = require("Prelude");
var Contravariant = function ($greater$dollar$less) {
    this[">$<"] = $greater$dollar$less;
};
var $greater$dollar$less = function (dict) {
    return dict[">$<"];
};
module.exports = {
    Contravariant: Contravariant, 
    ">$<": $greater$dollar$less
};

},{"Prelude":44}],15:[function(require,module,exports){
// Generated by psc-make version 0.6.9.3
"use strict";
var Prelude = require("Prelude");
var Data_Identity = require("Data.Identity");

/**
 *  | Categorical dual of `Traversable`:
 *  |
 *  | - `distribute` is the dual of `sequence` - it zips an 
 *  |   arbitrary collection of containers
 *  | - `collect` is the dual of `traverse` - it traverses 
 *  |   an arbitrary collection of values
 */
var Distributive = function (__superclass_Prelude$dotFunctor_0, collect, distribute) {
    this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
    this.collect = collect;
    this.distribute = distribute;
};
var distributiveIdentity = new Distributive(function () {
    return Data_Identity.functorIdentity;
}, function (__dict_Functor_1) {
    return function (a2Idb) {
        return function (ga) {
            return Prelude["<$>"](__dict_Functor_1)(Prelude["<<<"](Prelude.semigroupoidArr)(Data_Identity.runIdentity)(a2Idb))(ga);
        };
    };
}, function (__dict_Functor_0) {
    return function (gIdb) {
        return Prelude["<$>"](__dict_Functor_0)(Data_Identity.runIdentity)(gIdb);
    };
});

/**
 *  | Categorical dual of `Traversable`:
 *  |
 *  | - `distribute` is the dual of `sequence` - it zips an 
 *  |   arbitrary collection of containers
 *  | - `collect` is the dual of `traverse` - it traverses 
 *  |   an arbitrary collection of values
 *  | Default implementation: `distribute = collect id`
 */
var distribute = function (dict) {
    return dict.distribute;
};

/**
 *  | Zip an arbitrary collection of containers and summarize the results
 */
var cotraverse = function (__dict_Distributive_2) {
    return function (__dict_Functor_3) {
        return function (ga2b) {
            return function (gfa) {
                return Prelude["<$>"](__dict_Distributive_2["__superclass_Prelude.Functor_0"]())(ga2b)(distribute(__dict_Distributive_2)(__dict_Functor_3)(gfa));
            };
        };
    };
};

/**
 *  | Categorical dual of `Traversable`:
 *  |
 *  | - `distribute` is the dual of `sequence` - it zips an 
 *  |   arbitrary collection of containers
 *  | - `collect` is the dual of `traverse` - it traverses 
 *  |   an arbitrary collection of values
 *  | Default implementation: `collect a2gb fa = distribute (a2gb <$> fa)`
 */
var collect = function (dict) {
    return dict.collect;
};
module.exports = {
    Distributive: Distributive, 
    cotraverse: cotraverse, 
    collect: collect, 
    distribute: distribute, 
    distributiveIdentity: distributiveIdentity
};

},{"Data.Identity":19,"Prelude":44}],16:[function(require,module,exports){
// Generated by psc-make version 0.6.9.3
"use strict";
var Prelude = require("Prelude");
var Control_Alt = require("Control.Alt");
var Control_Extend = require("Control.Extend");

/**
 *  | The `Either` type is used to represent a choice between two types of value.
 *  |
 *  | A common use case for `Either` is error handling, where `Left` is used to
 *  | carry an error value and `Right` is used to carry a success value.
 */
var Left = (function () {
    function Left(value0) {
        this.value0 = value0;
    };
    Left.create = function (value0) {
        return new Left(value0);
    };
    return Left;
})();

/**
 *  | The `Either` type is used to represent a choice between two types of value.
 *  |
 *  | A common use case for `Either` is error handling, where `Left` is used to
 *  | carry an error value and `Right` is used to carry a success value.
 */
var Right = (function () {
    function Right(value0) {
        this.value0 = value0;
    };
    Right.create = function (value0) {
        return new Right(value0);
    };
    return Right;
})();

/**
 *  | The `Show` instance allows `Either` values to be rendered as a string with
 *  | `show` whenever there is an `Show` instance for both type the `Either` can
 *  | contain.
 */
var showEither = function (__dict_Show_0) {
    return function (__dict_Show_1) {
        return new Prelude.Show(function (_4) {
            if (_4 instanceof Left) {
                return "Left (" + (Prelude.show(__dict_Show_0)(_4.value0) + ")");
            };
            if (_4 instanceof Right) {
                return "Right (" + (Prelude.show(__dict_Show_1)(_4.value0) + ")");
            };
            throw new Error("Failed pattern match");
        });
    };
};

/**
 *  | The `Functor` instance allows functions to transform the contents of a
 *  | `Right` with the `<$>` operator:
 *  |
 *  | ``` purescript
 *  | f <$> Right x == Right (f x)
 *  | ```
 *  |
 *  | `Left` values are untouched:
 *  |
 *  | ``` purescript
 *  | f <$> Left y == Left y
 *  | ```
 */
var functorEither = new Prelude.Functor(function (f) {
    return function (_2) {
        if (_2 instanceof Left) {
            return new Left(_2.value0);
        };
        if (_2 instanceof Right) {
            return new Right(f(_2.value0));
        };
        throw new Error("Failed pattern match");
    };
});

/**
 *  | The `Extend` instance allows sequencing of `Either` values and functions
 *  | that accept an `Either` and return a non-`Either` result using the
 *  | `<<=` operator.
 *  |
 *  | ``` purescript
 *  | f <<= Left x = Left x
 *  | f <<= Right x = Right (f x)
 *  | ```
 */
var extendEither = new Control_Extend.Extend(function (f) {
    return function (x) {
        if (x instanceof Left) {
            return new Left(x.value0);
        };
        return new Right(f(x));
    };
}, function () {
    return functorEither;
});

/**
 *  | The `Eq` instance allows `Either` values to be checked for equality with
 *  | `==` and inequality with `/=` whenever there is an `Eq` instance for both
 *  | types the `Either` can contain.
 */
var eqEither = function (__dict_Eq_4) {
    return function (__dict_Eq_5) {
        return new Prelude.Eq(function (a) {
            return function (b) {
                return !Prelude["=="](eqEither(__dict_Eq_4)(__dict_Eq_5))(a)(b);
            };
        }, function (_5) {
            return function (_6) {
                if (_5 instanceof Left && _6 instanceof Left) {
                    return Prelude["=="](__dict_Eq_4)(_5.value0)(_6.value0);
                };
                if (_5 instanceof Right && _6 instanceof Right) {
                    return Prelude["=="](__dict_Eq_5)(_5.value0)(_6.value0);
                };
                return false;
            };
        });
    };
};

/**
 *  | The `Ord` instance allows `Either` values to be compared with
 *  | `compare`, `>`, `>=`, `<` and `<=` whenever there is an `Ord` instance for
 *  | both types the `Either` can contain.
 *  |
 *  | Any `Left` value is considered to be less than a `Right` value.
 */
var ordEither = function (__dict_Ord_2) {
    return function (__dict_Ord_3) {
        return new Prelude.Ord(function () {
            return eqEither(__dict_Ord_2["__superclass_Prelude.Eq_0"]())(__dict_Ord_3["__superclass_Prelude.Eq_0"]());
        }, function (_7) {
            return function (_8) {
                if (_7 instanceof Left && _8 instanceof Left) {
                    return Prelude.compare(__dict_Ord_2)(_7.value0)(_8.value0);
                };
                if (_7 instanceof Right && _8 instanceof Right) {
                    return Prelude.compare(__dict_Ord_3)(_7.value0)(_8.value0);
                };
                if (_7 instanceof Left) {
                    return Prelude.LT.value;
                };
                if (_8 instanceof Left) {
                    return Prelude.GT.value;
                };
                throw new Error("Failed pattern match");
            };
        });
    };
};

/**
 *  | Takes two functions and an `Either` value, if the value is a `Left` the
 *  | inner value is applied to the first function, if the value is a `Right`
 *  | the inner value is applied to the second function.
 *  |
 *  | ``` purescript
 *  | either f g (Left x) == f x
 *  | either f g (Right y) == g y
 *  | ```
 */
var either = function (f) {
    return function (g) {
        return function (_1) {
            if (_1 instanceof Left) {
                return f(_1.value0);
            };
            if (_1 instanceof Right) {
                return g(_1.value0);
            };
            throw new Error("Failed pattern match");
        };
    };
};

/**
 *  | Returns `true` when the `Either` value was constructed with `Left`.
 */
var isLeft = either(Prelude["const"](true))(Prelude["const"](false));

/**
 *  | Returns `true` when the `Either` value was constructed with `Right`.
 */
var isRight = either(Prelude["const"](false))(Prelude["const"](true));

/**
 *  | The `Apply` instance allows functions contained within a `Right` to
 *  | transform a value contained within a `Right` using the `(<*>)` operator:
 *  |
 *  | ``` purescript
 *  | Right f <*> Right x == Right (f x)
 *  | ```
 *  |
 *  | `Left` values are left untouched:
 *  |
 *  | ``` purescript
 *  | Left f <*> Right x == Left x
 *  | Right f <*> Left y == Left y
 *  | ```
 *  |
 *  | Combining `Functor`'s `<$>` with `Apply`'s `<*>` can be used transform a
 *  | pure function to take `Either`-typed arguments so `f :: a -> b -> c`
 *  | becomes `f :: Either l a -> Either l b -> Either l c`:
 *  |
 *  | ``` purescript
 *  | f <$> Right x <*> Right y == Right (f x y)
 *  | ```
 *  |
 *  | The `Left`-preserving behaviour of both operators means the result of
 *  | an expression like the above but where any one of the values is `Left`
 *  | means the whole result becomes `Left` also, taking the first `Left` value
 *  | found:
 *  |
 *  | ``` purescript
 *  | f <$> Left x <*> Right y == Left x
 *  | f <$> Right x <*> Left y == Left y
 *  | f <$> Left x <*> Left y == Left x
 *  | ```
 */
var applyEither = new Prelude.Apply(function (_3) {
    return function (r) {
        if (_3 instanceof Left) {
            return new Left(_3.value0);
        };
        if (_3 instanceof Right) {
            return Prelude["<$>"](functorEither)(_3.value0)(r);
        };
        throw new Error("Failed pattern match");
    };
}, function () {
    return functorEither;
});

/**
 *  | The `Bind` instance allows sequencing of `Either` values and functions that
 *  | return an `Either` by using the `>>=` operator:
 *  |
 *  | ``` purescript
 *  | Left x >>= f = Left x
 *  | Right x >>= f = f x
 *  | ```
 */
var bindEither = new Prelude.Bind(either(function (e) {
    return function (_0) {
        return new Left(e);
    };
})(function (a) {
    return function (f) {
        return f(a);
    };
}), function () {
    return applyEither;
});

/**
 *  | The `Applicative` instance enables lifting of values into `Either` with the
 *  | `pure` or `return` function (`return` is an alias for `pure`):
 *  |
 *  | ``` purescript
 *  | pure x :: Either _ _ == Right x
 *  | return x :: Either _ _ == Right x
 *  | ```
 *  |
 *  | Combining `Functor`'s `<$>` with `Apply`'s `<*>` and `Applicative`'s
 *  | `pure` can be used to pass a mixture of `Either` and non-`Either` typed
 *  | values to a function that does not usually expect them, by using `pure`
 *  | for any value that is not already `Either` typed:
 *  |
 *  | ``` purescript
 *  | f <$> Right x <*> pure y == Right (f x y)
 *  | ```
 *  |
 *  | Even though `pure = Right` it is recommended to use `pure` in situations
 *  | like this as it allows the choice of `Applicative` to be changed later
 *  | without having to go through and replace `Right` with a new constructor.
 */
var applicativeEither = new Prelude.Applicative(function () {
    return applyEither;
}, Right.create);

/**
 *  | The `Monad` instance guarantees that there are both `Applicative` and
 *  | `Bind` instances for `Either`. This also enables the `do` syntactic sugar:
 *  |
 *  | ``` purescript
 *  | do
 *  |   x' <- x
 *  |   y' <- y
 *  |   pure (f x' y')
 *  | ```
 *  |
 *  | Which is equivalent to:
 *  |
 *  | ``` purescript
 *  | x >>= (\x' -> y >>= (\y' -> pure (f x' y')))
 *  | ```
 */
var monadEither = new Prelude.Monad(function () {
    return applicativeEither;
}, function () {
    return bindEither;
});

/**
 *  | The `Alt` instance allows for a choice to be made between two `Either`
 *  | values with the `<|>` operator, where the first `Right` encountered
 *  | is taken.
 *  |
 *  | ``` purescript
 *  | Right x <|> Right y == Right x
 *  | Left x <|> Right y == Right y
 *  | Left x <|> Left y == Left y
 *  | ```
 */
var altEither = new Control_Alt.Alt(function (l) {
    return function (r) {
        if (l instanceof Left) {
            return r;
        };
        return l;
    };
}, function () {
    return functorEither;
});
module.exports = {
    Left: Left, 
    Right: Right, 
    isRight: isRight, 
    isLeft: isLeft, 
    either: either, 
    functorEither: functorEither, 
    applyEither: applyEither, 
    applicativeEither: applicativeEither, 
    altEither: altEither, 
    bindEither: bindEither, 
    monadEither: monadEither, 
    extendEither: extendEither, 
    showEither: showEither, 
    eqEither: eqEither, 
    ordEither: ordEither
};

},{"Control.Alt":1,"Control.Extend":5,"Prelude":44}],17:[function(require,module,exports){
// Generated by psc-make version 0.6.9.3
"use strict";
var Prelude = require("Prelude");
var Data_Monoid = require("Data.Monoid");
var Control_Apply = require("Control.Apply");
var Data_Monoid_First = require("Data.Monoid.First");
var Data_Either = require("Data.Either");
var Data_Maybe = require("Data.Maybe");
var Data_Monoid_Additive = require("Data.Monoid.Additive");
var Data_Monoid_Dual = require("Data.Monoid.Dual");
var Data_Monoid_Last = require("Data.Monoid.Last");
var Data_Monoid_Multiplicative = require("Data.Monoid.Multiplicative");
var Data_Tuple = require("Data.Tuple");

  function foldrArray(f) {
    return function(z) {
      return function(xs) {
        var acc = z;
        for (var i = xs.length - 1; i >= 0; --i) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  }
  ;

  function foldlArray(f) {
    return function(z) {
      return function(xs) {
        var acc = z;
        for (var i = 0, len = xs.length; i < len; ++i) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  }
  ;

/**
 *  | `Foldable` represents data structures which can be _folded_.
 *  |
 *  | - `foldr` folds a structure from the right
 *  | - `foldl` folds a structure from the left
 *  | - `foldMap` folds a structure by accumulating values in a `Monoid`
 */
var Foldable = function (foldMap, foldl, foldr) {
    this.foldMap = foldMap;
    this.foldl = foldl;
    this.foldr = foldr;
};

/**
 *  | `Foldable` represents data structures which can be _folded_.
 *  |
 *  | - `foldr` folds a structure from the right
 *  | - `foldl` folds a structure from the left
 *  | - `foldMap` folds a structure by accumulating values in a `Monoid`
 */
var foldr = function (dict) {
    return dict.foldr;
};

/**
 *  | Traverse a data structure, performing some effects encoded by an
 *  | `Applicative` functor at each value, ignoring the final result.
 *  |
 *  | For example:
 *  |
 *  | ```purescript
 *  | traverse_ print [1, 2, 3]
 *  | ```
 */
var traverse_ = function (__dict_Applicative_0) {
    return function (__dict_Foldable_1) {
        return function (f) {
            return foldr(__dict_Foldable_1)(Prelude["<<<"](Prelude.semigroupoidArr)(Control_Apply["*>"](__dict_Applicative_0["__superclass_Prelude.Apply_0"]()))(f))(Prelude.pure(__dict_Applicative_0)(Prelude.unit));
        };
    };
};

/**
 *  | A version of `traverse_` with its arguments flipped.
 *  |
 *  | This can be useful when running an action written using do notation
 *  | for every element in a data structure:
 *  |
 *  | For example:
 *  |
 *  | ```purescript
 *  | for_ [1, 2, 3] \n -> do
 *  |   print n
 *  |   trace "squared is"
 *  |   print (n * n)
 *  | ```
 */
var for_ = function (__dict_Applicative_2) {
    return function (__dict_Foldable_3) {
        return Prelude.flip(traverse_(__dict_Applicative_2)(__dict_Foldable_3));
    };
};

/**
 *  | Perform all of the effects in some data structure in the order
 *  | given by the `Foldable` instance, ignoring the final result.
 *  |
 *  | For example:
 *  |
 *  | ```purescript
 *  | sequence_ [ trace "Hello, ", trace " world!" ]
 *  | ```
 */
var sequence_ = function (__dict_Applicative_4) {
    return function (__dict_Foldable_5) {
        return traverse_(__dict_Applicative_4)(__dict_Foldable_5)(Prelude.id(Prelude.categoryArr));
    };
};

/**
 *  | `Foldable` represents data structures which can be _folded_.
 *  |
 *  | - `foldr` folds a structure from the right
 *  | - `foldl` folds a structure from the left
 *  | - `foldMap` folds a structure by accumulating values in a `Monoid`
 */
var foldl = function (dict) {
    return dict.foldl;
};

/**
 *  | Fold a data structure, accumulating values in some `Monoid`,
 *  | combining adjacent elements using the specified separator. 
 */
var intercalate = function (__dict_Foldable_6) {
    return function (__dict_Monoid_7) {
        return function (sep) {
            return function (xs) {
                var go = function (_167) {
                    return function (x) {
                        if (_167.init) {
                            return {
                                init: false, 
                                acc: x
                            };
                        };
                        return {
                            init: false, 
                            acc: Prelude["<>"](__dict_Monoid_7["__superclass_Prelude.Semigroup_0"]())(_167.acc)(Prelude["<>"](__dict_Monoid_7["__superclass_Prelude.Semigroup_0"]())(sep)(x))
                        };
                    };
                };
                return (foldl(__dict_Foldable_6)(go)({
                    init: true, 
                    acc: Data_Monoid.mempty(__dict_Monoid_7)
                })(xs)).acc;
            };
        };
    };
};

/**
 *  | Fold a data structure, accumulating values in some `Monoid`.
 */
var mconcat = function (__dict_Foldable_8) {
    return function (__dict_Monoid_9) {
        return foldl(__dict_Foldable_8)(Prelude["<>"](__dict_Monoid_9["__superclass_Prelude.Semigroup_0"]()))(Data_Monoid.mempty(__dict_Monoid_9));
    };
};

/**
 *  | Test whether any `Boolean` value in a data structure is `true`.
 */
var or = function (__dict_Foldable_10) {
    return foldl(__dict_Foldable_10)(Prelude["||"](Prelude.boolLikeBoolean))(false);
};

/**
 *  | Find the product of the numeric values in a data structure.
 */
var product = function (__dict_Foldable_11) {
    return foldl(__dict_Foldable_11)(Prelude["*"](Prelude.semiringNumber))(1);
};

/**
 *  | Find the sum of the numeric values in a data structure.
 */
var sum = function (__dict_Foldable_12) {
    return foldl(__dict_Foldable_12)(Prelude["+"](Prelude.semiringNumber))(0);
};
var foldableTuple = new Foldable(function (__dict_Monoid_13) {
    return function (f) {
        return function (_151) {
            return f(_151.value1);
        };
    };
}, function (f) {
    return function (z) {
        return function (_150) {
            return f(z)(_150.value1);
        };
    };
}, function (f) {
    return function (z) {
        return function (_149) {
            return f(_149.value1)(z);
        };
    };
});
var foldableMultiplicative = new Foldable(function (__dict_Monoid_14) {
    return function (f) {
        return function (_166) {
            return f(_166);
        };
    };
}, function (f) {
    return function (z) {
        return function (_165) {
            return f(z)(_165);
        };
    };
}, function (f) {
    return function (z) {
        return function (_164) {
            return f(_164)(z);
        };
    };
});
var foldableMaybe = new Foldable(function (__dict_Monoid_15) {
    return function (f) {
        return function (_148) {
            if (_148 instanceof Data_Maybe.Nothing) {
                return Data_Monoid.mempty(__dict_Monoid_15);
            };
            if (_148 instanceof Data_Maybe.Just) {
                return f(_148.value0);
            };
            throw new Error("Failed pattern match");
        };
    };
}, function (f) {
    return function (z) {
        return function (_147) {
            if (_147 instanceof Data_Maybe.Nothing) {
                return z;
            };
            if (_147 instanceof Data_Maybe.Just) {
                return f(z)(_147.value0);
            };
            throw new Error("Failed pattern match");
        };
    };
}, function (f) {
    return function (z) {
        return function (_146) {
            if (_146 instanceof Data_Maybe.Nothing) {
                return z;
            };
            if (_146 instanceof Data_Maybe.Just) {
                return f(_146.value0)(z);
            };
            throw new Error("Failed pattern match");
        };
    };
});
var foldableEither = new Foldable(function (__dict_Monoid_16) {
    return function (f) {
        return function (_145) {
            if (_145 instanceof Data_Either.Left) {
                return Data_Monoid.mempty(__dict_Monoid_16);
            };
            if (_145 instanceof Data_Either.Right) {
                return f(_145.value0);
            };
            throw new Error("Failed pattern match");
        };
    };
}, function (f) {
    return function (z) {
        return function (_144) {
            if (_144 instanceof Data_Either.Left) {
                return z;
            };
            if (_144 instanceof Data_Either.Right) {
                return f(z)(_144.value0);
            };
            throw new Error("Failed pattern match");
        };
    };
}, function (f) {
    return function (z) {
        return function (_143) {
            if (_143 instanceof Data_Either.Left) {
                return z;
            };
            if (_143 instanceof Data_Either.Right) {
                return f(_143.value0)(z);
            };
            throw new Error("Failed pattern match");
        };
    };
});
var foldableDual = new Foldable(function (__dict_Monoid_17) {
    return function (f) {
        return function (_157) {
            return f(_157);
        };
    };
}, function (f) {
    return function (z) {
        return function (_156) {
            return f(z)(_156);
        };
    };
}, function (f) {
    return function (z) {
        return function (_155) {
            return f(_155)(z);
        };
    };
});
var foldableArray = new Foldable(function (__dict_Monoid_18) {
    return function (f) {
        return function (xs) {
            return foldr(foldableArray)(function (x) {
                return function (acc) {
                    return Prelude["<>"](__dict_Monoid_18["__superclass_Prelude.Semigroup_0"]())(f(x))(acc);
                };
            })(Data_Monoid.mempty(__dict_Monoid_18))(xs);
        };
    };
}, function (f) {
    return function (z) {
        return function (xs) {
            return foldlArray(f)(z)(xs);
        };
    };
}, function (f) {
    return function (z) {
        return function (xs) {
            return foldrArray(f)(z)(xs);
        };
    };
});
var foldableAdditive = new Foldable(function (__dict_Monoid_19) {
    return function (f) {
        return function (_154) {
            return f(_154);
        };
    };
}, function (f) {
    return function (z) {
        return function (_153) {
            return f(z)(_153);
        };
    };
}, function (f) {
    return function (z) {
        return function (_152) {
            return f(_152)(z);
        };
    };
});

/**
 *  | `Foldable` represents data structures which can be _folded_.
 *  |
 *  | - `foldr` folds a structure from the right
 *  | - `foldl` folds a structure from the left
 *  | - `foldMap` folds a structure by accumulating values in a `Monoid`
 */
var foldMap = function (dict) {
    return dict.foldMap;
};
var foldableFirst = new Foldable(function (__dict_Monoid_20) {
    return function (f) {
        return function (_160) {
            return foldMap(foldableMaybe)(__dict_Monoid_20)(f)(_160);
        };
    };
}, function (f) {
    return function (z) {
        return function (_159) {
            return foldl(foldableMaybe)(f)(z)(_159);
        };
    };
}, function (f) {
    return function (z) {
        return function (_158) {
            return foldr(foldableMaybe)(f)(z)(_158);
        };
    };
});
var foldableLast = new Foldable(function (__dict_Monoid_21) {
    return function (f) {
        return function (_163) {
            return foldMap(foldableMaybe)(__dict_Monoid_21)(f)(_163);
        };
    };
}, function (f) {
    return function (z) {
        return function (_162) {
            return foldl(foldableMaybe)(f)(z)(_162);
        };
    };
}, function (f) {
    return function (z) {
        return function (_161) {
            return foldr(foldableMaybe)(f)(z)(_161);
        };
    };
});

/**
 *  | Lookup a value in a data structure of `Tuple`s, generalizing association lists.
 */
var lookup = function (__dict_Eq_22) {
    return function (__dict_Foldable_23) {
        return function (a) {
            return function (f) {
                return Data_Monoid_First.runFirst(foldMap(__dict_Foldable_23)(Data_Monoid_First.monoidFirst)(function (_142) {
                    var _676 = Prelude["=="](__dict_Eq_22)(a)(_142.value0);
                    if (_676) {
                        return new Data_Maybe.Just(_142.value1);
                    };
                    if (!_676) {
                        return Data_Maybe.Nothing.value;
                    };
                    throw new Error("Failed pattern match");
                })(f));
            };
        };
    };
};

/**
 *  | Fold a data structure, accumulating values in some `Monoid`.
 */
var fold = function (__dict_Foldable_24) {
    return function (__dict_Monoid_25) {
        return foldMap(__dict_Foldable_24)(__dict_Monoid_25)(Prelude.id(Prelude.categoryArr));
    };
};

/**
 *  | Try to find an element in a data structure which satisfies a predicate.
 */
var find = function (__dict_Foldable_26) {
    return function (p) {
        return function (f) {
            var _680 = foldMap(__dict_Foldable_26)(Data_Monoid.monoidArray)(function (x) {
                var _679 = p(x);
                if (_679) {
                    return [ x ];
                };
                if (!_679) {
                    return [  ];
                };
                throw new Error("Failed pattern match");
            })(f);
            if (_680.length >= 1) {
                var _682 = _680.slice(1);
                return new Data_Maybe.Just(_680[0]);
            };
            if (_680.length === 0) {
                return Data_Maybe.Nothing.value;
            };
            throw new Error("Failed pattern match");
        };
    };
};

/**
 *  | Test whether a predicate holds for any element in a data structure.
 */
var any = function (__dict_Foldable_27) {
    return function (p) {
        return Prelude["<<<"](Prelude.semigroupoidArr)(or(foldableArray))(foldMap(__dict_Foldable_27)(Data_Monoid.monoidArray)(function (x) {
            return [ p(x) ];
        }));
    };
};

/**
 *  | Test whether a value is an element of a data structure.
 */
var elem = function (__dict_Eq_28) {
    return function (__dict_Foldable_29) {
        return Prelude["<<<"](Prelude.semigroupoidArr)(any(__dict_Foldable_29))(Prelude["=="](__dict_Eq_28));
    };
};

/**
 *  | Test whether a value is not an element of a data structure.
 */
var notElem = function (__dict_Eq_30) {
    return function (__dict_Foldable_31) {
        return function (x) {
            return Prelude["<<<"](Prelude.semigroupoidArr)(Prelude.not(Prelude.boolLikeBoolean))(elem(__dict_Eq_30)(__dict_Foldable_31)(x));
        };
    };
};

/**
 *  | Test whether all `Boolean` values in a data structure are `true`.
 */
var and = function (__dict_Foldable_32) {
    return foldl(__dict_Foldable_32)(Prelude["&&"](Prelude.boolLikeBoolean))(true);
};

/**
 *  | Test whether a predicate holds for all elements in a data structure.
 */
var all = function (__dict_Foldable_33) {
    return function (p) {
        return Prelude["<<<"](Prelude.semigroupoidArr)(and(foldableArray))(foldMap(__dict_Foldable_33)(Data_Monoid.monoidArray)(function (x) {
            return [ p(x) ];
        }));
    };
};
module.exports = {
    Foldable: Foldable, 
    foldlArray: foldlArray, 
    foldrArray: foldrArray, 
    lookup: lookup, 
    find: find, 
    notElem: notElem, 
    elem: elem, 
    product: product, 
    sum: sum, 
    all: all, 
    any: any, 
    or: or, 
    and: and, 
    intercalate: intercalate, 
    mconcat: mconcat, 
    sequence_: sequence_, 
    for_: for_, 
    traverse_: traverse_, 
    fold: fold, 
    foldMap: foldMap, 
    foldl: foldl, 
    foldr: foldr, 
    foldableArray: foldableArray, 
    foldableEither: foldableEither, 
    foldableMaybe: foldableMaybe, 
    foldableTuple: foldableTuple, 
    foldableAdditive: foldableAdditive, 
    foldableDual: foldableDual, 
    foldableFirst: foldableFirst, 
    foldableLast: foldableLast, 
    foldableMultiplicative: foldableMultiplicative
};

},{"Control.Apply":3,"Data.Either":16,"Data.Maybe":20,"Data.Monoid":26,"Data.Monoid.Additive":21,"Data.Monoid.Dual":22,"Data.Monoid.First":23,"Data.Monoid.Last":24,"Data.Monoid.Multiplicative":25,"Data.Tuple":32,"Prelude":44}],18:[function(require,module,exports){
// Generated by psc-make version 0.6.9.3
"use strict";
var Prelude = require("Prelude");

    function mkFn0(fn) {
      return function() {
        return fn({});
      };
    }
    ;

    function mkFn1(fn) {
      return function(a) {
        return fn(a);
      };
    }
    ;

    function mkFn2(fn) {
      return function(a, b) {
        return fn(a)(b);
      };
    }
    ;

    function mkFn3(fn) {
      return function(a, b, c) {
        return fn(a)(b)(c);
      };
    }
    ;

    function mkFn4(fn) {
      return function(a, b, c, d) {
        return fn(a)(b)(c)(d);
      };
    }
    ;

    function mkFn5(fn) {
      return function(a, b, c, d, e) {
        return fn(a)(b)(c)(d)(e);
      };
    }
    ;

    function mkFn6(fn) {
      return function(a, b, c, d, e, f) {
        return fn(a)(b)(c)(d)(e)(f);
      };
    }
    ;

    function mkFn7(fn) {
      return function(a, b, c, d, e, f, g) {
        return fn(a)(b)(c)(d)(e)(f)(g);
      };
    }
    ;

    function mkFn8(fn) {
      return function(a, b, c, d, e, f, g, h) {
        return fn(a)(b)(c)(d)(e)(f)(g)(h);
      };
    }
    ;

    function mkFn9(fn) {
      return function(a, b, c, d, e, f, g, h, i) {
        return fn(a)(b)(c)(d)(e)(f)(g)(h)(i);
      };
    }
    ;

    function mkFn10(fn) {
      return function(a, b, c, d, e, f, g, h, i, j) {
        return fn(a)(b)(c)(d)(e)(f)(g)(h)(i)(j);
      };
    }
    ;

    function runFn0(fn) {
      return fn();
    }
    ;

    function runFn1(fn) {
      return function(a) {
        return fn(a);
      };
    }
    ;

    function runFn2(fn) {
      return function(a) {
        return function(b) {
          return fn(a, b);
        };
      };
    }
    ;

    function runFn3(fn) {
      return function(a) {
        return function(b) {
          return function(c) {
            return fn(a, b, c);
          };
        };
      };
    }
    ;

    function runFn4(fn) {
      return function(a) {
        return function(b) {
          return function(c) {
            return function(d) {
              return fn(a, b, c, d);
            };
          };
        };
      };
    }
    ;

    function runFn5(fn) {
      return function(a) {
        return function(b) {
          return function(c) {
            return function(d) {
              return function(e) {
                return fn(a, b, c, d, e);
              };
            };
          };
        };
      };
    }
    ;

    function runFn6(fn) {
      return function(a) {
        return function(b) {
          return function(c) {
            return function(d) {
              return function(e) {
                return function(f) {
                  return fn(a, b, c, d, e, f);
                };
              };
            };
          };
        };
      };
    }
    ;

    function runFn7(fn) {
      return function(a) {
        return function(b) {
          return function(c) {
            return function(d) {
              return function(e) {
                return function(f) {
                  return function(g) {
                    return fn(a, b, c, d, e, f, g);
                  };
                };
              };
            };
          };
        };
      };
    }
    ;

    function runFn8(fn) {
      return function(a) {
        return function(b) {
          return function(c) {
            return function(d) {
              return function(e) {
                return function(f) {
                  return function(g) {
                    return function(h) {
                      return fn(a, b, c, d, e, f, g, h);
                    };
                  };
                };
              };
            };
          };
        };
      };
    }
    ;

    function runFn9(fn) {
      return function(a) {
        return function(b) {
          return function(c) {
            return function(d) {
              return function(e) {
                return function(f) {
                  return function(g) {
                    return function(h) {
                      return function(i) {
                        return fn(a, b, c, d, e, f, g, h, i);
                      };
                    };
                  };
                };
              };
            };
          };
        };
      };
    }
    ;

    function runFn10(fn) {
      return function(a) {
        return function(b) {
          return function(c) {
            return function(d) {
              return function(e) {
                return function(f) {
                  return function(g) {
                    return function(h) {
                      return function(i) {
                        return function(j) {
                          return fn(a, b, c, d, e, f, g, h, i, j);
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        };
      };
    }
    ;

/**
 *  | The `on` function is used to change the domain of a binary operator.
 *  |
 *  | For example, we can create a function which compares two records based on the values of their `x` properties:
 *  |
 *  | ```purescript
 *  | compareX :: forall r. { x :: Number | r } -> { x :: Number | r } -> Ordering
 *  | compareX = compare `on` _.x
 *  | ```
 */
var on = function (f) {
    return function (g) {
        return function (x) {
            return function (y) {
                return f(g(x))(g(y));
            };
        };
    };
};
module.exports = {
    runFn10: runFn10, 
    runFn9: runFn9, 
    runFn8: runFn8, 
    runFn7: runFn7, 
    runFn6: runFn6, 
    runFn5: runFn5, 
    runFn4: runFn4, 
    runFn3: runFn3, 
    runFn2: runFn2, 
    runFn1: runFn1, 
    runFn0: runFn0, 
    mkFn10: mkFn10, 
    mkFn9: mkFn9, 
    mkFn8: mkFn8, 
    mkFn7: mkFn7, 
    mkFn6: mkFn6, 
    mkFn5: mkFn5, 
    mkFn4: mkFn4, 
    mkFn3: mkFn3, 
    mkFn2: mkFn2, 
    mkFn1: mkFn1, 
    mkFn0: mkFn0, 
    on: on
};

},{"Prelude":44}],19:[function(require,module,exports){
// Generated by psc-make version 0.6.9.3
"use strict";
var Prelude = require("Prelude");
var Control_Comonad = require("Control.Comonad");
var Control_Extend = require("Control.Extend");
var Data_Foldable = require("Data.Foldable");
var Data_Traversable = require("Data.Traversable");
var Identity = function (x) {
    return x;
};
var showConst = function (__dict_Show_2) {
    return new Prelude.Show(function (_221) {
        return "Identity (" + (Prelude.show(__dict_Show_2)(_221) + ")");
    });
};
var runIdentity = function (_216) {
    return _216;
};
var functorIdentity = new Prelude.Functor(function (f) {
    return function (_222) {
        return f(_222);
    };
});
var foldableIdentity = new Data_Foldable.Foldable(function (__dict_Monoid_4) {
    return function (f) {
        return function (_228) {
            return f(_228);
        };
    };
}, function (f) {
    return function (z) {
        return function (_227) {
            return f(z)(_227);
        };
    };
}, function (f) {
    return function (z) {
        return function (_226) {
            return f(_226)(z);
        };
    };
});
var traversableIdentity = new Data_Traversable.Traversable(function () {
    return foldableIdentity;
}, function () {
    return functorIdentity;
}, function (__dict_Applicative_1) {
    return function (_230) {
        return Prelude["<$>"]((__dict_Applicative_1["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Identity)(_230);
    };
}, function (__dict_Applicative_0) {
    return function (f) {
        return function (_229) {
            return Prelude["<$>"]((__dict_Applicative_0["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Identity)(f(_229));
        };
    };
});
var extendIdentity = new Control_Extend.Extend(function (f) {
    return function (m) {
        return f(m);
    };
}, function () {
    return functorIdentity;
});
var eqIdentity = function (__dict_Eq_5) {
    return new Prelude.Eq(function (x) {
        return function (y) {
            return !Prelude["=="](eqIdentity(__dict_Eq_5))(x)(y);
        };
    }, function (_217) {
        return function (_218) {
            return Prelude["=="](__dict_Eq_5)(_217)(_218);
        };
    });
};
var ordIdentity = function (__dict_Ord_3) {
    return new Prelude.Ord(function () {
        return eqIdentity(__dict_Ord_3["__superclass_Prelude.Eq_0"]());
    }, function (_219) {
        return function (_220) {
            return Prelude.compare(__dict_Ord_3)(_219)(_220);
        };
    });
};
var comonadIdentity = new Control_Comonad.Comonad(function () {
    return extendIdentity;
}, function (_225) {
    return _225;
});
var applyIdentity = new Prelude.Apply(function (_223) {
    return function (_224) {
        return _223(_224);
    };
}, function () {
    return functorIdentity;
});
var bindIdentity = new Prelude.Bind(function (m) {
    return function (f) {
        return f(runIdentity(m));
    };
}, function () {
    return applyIdentity;
});
var applicativeIdentity = new Prelude.Applicative(function () {
    return applyIdentity;
}, Identity);
var monadIdentity = new Prelude.Monad(function () {
    return applicativeIdentity;
}, function () {
    return bindIdentity;
});
module.exports = {
    Identity: Identity, 
    runIdentity: runIdentity, 
    eqIdentity: eqIdentity, 
    ordIdentity: ordIdentity, 
    showConst: showConst, 
    functorIdentity: functorIdentity, 
    applyIdentity: applyIdentity, 
    applicativeIdentity: applicativeIdentity, 
    bindIdentity: bindIdentity, 
    monadIdentity: monadIdentity, 
    extendIdentity: extendIdentity, 
    comonadIdentity: comonadIdentity, 
    foldableIdentity: foldableIdentity, 
    traversableIdentity: traversableIdentity
};

},{"Control.Comonad":4,"Control.Extend":5,"Data.Foldable":17,"Data.Traversable":31,"Prelude":44}],20:[function(require,module,exports){
// Generated by psc-make version 0.6.9.3
"use strict";
var Prelude = require("Prelude");
var Control_Alt = require("Control.Alt");
var Control_Alternative = require("Control.Alternative");
var Control_Extend = require("Control.Extend");
var Control_MonadPlus = require("Control.MonadPlus");
var Control_Plus = require("Control.Plus");

/**
 *  | The `Maybe` type is used to represent optional values and can be seen as
 *  | something like a type-safe `null`, where `Nothing` is `null` and `Just x`
 *  | is the non-null value `x`.
 */
var Nothing = (function () {
    function Nothing() {

    };
    Nothing.value = new Nothing();
    return Nothing;
})();

/**
 *  | The `Maybe` type is used to represent optional values and can be seen as
 *  | something like a type-safe `null`, where `Nothing` is `null` and `Just x`
 *  | is the non-null value `x`.
 */
var Just = (function () {
    function Just(value0) {
        this.value0 = value0;
    };
    Just.create = function (value0) {
        return new Just(value0);
    };
    return Just;
})();

/**
 *  | The `Show` instance allows `Maybe` values to be rendered as a string with
 *  | `show` whenever there is an `Show` instance for the type the `Maybe`
 *  | contains.
 */
var showMaybe = function (__dict_Show_0) {
    return new Prelude.Show(function (_27) {
        if (_27 instanceof Just) {
            return "Just (" + (Prelude.show(__dict_Show_0)(_27.value0) + ")");
        };
        if (_27 instanceof Nothing) {
            return "Nothing";
        };
        throw new Error("Failed pattern match");
    });
};

/**
 *  | The `Semigroup` instance enables use of the operator `<>` on `Maybe` values
 *  | whenever there is a `Semigroup` instance for the type the `Maybe` contains.
 *  | The exact behaviour of `<>` depends on the "inner" `Semigroup` instance,
 *  | but generally captures the notion of appending or combining things.
 *  |
 *  | ``` purescript
 *  | Just x <> Just y = Just (x <> y)
 *  | Just x <> Nothing = Just x
 *  | Nothing <> Just y = Just y
 *  | Nothing <> Nothing = Nothing
 *  | ```
 */
var semigroupMaybe = function (__dict_Semigroup_1) {
    return new Prelude.Semigroup(function (x) {
        return function (x_1) {
            if (x_1 instanceof Nothing) {
                return x_1;
            };
            if (x_1 instanceof Nothing) {
                return x_1;
            };
            if (x_1 instanceof Just && x_1 instanceof Just) {
                return new Just(Prelude["<>"](__dict_Semigroup_1)(x_1.value0)(x_1.value0));
            };
            throw new Error("Failed pattern match");
        };
    });
};

/**
 *  | Takes a default value, a function, and a `Maybe` value. If the `Maybe`
 *  | value is `Nothing` the default value is returned, otherwise the function
 *  | is applied to the value inside the `Just` and the result is returned.
 *  |
 *  | ``` purescript
 *  | maybe x f Nothing == x
 *  | maybe x f (Just y) == f y
 *  | ```
 */
var maybe = function (b) {
    return function (f) {
        return function (_23) {
            if (_23 instanceof Nothing) {
                return b;
            };
            if (_23 instanceof Just) {
                return f(_23.value0);
            };
            throw new Error("Failed pattern match");
        };
    };
};

/**
 *  | Returns `true` when the `Maybe` value is `Nothing`.
 */
var isNothing = maybe(true)(Prelude["const"](false));

/**
 *  | Returns `true` when the `Maybe` value was constructed with `Just`.
 */
var isJust = maybe(false)(Prelude["const"](true));

/**
 *  | The `Functor` instance allows functions to transform the contents of a
 *  | `Just` with the `<$>` operator:
 *  |
 *  | ``` purescript
 *  | f <$> Just x == Just (f x)
 *  | ```
 *  |
 *  | `Nothing` values are left untouched:
 *  |
 *  | ``` purescript
 *  | f <$> Nothing == Nothing
 *  | ```
 */
var functorMaybe = new Prelude.Functor(function (fn) {
    return function (_24) {
        if (_24 instanceof Just) {
            return new Just(fn(_24.value0));
        };
        return Nothing.value;
    };
});

/**
 *  | Takes a default value, and a `Maybe` value. If the `Maybe` value is
 *  | `Nothing` the default value is returned, otherwise the value inside the
 *  | `Just` is returned.
 *  |
 *  | ``` purescript
 *  | fromMaybe x Nothing == x
 *  | fromMaybe x (Just y) == y
 *  | ```
 */
var fromMaybe = function (a) {
    return maybe(a)(Prelude.id(Prelude.categoryArr));
};

/**
 *  | The `Extend` instance allows sequencing of `Maybe` values and functions
 *  | that accept a `Maybe a` and return a non-`Maybe` result using the
 *  | `<<=` operator.
 *  |
 *  | ``` purescript
 *  | f <<= Nothing = Nothing
 *  | f <<= Just x = Just (f x)
 *  | ```
 */
var extendMaybe = new Control_Extend.Extend(function (f) {
    return function (x) {
        if (x instanceof Nothing) {
            return Nothing.value;
        };
        return new Just(f(x));
    };
}, function () {
    return functorMaybe;
});

/**
 *  | The `Eq` instance allows `Maybe` values to be checked for equality with
 *  | `==` and inequality with `/=` whenever there is an `Eq` instance for the
 *  | type the `Maybe` contains.
 */
var eqMaybe = function (__dict_Eq_3) {
    return new Prelude.Eq(function (a) {
        return function (b) {
            return !Prelude["=="](eqMaybe(__dict_Eq_3))(a)(b);
        };
    }, function (_28) {
        return function (_29) {
            if (_28 instanceof Nothing && _29 instanceof Nothing) {
                return true;
            };
            if (_28 instanceof Just && _29 instanceof Just) {
                return Prelude["=="](__dict_Eq_3)(_28.value0)(_29.value0);
            };
            return false;
        };
    });
};

/**
 *  | The `Ord` instance allows `Maybe` values to be compared with
 *  | `compare`, `>`, `>=`, `<` and `<=` whenever there is an `Ord` instance for
 *  | the type the `Maybe` contains.
 *  |
 *  | `Nothing` is considered to be less than any `Just` value.
 */
var ordMaybe = function (__dict_Ord_2) {
    return new Prelude.Ord(function () {
        return eqMaybe(__dict_Ord_2["__superclass_Prelude.Eq_0"]());
    }, function (_30) {
        return function (_31) {
            if (_30 instanceof Just && _31 instanceof Just) {
                return Prelude.compare(__dict_Ord_2)(_30.value0)(_31.value0);
            };
            if (_30 instanceof Nothing && _31 instanceof Nothing) {
                return Prelude.EQ.value;
            };
            if (_30 instanceof Nothing) {
                return Prelude.LT.value;
            };
            if (_31 instanceof Nothing) {
                return Prelude.GT.value;
            };
            throw new Error("Failed pattern match");
        };
    });
};

/**
 *  | The `Apply` instance allows functions contained within a `Just` to
 *  | transform a value contained within a `Just` using the `(<*>)` operator:
 *  |
 *  | ``` purescript
 *  | Just f <*> Just x == Just (f x)
 *  | ```
 *  |
 *  | `Nothing` values are left untouched:
 *  |
 *  | ``` purescript
 *  | Just f <*> Nothing == Nothing
 *  | Nothing <*> Just x == Nothing
 *  | ```
 *  |
 *  | Combining `Functor`'s `<$>` with `Apply`'s `<*>` can be used transform a
 *  | pure function to take `Maybe`-typed arguments so `f :: a -> b -> c`
 *  | becomes `f :: Maybe a -> Maybe b -> Maybe c`:
 *  |
 *  | ``` purescript
 *  | f <$> Just x <*> Just y == Just (f x y)
 *  | ```
 *  |
 *  | The `Nothing`-preserving behaviour of both operators means the result of
 *  | an expression like the above but where any one of the values is `Nothing`
 *  | means the whole result becomes `Nothing` also:
 *  |
 *  | ``` purescript
 *  | f <$> Nothing <*> Just y == Nothing
 *  | f <$> Just x <*> Nothing == Nothing
 *  | f <$> Nothing <*> Nothing == Nothing
 *  | ```
 */
var applyMaybe = new Prelude.Apply(function (_25) {
    return function (x) {
        if (_25 instanceof Just) {
            return Prelude["<$>"](functorMaybe)(_25.value0)(x);
        };
        if (_25 instanceof Nothing) {
            return Nothing.value;
        };
        throw new Error("Failed pattern match");
    };
}, function () {
    return functorMaybe;
});

/**
 *  | The `Bind` instance allows sequencing of `Maybe` values and functions that
 *  | return a `Maybe` by using the `>>=` operator:
 *  |
 *  | ``` purescript
 *  | Just x >>= f = f x
 *  | Nothing >>= f = Nothing
 *  | ```
 */
var bindMaybe = new Prelude.Bind(function (_26) {
    return function (k) {
        if (_26 instanceof Just) {
            return k(_26.value0);
        };
        if (_26 instanceof Nothing) {
            return Nothing.value;
        };
        throw new Error("Failed pattern match");
    };
}, function () {
    return applyMaybe;
});

/**
 *  | The `Applicative` instance enables lifting of values into `Maybe` with the
 *  | `pure` or `return` function (`return` is an alias for `pure`):
 *  |
 *  | ``` purescript
 *  | pure x :: Maybe _ == Just x
 *  | return x :: Maybe _ == Just x
 *  | ```
 *  |
 *  | Combining `Functor`'s `<$>` with `Apply`'s `<*>` and `Applicative`'s
 *  | `pure` can be used to pass a mixture of `Maybe` and non-`Maybe` typed
 *  | values to a function that does not usually expect them, by using `pure`
 *  | for any value that is not already `Maybe` typed:
 *  |
 *  | ``` purescript
 *  | f <$> Just x <*> pure y == Just (f x y)
 *  | ```
 *  |
 *  | Even though `pure = Just` it is recommended to use `pure` in situations
 *  | like this as it allows the choice of `Applicative` to be changed later
 *  | without having to go through and replace `Just` with a new constructor.
 */
var applicativeMaybe = new Prelude.Applicative(function () {
    return applyMaybe;
}, Just.create);

/**
 *  | The `Monad` instance guarantees that there are both `Applicative` and
 *  | `Bind` instances for `Maybe`. This also enables the `do` syntactic sugar:
 *  |
 *  | ``` purescript
 *  | do
 *  |   x' <- x
 *  |   y' <- y
 *  |   pure (f x' y')
 *  | ```
 *  |
 *  | Which is equivalent to:
 *  |
 *  | ``` purescript
 *  | x >>= (\x' -> y >>= (\y' -> pure (f x' y')))
 *  | ```
 */
var monadMaybe = new Prelude.Monad(function () {
    return applicativeMaybe;
}, function () {
    return bindMaybe;
});

/**
 *  | The `Alt` instance allows for a choice to be made between two `Maybe`
 *  | values with the `<|>` operator, where the first `Just` encountered
 *  | is taken.
 *  |
 *  | ``` purescript
 *  | Just x <|> Just y == Just x
 *  | Nothing <|> Just y == Just y
 *  | Nothing <|> Nothing == Nothing
 *  | ```
 */
var altMaybe = new Control_Alt.Alt(function (l) {
    return function (r) {
        if (l instanceof Nothing) {
            return r;
        };
        return l;
    };
}, function () {
    return functorMaybe;
});

/**
 *  | The `Plus` instance provides a default `Maybe` value:
 *  |
 *  | ``` purescript
 *  | empty :: Maybe _ == Nothing
 *  | ```
 */
var plusMaybe = new Control_Plus.Plus(function () {
    return altMaybe;
}, Nothing.value);

/**
 *  | The `Alternative` instance guarantees that there are both `Applicative` and
 *  | `Plus` instances for `Maybe`.
 */
var alternativeMaybe = new Control_Alternative.Alternative(function () {
    return plusMaybe;
}, function () {
    return applicativeMaybe;
});

/**
 *  | The `MonadPlus` instance guarantees that there are both `Monad` and
 *  | `Alternative` instances for `Maybe`.
 */
var monadPlusMaybe = new Control_MonadPlus.MonadPlus(function () {
    return alternativeMaybe;
}, function () {
    return monadMaybe;
});
module.exports = {
    Nothing: Nothing, 
    Just: Just, 
    isNothing: isNothing, 
    isJust: isJust, 
    fromMaybe: fromMaybe, 
    maybe: maybe, 
    functorMaybe: functorMaybe, 
    applyMaybe: applyMaybe, 
    applicativeMaybe: applicativeMaybe, 
    altMaybe: altMaybe, 
    plusMaybe: plusMaybe, 
    alternativeMaybe: alternativeMaybe, 
    bindMaybe: bindMaybe, 
    monadMaybe: monadMaybe, 
    monadPlusMaybe: monadPlusMaybe, 
    extendMaybe: extendMaybe, 
    semigroupMaybe: semigroupMaybe, 
    showMaybe: showMaybe, 
    eqMaybe: eqMaybe, 
    ordMaybe: ordMaybe
};

},{"Control.Alt":1,"Control.Alternative":2,"Control.Extend":5,"Control.MonadPlus":8,"Control.Plus":9,"Prelude":44}],21:[function(require,module,exports){
// Generated by psc-make version 0.6.9.3
"use strict";
var Prelude = require("Prelude");
var Control_Comonad = require("Control.Comonad");
var Control_Extend = require("Control.Extend");
var Data_Monoid = require("Data.Monoid");

/**
 *  | Monoid and semigroup for semirings under addition.
 *  |
 *  | ``` purescript
 *  | Additive x <> Additive y == Additive (x + y)
 *  | mempty :: Additive _ == Additive zero
 *  | ```
 */
var Additive = function (x) {
    return x;
};
var showAdditive = function (__dict_Show_0) {
    return new Prelude.Show(function (_27) {
        return "Additive (" + (Prelude.show(__dict_Show_0)(_27) + ")");
    });
};
var semigroupAdditive = function (__dict_Semiring_1) {
    return new Prelude.Semigroup(function (_28) {
        return function (_29) {
            return Prelude["+"](__dict_Semiring_1)(_28)(_29);
        };
    });
};
var runAdditive = function (_16) {
    return _16;
};
var monoidAdditive = function (__dict_Semiring_3) {
    return new Data_Monoid.Monoid(function () {
        return semigroupAdditive(__dict_Semiring_3);
    }, Prelude.zero(__dict_Semiring_3));
};
var functorAdditive = new Prelude.Functor(function (f) {
    return function (_23) {
        return f(_23);
    };
});
var extendAdditive = new Control_Extend.Extend(function (f) {
    return function (x) {
        return f(x);
    };
}, function () {
    return functorAdditive;
});
var eqAdditive = function (__dict_Eq_4) {
    return new Prelude.Eq(function (_19) {
        return function (_20) {
            return Prelude["/="](__dict_Eq_4)(_19)(_20);
        };
    }, function (_17) {
        return function (_18) {
            return Prelude["=="](__dict_Eq_4)(_17)(_18);
        };
    });
};
var ordAdditive = function (__dict_Ord_2) {
    return new Prelude.Ord(function () {
        return eqAdditive(__dict_Ord_2["__superclass_Prelude.Eq_0"]());
    }, function (_21) {
        return function (_22) {
            return Prelude.compare(__dict_Ord_2)(_21)(_22);
        };
    });
};
var comonadAdditive = new Control_Comonad.Comonad(function () {
    return extendAdditive;
}, runAdditive);
var applyAdditive = new Prelude.Apply(function (_24) {
    return function (_25) {
        return _24(_25);
    };
}, function () {
    return functorAdditive;
});
var bindAdditive = new Prelude.Bind(function (_26) {
    return function (f) {
        return f(_26);
    };
}, function () {
    return applyAdditive;
});
var applicativeAdditive = new Prelude.Applicative(function () {
    return applyAdditive;
}, Additive);
var monadAdditive = new Prelude.Monad(function () {
    return applicativeAdditive;
}, function () {
    return bindAdditive;
});
module.exports = {
    Additive: Additive, 
    runAdditive: runAdditive, 
    eqAdditive: eqAdditive, 
    ordAdditive: ordAdditive, 
    functorAdditive: functorAdditive, 
    applyAdditive: applyAdditive, 
    applicativeAdditive: applicativeAdditive, 
    bindAdditive: bindAdditive, 
    monadAdditive: monadAdditive, 
    extendAdditive: extendAdditive, 
    comonadAdditive: comonadAdditive, 
    showAdditive: showAdditive, 
    semigroupAdditive: semigroupAdditive, 
    monoidAdditive: monoidAdditive
};

},{"Control.Comonad":4,"Control.Extend":5,"Data.Monoid":26,"Prelude":44}],22:[function(require,module,exports){
// Generated by psc-make version 0.6.9.3
"use strict";
var Prelude = require("Prelude");
var Data_Monoid = require("Data.Monoid");
var Control_Comonad = require("Control.Comonad");
var Control_Extend = require("Control.Extend");

/**
 *  | The dual of a monoid.
 *  |
 *  | ``` purescript
 *  | Dual x <> Dual y == Dual (y <> x)
 *  | mempty :: Dual _ == Dual mempty
 *  | ```
 */
var Dual = function (x) {
    return x;
};
var showDual = function (__dict_Show_0) {
    return new Prelude.Show(function (_61) {
        return "Dual (" + (Prelude.show(__dict_Show_0)(_61) + ")");
    });
};
var semigroupDual = function (__dict_Semigroup_1) {
    return new Prelude.Semigroup(function (_62) {
        return function (_63) {
            return Prelude["<>"](__dict_Semigroup_1)(_63)(_62);
        };
    });
};
var runDual = function (_50) {
    return _50;
};
var monoidDual = function (__dict_Monoid_3) {
    return new Data_Monoid.Monoid(function () {
        return semigroupDual(__dict_Monoid_3["__superclass_Prelude.Semigroup_0"]());
    }, Data_Monoid.mempty(__dict_Monoid_3));
};
var functorDual = new Prelude.Functor(function (f) {
    return function (_57) {
        return f(_57);
    };
});
var extendDual = new Control_Extend.Extend(function (f) {
    return function (x) {
        return f(x);
    };
}, function () {
    return functorDual;
});
var eqDual = function (__dict_Eq_4) {
    return new Prelude.Eq(function (_53) {
        return function (_54) {
            return Prelude["/="](__dict_Eq_4)(_53)(_54);
        };
    }, function (_51) {
        return function (_52) {
            return Prelude["=="](__dict_Eq_4)(_51)(_52);
        };
    });
};
var ordDual = function (__dict_Ord_2) {
    return new Prelude.Ord(function () {
        return eqDual(__dict_Ord_2["__superclass_Prelude.Eq_0"]());
    }, function (_55) {
        return function (_56) {
            return Prelude.compare(__dict_Ord_2)(_55)(_56);
        };
    });
};
var comonadDual = new Control_Comonad.Comonad(function () {
    return extendDual;
}, runDual);
var applyDual = new Prelude.Apply(function (_58) {
    return function (_59) {
        return _58(_59);
    };
}, function () {
    return functorDual;
});
var bindDual = new Prelude.Bind(function (_60) {
    return function (f) {
        return f(_60);
    };
}, function () {
    return applyDual;
});
var applicativeDual = new Prelude.Applicative(function () {
    return applyDual;
}, Dual);
var monadDual = new Prelude.Monad(function () {
    return applicativeDual;
}, function () {
    return bindDual;
});
module.exports = {
    Dual: Dual, 
    runDual: runDual, 
    eqDual: eqDual, 
    ordDual: ordDual, 
    functorDual: functorDual, 
    applyDual: applyDual, 
    applicativeDual: applicativeDual, 
    bindDual: bindDual, 
    monadDual: monadDual, 
    extendDual: extendDual, 
    comonadDual: comonadDual, 
    showDual: showDual, 
    semigroupDual: semigroupDual, 
    monoidDual: monoidDual
};

},{"Control.Comonad":4,"Control.Extend":5,"Data.Monoid":26,"Prelude":44}],23:[function(require,module,exports){
// Generated by psc-make version 0.6.9.3
"use strict";
var Prelude = require("Prelude");
var Control_Extend = require("Control.Extend");
var Control_Comonad = require("Control.Comonad");
var Data_Maybe = require("Data.Maybe");
var Data_Monoid = require("Data.Monoid");

/**
 *  | Monoid returning the first (left-most) non-Nothing value.
 *  |
 *  | ``` purescript
 *  | First (Just x) <> First (Just y) == First (Just x)
 *  | First Nothing <> First (Just y) == First (Just x)
 *  | First Nothing <> Nothing == First Nothing
 *  | mempty :: First _ == First Nothing
 *  | ```
 */
var First = function (x) {
    return x;
};
var showFirst = function (__dict_Show_0) {
    return new Prelude.Show(function (_127) {
        return "First (" + (Prelude.show(Data_Maybe.showMaybe(__dict_Show_0))(_127) + ")");
    });
};
var semigroupFirst = new Prelude.Semigroup(function (_128) {
    return function (second) {
        if (_128 instanceof Data_Maybe.Just) {
            return _128;
        };
        return second;
    };
});
var runFirst = function (_116) {
    return _116;
};
var monoidFirst = new Data_Monoid.Monoid(function () {
    return semigroupFirst;
}, Data_Maybe.Nothing.value);
var functorFirst = new Prelude.Functor(function (f) {
    return function (_123) {
        return Prelude["<$>"](Data_Maybe.functorMaybe)(f)(_123);
    };
});
var extendFirst = new Control_Extend.Extend(function (f) {
    return function (x) {
        return Control_Extend["<<="](extendFirst)(f)(x);
    };
}, function () {
    return functorFirst;
});
var eqFirst = function (__dict_Eq_2) {
    return new Prelude.Eq(function (_119) {
        return function (_120) {
            return Prelude["/="](Data_Maybe.eqMaybe(__dict_Eq_2))(_119)(_120);
        };
    }, function (_117) {
        return function (_118) {
            return Prelude["=="](Data_Maybe.eqMaybe(__dict_Eq_2))(_117)(_118);
        };
    });
};
var ordFirst = function (__dict_Ord_1) {
    return new Prelude.Ord(function () {
        return eqFirst(__dict_Ord_1["__superclass_Prelude.Eq_0"]());
    }, function (_121) {
        return function (_122) {
            return Prelude.compare(Data_Maybe.ordMaybe(__dict_Ord_1))(_121)(_122);
        };
    });
};
var applyFirst = new Prelude.Apply(function (_124) {
    return function (_125) {
        return Prelude["<*>"](Data_Maybe.applyMaybe)(_124)(_125);
    };
}, function () {
    return functorFirst;
});
var bindFirst = new Prelude.Bind(function (_126) {
    return function (f) {
        return Prelude[">>="](Data_Maybe.bindMaybe)(_126)(Prelude["<<<"](Prelude.semigroupoidArr)(runFirst)(f));
    };
}, function () {
    return applyFirst;
});
var applicativeFirst = new Prelude.Applicative(function () {
    return applyFirst;
}, Prelude["<<<"](Prelude.semigroupoidArr)(First)(Prelude.pure(Data_Maybe.applicativeMaybe)));
var monadFirst = new Prelude.Monad(function () {
    return applicativeFirst;
}, function () {
    return bindFirst;
});
module.exports = {
    First: First, 
    runFirst: runFirst, 
    eqFirst: eqFirst, 
    ordFirst: ordFirst, 
    functorFirst: functorFirst, 
    applyFirst: applyFirst, 
    applicativeFirst: applicativeFirst, 
    bindFirst: bindFirst, 
    monadFirst: monadFirst, 
    extendFirst: extendFirst, 
    showFirst: showFirst, 
    semigroupFirst: semigroupFirst, 
    monoidFirst: monoidFirst
};

},{"Control.Comonad":4,"Control.Extend":5,"Data.Maybe":20,"Data.Monoid":26,"Prelude":44}],24:[function(require,module,exports){
// Generated by psc-make version 0.6.9.3
"use strict";
var Prelude = require("Prelude");
var Control_Extend = require("Control.Extend");
var Control_Comonad = require("Control.Comonad");
var Data_Maybe = require("Data.Maybe");
var Data_Monoid = require("Data.Monoid");

/**
 *  | Monoid returning the last (right-most) non-Nothing value.
 *  |
 *  | ``` purescript
 *  | Last (Just x) <> Last (Just y) == Last (Just y)
 *  | Last (Just x) <> Nothing == Last (Just x)
 *  | Last Nothing <> Nothing == Last Nothing
 *  | mempty :: Last _ == Last Nothing
 *  | ```
 */
var Last = function (x) {
    return x;
};
var showLast = function (__dict_Show_0) {
    return new Prelude.Show(function (_140) {
        return "Last (" + (Prelude.show(Data_Maybe.showMaybe(__dict_Show_0))(_140) + ")");
    });
};
var semigroupLast = new Prelude.Semigroup(function (last) {
    return function (_141) {
        if (_141 instanceof Data_Maybe.Just) {
            return _141;
        };
        if (_141 instanceof Data_Maybe.Nothing) {
            return last;
        };
        throw new Error("Failed pattern match");
    };
});
var runLast = function (_129) {
    return _129;
};
var monoidLast = new Data_Monoid.Monoid(function () {
    return semigroupLast;
}, Data_Maybe.Nothing.value);
var functorLast = new Prelude.Functor(function (f) {
    return function (_136) {
        return Prelude["<$>"](Data_Maybe.functorMaybe)(f)(_136);
    };
});
var extendLast = new Control_Extend.Extend(function (f) {
    return function (x) {
        return Control_Extend["<<="](extendLast)(f)(x);
    };
}, function () {
    return functorLast;
});
var eqLast = function (__dict_Eq_2) {
    return new Prelude.Eq(function (_132) {
        return function (_133) {
            return Prelude["/="](Data_Maybe.eqMaybe(__dict_Eq_2))(_132)(_133);
        };
    }, function (_130) {
        return function (_131) {
            return Prelude["=="](Data_Maybe.eqMaybe(__dict_Eq_2))(_130)(_131);
        };
    });
};
var ordLast = function (__dict_Ord_1) {
    return new Prelude.Ord(function () {
        return eqLast(__dict_Ord_1["__superclass_Prelude.Eq_0"]());
    }, function (_134) {
        return function (_135) {
            return Prelude.compare(Data_Maybe.ordMaybe(__dict_Ord_1))(_134)(_135);
        };
    });
};
var applyLast = new Prelude.Apply(function (_137) {
    return function (_138) {
        return Prelude["<*>"](Data_Maybe.applyMaybe)(_137)(_138);
    };
}, function () {
    return functorLast;
});
var bindLast = new Prelude.Bind(function (_139) {
    return function (f) {
        return Prelude[">>="](Data_Maybe.bindMaybe)(_139)(Prelude["<<<"](Prelude.semigroupoidArr)(runLast)(f));
    };
}, function () {
    return applyLast;
});
var applicativeLast = new Prelude.Applicative(function () {
    return applyLast;
}, Prelude["<<<"](Prelude.semigroupoidArr)(Last)(Prelude.pure(Data_Maybe.applicativeMaybe)));
var monadLast = new Prelude.Monad(function () {
    return applicativeLast;
}, function () {
    return bindLast;
});
module.exports = {
    Last: Last, 
    runLast: runLast, 
    eqLast: eqLast, 
    ordLast: ordLast, 
    functorLast: functorLast, 
    applyLast: applyLast, 
    applicativeLast: applicativeLast, 
    bindLast: bindLast, 
    monadLast: monadLast, 
    extendLast: extendLast, 
    showLast: showLast, 
    semigroupLast: semigroupLast, 
    monoidLast: monoidLast
};

},{"Control.Comonad":4,"Control.Extend":5,"Data.Maybe":20,"Data.Monoid":26,"Prelude":44}],25:[function(require,module,exports){
// Generated by psc-make version 0.6.9.3
"use strict";
var Prelude = require("Prelude");
var Control_Comonad = require("Control.Comonad");
var Control_Extend = require("Control.Extend");
var Data_Monoid = require("Data.Monoid");

/**
 *  | Monoid and semigroup for semirings under multiplication.
 *  |
 *  | ``` purescript
 *  | Multiplicative x <> Multiplicative y == Multiplicative (x * y)
 *  | mempty :: Multiplicative _ == Multiplicative one
 *  | ```
 */
var Multiplicative = function (x) {
    return x;
};
var showMultiplicative = function (__dict_Show_0) {
    return new Prelude.Show(function (_78) {
        return "Multiplicative (" + (Prelude.show(__dict_Show_0)(_78) + ")");
    });
};
var semigroupMultiplicative = function (__dict_Semiring_1) {
    return new Prelude.Semigroup(function (_79) {
        return function (_80) {
            return Prelude["*"](__dict_Semiring_1)(_79)(_80);
        };
    });
};
var runMultiplicative = function (_67) {
    return _67;
};
var monoidMultiplicative = function (__dict_Semiring_3) {
    return new Data_Monoid.Monoid(function () {
        return semigroupMultiplicative(__dict_Semiring_3);
    }, Prelude.one(__dict_Semiring_3));
};
var functorMultiplicative = new Prelude.Functor(function (f) {
    return function (_74) {
        return f(_74);
    };
});
var extendAdditive = new Control_Extend.Extend(function (f) {
    return function (x) {
        return f(x);
    };
}, function () {
    return functorMultiplicative;
});
var eqMultiplicative = function (__dict_Eq_4) {
    return new Prelude.Eq(function (_70) {
        return function (_71) {
            return Prelude["/="](__dict_Eq_4)(_70)(_71);
        };
    }, function (_68) {
        return function (_69) {
            return Prelude["=="](__dict_Eq_4)(_68)(_69);
        };
    });
};
var ordMultiplicative = function (__dict_Ord_2) {
    return new Prelude.Ord(function () {
        return eqMultiplicative(__dict_Ord_2["__superclass_Prelude.Eq_0"]());
    }, function (_72) {
        return function (_73) {
            return Prelude.compare(__dict_Ord_2)(_72)(_73);
        };
    });
};
var comonadAdditive = new Control_Comonad.Comonad(function () {
    return extendAdditive;
}, runMultiplicative);
var applyMultiplicative = new Prelude.Apply(function (_75) {
    return function (_76) {
        return _75(_76);
    };
}, function () {
    return functorMultiplicative;
});
var bindMultiplicative = new Prelude.Bind(function (_77) {
    return function (f) {
        return f(_77);
    };
}, function () {
    return applyMultiplicative;
});
var applicativeMultiplicative = new Prelude.Applicative(function () {
    return applyMultiplicative;
}, Multiplicative);
var monadMultiplicative = new Prelude.Monad(function () {
    return applicativeMultiplicative;
}, function () {
    return bindMultiplicative;
});
module.exports = {
    Multiplicative: Multiplicative, 
    runMultiplicative: runMultiplicative, 
    eqMultiplicative: eqMultiplicative, 
    ordMultiplicative: ordMultiplicative, 
    functorMultiplicative: functorMultiplicative, 
    applyMultiplicative: applyMultiplicative, 
    applicativeMultiplicative: applicativeMultiplicative, 
    bindMultiplicative: bindMultiplicative, 
    monadMultiplicative: monadMultiplicative, 
    extendAdditive: extendAdditive, 
    comonadAdditive: comonadAdditive, 
    showMultiplicative: showMultiplicative, 
    semigroupMultiplicative: semigroupMultiplicative, 
    monoidMultiplicative: monoidMultiplicative
};

},{"Control.Comonad":4,"Control.Extend":5,"Data.Monoid":26,"Prelude":44}],26:[function(require,module,exports){
// Generated by psc-make version 0.6.9.3
"use strict";
var Prelude = require("Prelude");
var Data_Array = require("Data.Array");
var Data_Maybe = require("Data.Maybe");
var Monoid = function (__superclass_Prelude$dotSemigroup_0, mempty) {
    this["__superclass_Prelude.Semigroup_0"] = __superclass_Prelude$dotSemigroup_0;
    this.mempty = mempty;
};
var monoidUnit = new Monoid(function () {
    return Prelude.semigroupUnit;
}, Prelude.unit);
var monoidString = new Monoid(function () {
    return Prelude.semigroupString;
}, "");
var monoidMaybe = function (__dict_Semigroup_0) {
    return new Monoid(function () {
        return Data_Maybe.semigroupMaybe(__dict_Semigroup_0);
    }, Data_Maybe.Nothing.value);
};
var monoidArray = new Monoid(function () {
    return Data_Array.semigroupArray;
}, [  ]);
var mempty = function (dict) {
    return dict.mempty;
};
var monoidArr = function (__dict_Monoid_1) {
    return new Monoid(function () {
        return Prelude.semigroupArr(__dict_Monoid_1["__superclass_Prelude.Semigroup_0"]());
    }, Prelude["const"](mempty(__dict_Monoid_1)));
};
module.exports = {
    Monoid: Monoid, 
    mempty: mempty, 
    monoidString: monoidString, 
    monoidArray: monoidArray, 
    monoidUnit: monoidUnit, 
    monoidArr: monoidArr, 
    monoidMaybe: monoidMaybe
};

},{"Data.Array":11,"Data.Maybe":20,"Prelude":44}],27:[function(require,module,exports){
// Generated by psc-make version 0.6.9.3
"use strict";
var Prelude = require("Prelude");
var Data_Either = require("Data.Either");
var Data_Profunctor = require("Data.Profunctor");
var Choice = function (__superclass_Data$dotProfunctor$dotProfunctor_0, left, right) {
    this["__superclass_Data.Profunctor.Profunctor_0"] = __superclass_Data$dotProfunctor$dotProfunctor_0;
    this.left = left;
    this.right = right;
};
var right = function (dict) {
    return dict.right;
};
var left = function (dict) {
    return dict.left;
};
var choiceArr = new Choice(function () {
    return Data_Profunctor.profunctorArr;
}, function (a2b) {
    return function (_11) {
        if (_11 instanceof Data_Either.Left) {
            return Data_Either.Left.create(a2b(_11.value0));
        };
        if (_11 instanceof Data_Either.Right) {
            return new Data_Either.Right(_11.value0);
        };
        throw new Error("Failed pattern match");
    };
}, Prelude["<$>"](Data_Either.functorEither));
module.exports = {
    Choice: Choice, 
    right: right, 
    left: left, 
    choiceArr: choiceArr
};

},{"Data.Either":16,"Data.Profunctor":28,"Prelude":44}],28:[function(require,module,exports){
// Generated by psc-make version 0.6.9.3
"use strict";
var Prelude = require("Prelude");
var Profunctor = function (dimap) {
    this.dimap = dimap;
};
var profunctorArr = new Profunctor(function (a2b) {
    return function (c2d) {
        return function (b2c) {
            return Prelude[">>>"](Prelude.semigroupoidArr)(a2b)(Prelude[">>>"](Prelude.semigroupoidArr)(b2c)(c2d));
        };
    };
});
var dimap = function (dict) {
    return dict.dimap;
};
var lmap = function (__dict_Profunctor_0) {
    return function (a2b) {
        return dimap(__dict_Profunctor_0)(a2b)(Prelude.id(Prelude.categoryArr));
    };
};
var rmap = function (__dict_Profunctor_1) {
    return function (b2c) {
        return dimap(__dict_Profunctor_1)(Prelude.id(Prelude.categoryArr))(b2c);
    };
};
module.exports = {
    Profunctor: Profunctor, 
    rmap: rmap, 
    lmap: lmap, 
    dimap: dimap, 
    profunctorArr: profunctorArr
};

},{"Prelude":44}],29:[function(require,module,exports){
// Generated by psc-make version 0.6.9.3

/**
 *  | Unsafe string and character functions.
 */
"use strict";
var Prelude = require("Prelude");
var Data_Char = require("Data.Char");

    function charCodeAt(i) {
      return function(s) {
        if (s.length <= i) {
          throw new Error("Data.String.Unsafe.charCodeAt: Invalid index.");
        };
        return s.charCodeAt(i);
      };
    }
    ;

    function charAt(i) {
      return function(s) {
        if (s.length <= i) {
          throw new Error("Data.String.Unsafe.charAt: Invalid index.");
        };
        return s.charAt(i);
      };
    }
    ;

    function $$char(s) {
      if (s.length != 1) {
        throw new Error("Data.String.Unsafe.char: Expected string of length 1.");
      };
      return s.charAt(0);
    }
    ;
module.exports = {
    charCodeAt: charCodeAt, 
    charAt: charAt, 
    "char": $$char
};

},{"Data.Char":12,"Prelude":44}],30:[function(require,module,exports){
// Generated by psc-make version 0.6.9.3

/**
 *  | Wraps the functions of Javascript's `String` object.
 *  | A String represents a sequence of characters.
 *  | For details of the underlying implementation, see [String Reference at MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String).
 */
"use strict";
var Data_Function = require("Data.Function");
var Data_Char = require("Data.Char");
var Prelude = require("Prelude");
var Data_String_Unsafe = require("Data.String.Unsafe");
var Data_Maybe = require("Data.Maybe");

    function _charAt(i, s, Just, Nothing) {
      return i >= 0 && i < s.length ? Just(s.charAt(i)) : Nothing;
    }
    ;

    function _charCodeAt(i, s, Just, Nothing) {
      return i >= 0 && i < s.length ? Just(s.charCodeAt(i)) : Nothing;
    }
    ;

    function fromCharArray(a) {
      return a.join('');
    }
    ;

    function indexOf(x) {
      return function(s) {
        return s.indexOf(x);
      };
    }
    ;

    function indexOf$prime(x) {
      return function(startAt) {
        return function(s) {
          return s.indexOf(x, startAt);
        };
      };
    }
    ;

    function lastIndexOf(x) {
      return function(s) {
        return s.lastIndexOf(x);
      };
    }
    ;

    function lastIndexOf$prime(x) {
      return function(startAt) {
        return function(s) {
          return s.lastIndexOf(x, startAt);
        };
      };
    }
    ;

    function length(s) {
      return s.length;
    }
    ;

    function localeCompare(s1) {
      return function(s2) {
        return s1.localeCompare(s2);
      };
    }
    ;

    function replace(s1) {
      return function(s2) {
        return function(s3) {
          return s3.replace(s1, s2);
        };
      };
    }
    ;

    function take(n) {
      return function(s) {
        return s.substr(0, n);
      };
    }
    ;

    function drop(n) {
      return function(s) {
        return s.substr(n);
      };
    }
    ;

    function count(p){
      return function(s){
        var i;
        for(i = 0; i < s.length && p(s.charAt(i)); i++){};
        return i;
      };
    }
    ;

    function split(sep) {
      return function(s) {
        return s.split(sep);
      };
    }
    ;

    function toCharArray(s) {
      return s.split('');
    }
    ;

    function toLower(s) {
      return s.toLowerCase();
    }
    ;

    function toUpper(s) {
      return s.toUpperCase();
    }
    ;

    function trim(s) {
      return s.trim();
    }
    ;

    function joinWith(s) {
      return function(xs) {
        return xs.join(s);
      };
    }
    ;

/**
 *  | Returns the longest prefix (possibly empty) of characters that satisfy
 *  | the predicate:
 */
var takeWhile = function (p) {
    return function (s) {
        return take(count(p)(s))(s);
    };
};

/**
 *  | Returns `true` if the given string is empty.
 */
var $$null = function (s) {
    return length(s) === 0;
};

/**
 *  | Returns the first character and the rest of the string,
 *  | if the string is not empty.
 */
var uncons = function (s) {
    if ($$null(s)) {
        return Data_Maybe.Nothing.value;
    };
    return new Data_Maybe.Just({
        head: Data_String_Unsafe.charAt(0)(s), 
        tail: drop(1)(s)
    });
};

/**
 *  | Returns a string of length `1` containing the given character.
 */
var fromChar = Data_Char.charString;

/**
 *  | Returns a string of length `1` containing the given character.
 *  | Same as `fromChar`.
 */
var singleton = fromChar;

/**
 *  | Returns the suffix remaining after `takeWhile`.
 */
var dropWhile = function (p) {
    return function (s) {
        return drop(count(p)(s))(s);
    };
};

/**
 *  | Returns the numeric Unicode value of the character at the given index,
 *  | if the index is within bounds.
 */
var charCodeAt = function (n) {
    return function (s) {
        return _charCodeAt(n, s, Data_Maybe.Just.create, Data_Maybe.Nothing.value);
    };
};

/**
 *  | Returns the character at the given index, if the index is within bounds.
 */
var charAt = function (n) {
    return function (s) {
        return _charAt(n, s, Data_Maybe.Just.create, Data_Maybe.Nothing.value);
    };
};
module.exports = {
    joinWith: joinWith, 
    trim: trim, 
    toUpper: toUpper, 
    toLower: toLower, 
    toCharArray: toCharArray, 
    split: split, 
    dropWhile: dropWhile, 
    drop: drop, 
    takeWhile: takeWhile, 
    take: take, 
    count: count, 
    replace: replace, 
    localeCompare: localeCompare, 
    singleton: singleton, 
    length: length, 
    uncons: uncons, 
    "null": $$null, 
    "lastIndexOf'": lastIndexOf$prime, 
    lastIndexOf: lastIndexOf, 
    "indexOf'": indexOf$prime, 
    indexOf: indexOf, 
    fromChar: fromChar, 
    fromCharArray: fromCharArray, 
    charCodeAt: charCodeAt, 
    charAt: charAt
};

},{"Data.Char":12,"Data.Function":18,"Data.Maybe":20,"Data.String.Unsafe":29,"Prelude":44}],31:[function(require,module,exports){
// Generated by psc-make version 0.6.9.3
"use strict";
var Prelude = require("Prelude");
var Data_Array = require("Data.Array");
var Data_Tuple = require("Data.Tuple");
var Data_Either = require("Data.Either");
var Data_Foldable = require("Data.Foldable");
var Data_Maybe = require("Data.Maybe");
var Data_Monoid_Additive = require("Data.Monoid.Additive");
var Data_Monoid_Dual = require("Data.Monoid.Dual");
var Data_Monoid_First = require("Data.Monoid.First");
var Data_Monoid_Last = require("Data.Monoid.Last");
var Data_Monoid_Multiplicative = require("Data.Monoid.Multiplicative");
var StateR = function (x) {
    return x;
};
var StateL = function (x) {
    return x;
};

/**
 *  | `Traversable` represents data structures which can be _traversed_,
 *  | accumulating results and effects in some `Applicative` functor.
 *  |
 *  | - `traverse` runs an action for every element in a data structure,
 *  |   and accumulates the results.
 *  | - `sequence` runs the actions _contained_ in a data structure,
 *  |   and accumulates the results.
 *  |
 *  | The `traverse` and `sequence` functions should be compatible in the
 *  | following sense:
 *  |
 *  | - `traverse f xs = sequence (f <$> xs)`
 *  | - `sequence = traverse id` 
 *  | 
 *  | `Traversable` instances should also be compatible with the corresponding
 *  | `Foldable` instances, in the following sense:
 *  |
 *  | - `foldMap f = runConst <<< traverse (Const <<< f)`
 */
var Traversable = function (__superclass_Data$dotFoldable$dotFoldable_1, __superclass_Prelude$dotFunctor_0, sequence, traverse) {
    this["__superclass_Data.Foldable.Foldable_1"] = __superclass_Data$dotFoldable$dotFoldable_1;
    this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
    this.sequence = sequence;
    this.traverse = traverse;
};

/**
 *  | `Traversable` represents data structures which can be _traversed_,
 *  | accumulating results and effects in some `Applicative` functor.
 *  |
 *  | - `traverse` runs an action for every element in a data structure,
 *  |   and accumulates the results.
 *  | - `sequence` runs the actions _contained_ in a data structure,
 *  |   and accumulates the results.
 *  |
 *  | The `traverse` and `sequence` functions should be compatible in the
 *  | following sense:
 *  |
 *  | - `traverse f xs = sequence (f <$> xs)`
 *  | - `sequence = traverse id` 
 *  | 
 *  | `Traversable` instances should also be compatible with the corresponding
 *  | `Foldable` instances, in the following sense:
 *  |
 *  | - `foldMap f = runConst <<< traverse (Const <<< f)`
 */
var traverse = function (dict) {
    return dict.traverse;
};
var traversableTuple = new Traversable(function () {
    return Data_Foldable.foldableTuple;
}, function () {
    return Data_Tuple.functorTuple;
}, function (__dict_Applicative_1) {
    return function (_177) {
        return Prelude["<$>"]((__dict_Applicative_1["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Tuple.Tuple.create(_177.value0))(_177.value1);
    };
}, function (__dict_Applicative_0) {
    return function (f) {
        return function (_176) {
            return Prelude["<$>"]((__dict_Applicative_0["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Tuple.Tuple.create(_176.value0))(f(_176.value1));
        };
    };
});
var traversableMultiplicative = new Traversable(function () {
    return Data_Foldable.foldableMultiplicative;
}, function () {
    return Data_Monoid_Multiplicative.functorMultiplicative;
}, function (__dict_Applicative_3) {
    return function (_187) {
        return Prelude["<$>"]((__dict_Applicative_3["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Monoid_Multiplicative.Multiplicative)(_187);
    };
}, function (__dict_Applicative_2) {
    return function (f) {
        return function (_186) {
            return Prelude["<$>"]((__dict_Applicative_2["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Monoid_Multiplicative.Multiplicative)(f(_186));
        };
    };
});
var traversableMaybe = new Traversable(function () {
    return Data_Foldable.foldableMaybe;
}, function () {
    return Data_Maybe.functorMaybe;
}, function (__dict_Applicative_5) {
    return function (_175) {
        if (_175 instanceof Data_Maybe.Nothing) {
            return Prelude.pure(__dict_Applicative_5)(Data_Maybe.Nothing.value);
        };
        if (_175 instanceof Data_Maybe.Just) {
            return Prelude["<$>"]((__dict_Applicative_5["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Maybe.Just.create)(_175.value0);
        };
        throw new Error("Failed pattern match");
    };
}, function (__dict_Applicative_4) {
    return function (f) {
        return function (_174) {
            if (_174 instanceof Data_Maybe.Nothing) {
                return Prelude.pure(__dict_Applicative_4)(Data_Maybe.Nothing.value);
            };
            if (_174 instanceof Data_Maybe.Just) {
                return Prelude["<$>"]((__dict_Applicative_4["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Maybe.Just.create)(f(_174.value0));
            };
            throw new Error("Failed pattern match");
        };
    };
});
var traversableEither = new Traversable(function () {
    return Data_Foldable.foldableEither;
}, function () {
    return Data_Either.functorEither;
}, function (__dict_Applicative_7) {
    return function (_173) {
        if (_173 instanceof Data_Either.Left) {
            return Prelude.pure(__dict_Applicative_7)(new Data_Either.Left(_173.value0));
        };
        if (_173 instanceof Data_Either.Right) {
            return Prelude["<$>"]((__dict_Applicative_7["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Either.Right.create)(_173.value0);
        };
        throw new Error("Failed pattern match");
    };
}, function (__dict_Applicative_6) {
    return function (f) {
        return function (_172) {
            if (_172 instanceof Data_Either.Left) {
                return Prelude.pure(__dict_Applicative_6)(new Data_Either.Left(_172.value0));
            };
            if (_172 instanceof Data_Either.Right) {
                return Prelude["<$>"]((__dict_Applicative_6["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Either.Right.create)(f(_172.value0));
            };
            throw new Error("Failed pattern match");
        };
    };
});
var traversableDual = new Traversable(function () {
    return Data_Foldable.foldableDual;
}, function () {
    return Data_Monoid_Dual.functorDual;
}, function (__dict_Applicative_9) {
    return function (_181) {
        return Prelude["<$>"]((__dict_Applicative_9["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Monoid_Dual.Dual)(_181);
    };
}, function (__dict_Applicative_8) {
    return function (f) {
        return function (_180) {
            return Prelude["<$>"]((__dict_Applicative_8["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Monoid_Dual.Dual)(f(_180));
        };
    };
});
var traversableAdditive = new Traversable(function () {
    return Data_Foldable.foldableAdditive;
}, function () {
    return Data_Monoid_Additive.functorAdditive;
}, function (__dict_Applicative_11) {
    return function (_179) {
        return Prelude["<$>"]((__dict_Applicative_11["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Monoid_Additive.Additive)(_179);
    };
}, function (__dict_Applicative_10) {
    return function (f) {
        return function (_178) {
            return Prelude["<$>"]((__dict_Applicative_10["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Monoid_Additive.Additive)(f(_178));
        };
    };
});
var stateR = function (_169) {
    return _169;
};
var stateL = function (_168) {
    return _168;
};

/**
 *  | `Traversable` represents data structures which can be _traversed_,
 *  | accumulating results and effects in some `Applicative` functor.
 *  |
 *  | - `traverse` runs an action for every element in a data structure,
 *  |   and accumulates the results.
 *  | - `sequence` runs the actions _contained_ in a data structure,
 *  |   and accumulates the results.
 *  |
 *  | The `traverse` and `sequence` functions should be compatible in the
 *  | following sense:
 *  |
 *  | - `traverse f xs = sequence (f <$> xs)`
 *  | - `sequence = traverse id` 
 *  | 
 *  | `Traversable` instances should also be compatible with the corresponding
 *  | `Foldable` instances, in the following sense:
 *  |
 *  | - `foldMap f = runConst <<< traverse (Const <<< f)`
 */
var sequence = function (dict) {
    return dict.sequence;
};
var traversableArray = new Traversable(function () {
    return Data_Foldable.foldableArray;
}, function () {
    return Data_Array.functorArray;
}, function (__dict_Applicative_13) {
    return function (_171) {
        if (_171.length === 0) {
            return Prelude.pure(__dict_Applicative_13)([  ]);
        };
        if (_171.length >= 1) {
            var _715 = _171.slice(1);
            return Prelude["<*>"](__dict_Applicative_13["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((__dict_Applicative_13["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Prelude[":"])(_171[0]))(sequence(traversableArray)(__dict_Applicative_13)(_715));
        };
        throw new Error("Failed pattern match");
    };
}, function (__dict_Applicative_12) {
    return function (f) {
        return function (_170) {
            if (_170.length === 0) {
                return Prelude.pure(__dict_Applicative_12)([  ]);
            };
            if (_170.length >= 1) {
                var _719 = _170.slice(1);
                return Prelude["<*>"](__dict_Applicative_12["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((__dict_Applicative_12["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Prelude[":"])(f(_170[0])))(traverse(traversableArray)(__dict_Applicative_12)(f)(_719));
            };
            throw new Error("Failed pattern match");
        };
    };
});
var traversableFirst = new Traversable(function () {
    return Data_Foldable.foldableFirst;
}, function () {
    return Data_Monoid_First.functorFirst;
}, function (__dict_Applicative_15) {
    return function (_183) {
        return Prelude["<$>"]((__dict_Applicative_15["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Monoid_First.First)(sequence(traversableMaybe)(__dict_Applicative_15)(_183));
    };
}, function (__dict_Applicative_14) {
    return function (f) {
        return function (_182) {
            return Prelude["<$>"]((__dict_Applicative_14["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Monoid_First.First)(traverse(traversableMaybe)(__dict_Applicative_14)(f)(_182));
        };
    };
});
var traversableLast = new Traversable(function () {
    return Data_Foldable.foldableLast;
}, function () {
    return Data_Monoid_Last.functorLast;
}, function (__dict_Applicative_17) {
    return function (_185) {
        return Prelude["<$>"]((__dict_Applicative_17["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Monoid_Last.Last)(sequence(traversableMaybe)(__dict_Applicative_17)(_185));
    };
}, function (__dict_Applicative_16) {
    return function (f) {
        return function (_184) {
            return Prelude["<$>"]((__dict_Applicative_16["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Monoid_Last.Last)(traverse(traversableMaybe)(__dict_Applicative_16)(f)(_184));
        };
    };
});

/**
 *  | A generalization of `zipWith` which accumulates results in some `Applicative`
 *  | functor.
 */
var zipWithA = function (__dict_Applicative_18) {
    return function (f) {
        return function (xs) {
            return function (ys) {
                return sequence(traversableArray)(__dict_Applicative_18)(Data_Array.zipWith(f)(xs)(ys));
            };
        };
    };
};
var functorStateR = new Prelude.Functor(function (f) {
    return function (k) {
        return StateR(function (s) {
            var _726 = stateR(k)(s);
            return new Data_Tuple.Tuple(_726.value0, f(_726.value1));
        });
    };
});
var functorStateL = new Prelude.Functor(function (f) {
    return function (k) {
        return StateL(function (s) {
            var _729 = stateL(k)(s);
            return new Data_Tuple.Tuple(_729.value0, f(_729.value1));
        });
    };
});

/**
 *  | A version of `traverse` with its arguments flipped.
 *  |
 *  | 
 *  | This can be useful when running an action written using do notation
 *  | for every element in a data structure:
 *  |
 *  | For example:
 *  |
 *  | ```purescript
 *  | for [1, 2, 3] \n -> do
 *  |   print n
 *  |   return (n * n)
 *  | ```
 */
var $$for = function (__dict_Applicative_23) {
    return function (__dict_Traversable_24) {
        return function (x) {
            return function (f) {
                return traverse(__dict_Traversable_24)(__dict_Applicative_23)(f)(x);
            };
        };
    };
};
var applyStateR = new Prelude.Apply(function (f) {
    return function (x) {
        return StateR(function (s) {
            var _732 = stateR(x)(s);
            var _733 = stateR(f)(_732.value0);
            return new Data_Tuple.Tuple(_733.value0, _733.value1(_732.value1));
        });
    };
}, function () {
    return functorStateR;
});
var applyStateL = new Prelude.Apply(function (f) {
    return function (x) {
        return StateL(function (s) {
            var _738 = stateL(f)(s);
            var _739 = stateL(x)(_738.value0);
            return new Data_Tuple.Tuple(_739.value0, _738.value1(_739.value1));
        });
    };
}, function () {
    return functorStateL;
});
var applicativeStateR = new Prelude.Applicative(function () {
    return applyStateR;
}, function (a) {
    return StateR(function (s) {
        return new Data_Tuple.Tuple(s, a);
    });
});

/**
 *  | Fold a data structure from the right, keeping all intermediate results
 *  | instead of only the final result.
 *  |
 *  | Unlike `scanr`, `mapAccumR` allows the type of accumulator to differ
 *  | from the element type of the final data structure.
 */
var mapAccumR = function (__dict_Traversable_19) {
    return function (f) {
        return function (s0) {
            return function (xs) {
                return stateR(traverse(__dict_Traversable_19)(applicativeStateR)(function (a) {
                    return StateR(function (s) {
                        return f(s)(a);
                    });
                })(xs))(s0);
            };
        };
    };
};

/**
 *  | Fold a data structure from the right, keeping all intermediate results
 *  | instead of only the final result.
 */
var scanr = function (__dict_Traversable_20) {
    return function (f) {
        return function (b0) {
            return function (xs) {
                return Data_Tuple.snd(mapAccumR(__dict_Traversable_20)(function (b) {
                    return function (a) {
                        var b$prime = f(a)(b);
                        return new Data_Tuple.Tuple(b$prime, b$prime);
                    };
                })(b0)(xs));
            };
        };
    };
};
var applicativeStateL = new Prelude.Applicative(function () {
    return applyStateL;
}, function (a) {
    return StateL(function (s) {
        return new Data_Tuple.Tuple(s, a);
    });
});

/**
 *  | Fold a data structure from the left, keeping all intermediate results
 *  | instead of only the final result.
 *  |
 *  | Unlike `scanl`, `mapAccumL` allows the type of accumulator to differ
 *  | from the element type of the final data structure.
 */
var mapAccumL = function (__dict_Traversable_21) {
    return function (f) {
        return function (s0) {
            return function (xs) {
                return stateL(traverse(__dict_Traversable_21)(applicativeStateL)(function (a) {
                    return StateL(function (s) {
                        return f(s)(a);
                    });
                })(xs))(s0);
            };
        };
    };
};

/**
 *  | Fold a data structure from the left, keeping all intermediate results
 *  | instead of only the final result.
 */
var scanl = function (__dict_Traversable_22) {
    return function (f) {
        return function (b0) {
            return function (xs) {
                return Data_Tuple.snd(mapAccumL(__dict_Traversable_22)(function (b) {
                    return function (a) {
                        var b$prime = f(b)(a);
                        return new Data_Tuple.Tuple(b$prime, b$prime);
                    };
                })(b0)(xs));
            };
        };
    };
};
module.exports = {
    Traversable: Traversable, 
    mapAccumR: mapAccumR, 
    mapAccumL: mapAccumL, 
    scanr: scanr, 
    scanl: scanl, 
    zipWithA: zipWithA, 
    "for": $$for, 
    sequence: sequence, 
    traverse: traverse, 
    traversableArray: traversableArray, 
    traversableEither: traversableEither, 
    traversableMaybe: traversableMaybe, 
    traversableTuple: traversableTuple, 
    traversableAdditive: traversableAdditive, 
    traversableDual: traversableDual, 
    traversableFirst: traversableFirst, 
    traversableLast: traversableLast, 
    traversableMultiplicative: traversableMultiplicative
};

},{"Data.Array":11,"Data.Either":16,"Data.Foldable":17,"Data.Maybe":20,"Data.Monoid.Additive":21,"Data.Monoid.Dual":22,"Data.Monoid.First":23,"Data.Monoid.Last":24,"Data.Monoid.Multiplicative":25,"Data.Tuple":32,"Prelude":44}],32:[function(require,module,exports){
// Generated by psc-make version 0.6.9.3

/**
 *  | A data type and functions for working with ordered pairs and sequences of values.
 */
"use strict";
var Prelude = require("Prelude");
var Data_Monoid = require("Data.Monoid");
var Control_Lazy = require("Control.Lazy");
var Data_Array = require("Data.Array");
var Control_Comonad = require("Control.Comonad");
var Control_Extend = require("Control.Extend");

/**
 *  | A simple product type for wrapping a pair of component values.
 */
var Tuple = (function () {
    function Tuple(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Tuple.create = function (value0) {
        return function (value1) {
            return new Tuple(value0, value1);
        };
    };
    return Tuple;
})();

/**
 *  | Rakes two lists and returns a list of corresponding pairs.
 *  | If one input list is short, excess elements of the longer list are discarded.
 */
var zip = Data_Array.zipWith(Tuple.create);

/**
 *  | Transforms a list of pairs into a list of first components and a list of
 *  | second components.
 */
var unzip = function (_90) {
    if (_90.length >= 1) {
        var _386 = _90.slice(1);
        var _380 = unzip(_386);
        return new Tuple(Prelude[":"]((_90[0]).value0)(_380.value0), Prelude[":"]((_90[0]).value1)(_380.value1));
    };
    if (_90.length === 0) {
        return new Tuple([  ], [  ]);
    };
    throw new Error("Failed pattern match");
};

/**
 *  | Turn a function of two arguments into a function that expects a tuple.
 */
var uncurry = function (f) {
    return function (_89) {
        return f(_89.value0)(_89.value1);
    };
};

/**
 *  | Exchange the first and second components of a tuple.
 */
var swap = function (_91) {
    return new Tuple(_91.value1, _91.value0);
};

/**
 *  | Returns the second component of a tuple.
 */
var snd = function (_88) {
    return _88.value1;
};

/**
 *  | Allows `Tuple`s to be rendered as a string with `show` whenever there are
 *  | `Show` instances for both component types.
 */
var showTuple = function (__dict_Show_0) {
    return function (__dict_Show_1) {
        return new Prelude.Show(function (_92) {
            return "Tuple (" + (Prelude.show(__dict_Show_0)(_92.value0) + (") (" + (Prelude.show(__dict_Show_1)(_92.value1) + ")")));
        });
    };
};
var semigroupoidTuple = new Prelude.Semigroupoid(function (_97) {
    return function (_98) {
        return new Tuple(_98.value0, _97.value1);
    };
});

/**
 *  | The `Semigroup` instance enables use of the associative operator `<>` on
 *  | `Tuple`s whenever there are `Semigroup` instances for the component
 *  | types. The `<>` operator is applied pairwise, so:
 *  | ```purescript
 *  | (Tuple a1 b1) <> (Tuple a2 b2) = Tuple (a1 <> a2) (b1 <> b2)
 *  | ```
 */
var semigroupTuple = function (__dict_Semigroup_2) {
    return function (__dict_Semigroup_3) {
        return new Prelude.Semigroup(function (_99) {
            return function (_100) {
                return new Tuple(Prelude["<>"](__dict_Semigroup_2)(_99.value0)(_100.value0), Prelude["<>"](__dict_Semigroup_3)(_99.value1)(_100.value1));
            };
        });
    };
};
var monoidTuple = function (__dict_Monoid_6) {
    return function (__dict_Monoid_7) {
        return new Data_Monoid.Monoid(function () {
            return semigroupTuple(__dict_Monoid_6["__superclass_Prelude.Semigroup_0"]())(__dict_Monoid_7["__superclass_Prelude.Semigroup_0"]());
        }, new Tuple(Data_Monoid.mempty(__dict_Monoid_6), Data_Monoid.mempty(__dict_Monoid_7)));
    };
};

/**
 *  | The `Functor` instance allows functions to transform the contents of a
 *  | `Tuple` with the `<$>` operator, applying the function to the second
 *  | component, so:
 *  | ```purescript
 *  | f <$> (Tuple x y) = Tuple x (f y)
 *  | ````
 */
var functorTuple = new Prelude.Functor(function (f) {
    return function (_101) {
        return new Tuple(_101.value0, f(_101.value1));
    };
});

/**
 *  | Returns the first component of a tuple.
 */
var fst = function (_87) {
    return _87.value0;
};
var lazyLazy1Tuple = function (__dict_Lazy1_9) {
    return function (__dict_Lazy1_10) {
        return new Control_Lazy.Lazy(function (f) {
            return new Tuple(Control_Lazy.defer1(__dict_Lazy1_9)(function (_83) {
                return fst(f(Prelude.unit));
            }), Control_Lazy.defer1(__dict_Lazy1_10)(function (_84) {
                return snd(f(Prelude.unit));
            }));
        });
    };
};
var lazyLazy2Tuple = function (__dict_Lazy2_11) {
    return function (__dict_Lazy2_12) {
        return new Control_Lazy.Lazy(function (f) {
            return new Tuple(Control_Lazy.defer2(__dict_Lazy2_11)(function (_85) {
                return fst(f(Prelude.unit));
            }), Control_Lazy.defer2(__dict_Lazy2_12)(function (_86) {
                return snd(f(Prelude.unit));
            }));
        });
    };
};
var lazyTuple = function (__dict_Lazy_13) {
    return function (__dict_Lazy_14) {
        return new Control_Lazy.Lazy(function (f) {
            return new Tuple(Control_Lazy.defer(__dict_Lazy_13)(function (_81) {
                return fst(f(Prelude.unit));
            }), Control_Lazy.defer(__dict_Lazy_14)(function (_82) {
                return snd(f(Prelude.unit));
            }));
        });
    };
};
var extendTuple = new Control_Extend.Extend(function (f) {
    return function (_105) {
        return new Tuple(_105.value0, f(_105));
    };
}, function () {
    return functorTuple;
});

/**
 *  | Allows `Tuple`s to be checked for equality with `==` and `/=` whenever
 *  | there are `Eq` instances for both component types.
 */
var eqTuple = function (__dict_Eq_15) {
    return function (__dict_Eq_16) {
        return new Prelude.Eq(function (t1) {
            return function (t2) {
                return !Prelude["=="](eqTuple(__dict_Eq_15)(__dict_Eq_16))(t1)(t2);
            };
        }, function (_93) {
            return function (_94) {
                return Prelude["=="](__dict_Eq_15)(_93.value0)(_94.value0) && Prelude["=="](__dict_Eq_16)(_93.value1)(_94.value1);
            };
        });
    };
};

/**
 *  | Allows `Tuple`s to be compared with `compare`, `>`, `>=`, `<` and `<=`
 *  | whenever there are `Ord` instances for both component types. To obtain
 *  | the result, the `fst`s are `compare`d, and if they are `EQ`ual, the
 *  | `snd`s are `compare`d.
 */
var ordTuple = function (__dict_Ord_4) {
    return function (__dict_Ord_5) {
        return new Prelude.Ord(function () {
            return eqTuple(__dict_Ord_4["__superclass_Prelude.Eq_0"]())(__dict_Ord_5["__superclass_Prelude.Eq_0"]());
        }, function (_95) {
            return function (_96) {
                var _437 = Prelude.compare(__dict_Ord_4)(_95.value0)(_96.value0);
                if (_437 instanceof Prelude.EQ) {
                    return Prelude.compare(__dict_Ord_5)(_95.value1)(_96.value1);
                };
                return _437;
            };
        });
    };
};

/**
 *  | Turn a function that expects a tuple into a function of two arguments.
 */
var curry = function (f) {
    return function (a) {
        return function (b) {
            return f(new Tuple(a, b));
        };
    };
};
var comonadTuple = new Control_Comonad.Comonad(function () {
    return extendTuple;
}, snd);

/**
 *  | The `Functor` instance allows functions to transform the contents of a
 *  | `Tuple` with the `<*>` operator whenever there is a `Semigroup` instance
 *  | for the `fst` component, so:
 *  | ```purescript
 *  | (Tuple a1 f) <*> (Tuple a2 x) == Tuple (a1 <> a2) (f x)
 *  | ```
 */
var applyTuple = function (__dict_Semigroup_18) {
    return new Prelude.Apply(function (_102) {
        return function (_103) {
            return new Tuple(Prelude["<>"](__dict_Semigroup_18)(_102.value0)(_103.value0), _102.value1(_103.value1));
        };
    }, function () {
        return functorTuple;
    });
};
var bindTuple = function (__dict_Semigroup_17) {
    return new Prelude.Bind(function (_104) {
        return function (f) {
            var _450 = f(_104.value1);
            return new Tuple(Prelude["<>"](__dict_Semigroup_17)(_104.value0)(_450.value0), _450.value1);
        };
    }, function () {
        return applyTuple(__dict_Semigroup_17);
    });
};
var applicativeTuple = function (__dict_Monoid_19) {
    return new Prelude.Applicative(function () {
        return applyTuple(__dict_Monoid_19["__superclass_Prelude.Semigroup_0"]());
    }, Tuple.create(Data_Monoid.mempty(__dict_Monoid_19)));
};
var monadTuple = function (__dict_Monoid_8) {
    return new Prelude.Monad(function () {
        return applicativeTuple(__dict_Monoid_8);
    }, function () {
        return bindTuple(__dict_Monoid_8["__superclass_Prelude.Semigroup_0"]());
    });
};
module.exports = {
    Tuple: Tuple, 
    swap: swap, 
    unzip: unzip, 
    zip: zip, 
    uncurry: uncurry, 
    curry: curry, 
    snd: snd, 
    fst: fst, 
    showTuple: showTuple, 
    eqTuple: eqTuple, 
    ordTuple: ordTuple, 
    semigroupoidTuple: semigroupoidTuple, 
    semigroupTuple: semigroupTuple, 
    monoidTuple: monoidTuple, 
    functorTuple: functorTuple, 
    applyTuple: applyTuple, 
    applicativeTuple: applicativeTuple, 
    bindTuple: bindTuple, 
    monadTuple: monadTuple, 
    extendTuple: extendTuple, 
    comonadTuple: comonadTuple, 
    lazyTuple: lazyTuple, 
    lazyLazy1Tuple: lazyLazy1Tuple, 
    lazyLazy2Tuple: lazyLazy2Tuple
};

},{"Control.Comonad":4,"Control.Extend":5,"Control.Lazy":6,"Data.Array":11,"Data.Monoid":26,"Prelude":44}],33:[function(require,module,exports){
// Generated by psc-make version 0.6.9.3
"use strict";
var Prelude = require("Prelude");
var Control_Monad_Eff = require("Control.Monad.Eff");

    function trace(s) {
      return function() {
        console.log(s);
        return {};
      };
    }
    ;

/**
 *  | Write a value to the console, using its `Show` instance to produce a `String`.
 */
var print = function (__dict_Show_0) {
    return function (o) {
        return trace(Prelude.show(__dict_Show_0)(o));
    };
};
module.exports = {
    print: print, 
    trace: trace
};

},{"Control.Monad.Eff":7,"Prelude":44}],34:[function(require,module,exports){
// Generated by psc-make version 0.6.9.3
"use strict";
var Prelude = require("Prelude");
var Thermite_Html_Elements = require("Thermite.Html.Elements");
var Thermite_Html_Attributes = require("Thermite.Html.Attributes");
var Data_Array = require("Data.Array");
var Thermite_Events = require("Thermite.Events");
var Thermite_Html = require("Thermite.Html");
var Data_String = require("Data.String");
var Optic_Core = require("Optic.Core");
var Thermite_Action = require("Thermite.Action");
var Thermite = require("Thermite");
var Thermite_Types = require("Thermite.Types");
var Debug_Trace = require("Debug.Trace");
var Data_Identity = require("Data.Identity");

/**
 * ---------- State and some Lenses --------------------
 */
var State = (function () {
    function State(value0) {
        this.value0 = value0;
    };
    State.create = function (value0) {
        return new State(value0);
    };
    return State;
})();
var Guess = (function () {
    function Guess(value0) {
        this.value0 = value0;
    };
    Guess.create = function (value0) {
        return new Guess(value0);
    };
    return Guess;
})();
var render = function (ctx) {
    return function (_2) {
        return function (_3) {
            var letters = Data_Array.map(Data_String.fromChar)(Data_String.toCharArray("ABCDEFGHIJKLMNOPQRSTUVWXYZ"));
            var isGuessed = function (l) {
                return function (g_1) {
                    return Data_String.indexOf(l)(g_1) !== -1;
                };
            };
            var letterClass = function (l) {
                return function (g_1) {
                    var _9 = isGuessed(l)(g_1);
                    if (_9) {
                        return "btn guessed";
                    };
                    if (!_9) {
                        return "btn";
                    };
                    throw new Error("Failed pattern match");
                };
            };
            var letterButton = function (l) {
                return Thermite_Html_Elements.button([ Thermite_Html_Attributes.className(letterClass(l)(_2.value0.guesses)), Thermite_Events.onClick(ctx)(function (_0) {
                    return new Guess(l);
                }), Thermite_Html_Attributes.disabled(isGuessed(l)(_2.value0.guesses)) ])([ Thermite_Html.text(l) ]);
            };
            var letterButtons = Thermite_Html_Elements.div([ Thermite_Html_Attributes.className("btn-grp") ])(Data_Array.map(letterButton)(letters));
            return Thermite_Html_Elements.div([ Thermite_Html_Attributes.className("hangman") ])([ letterButtons ]);
        };
    };
};

/**
 * ------------------------------------------------------
 */
var initialState = new State({
    guesses: ""
});
var guesses = function (__dict_Functor_0) {
    return function (f) {
        return function (st) {
            return Prelude["<#>"](__dict_Functor_0)(f(st.guesses))(function (i) {
                var _13 = {};
                for (var _14 in st) {
                    if (st.hasOwnProperty(_14)) {
                        _13[_14] = st[_14];
                    };
                };
                _13.guesses = i;
                return _13;
            });
        };
    };
};
var _State = function (__dict_Functor_1) {
    return function (f) {
        return function (_1) {
            return Prelude["<$>"](__dict_Functor_1)(State.create)(f(_1.value0));
        };
    };
};
var performAction = function (_4) {
    return function (action) {
        var updateState = function (_5) {
            return Optic_Core["++~"](Prelude.semigroupString)(Optic_Core[".."](Prelude.semigroupoidArr)(_State(Data_Identity.functorIdentity))(guesses(Data_Identity.functorIdentity)))(_5.value0);
        };
        return Thermite_Action.modifyState(updateState(action));
    };
};
var spec = Thermite.simpleSpec(initialState)(performAction)(render);
var main = (function () {
    var component = Thermite.createClass(spec);
    return Thermite.render(component)({});
})();
module.exports = {
    State: State, 
    Guess: Guess, 
    main: main, 
    spec: spec, 
    performAction: performAction, 
    render: render, 
    initialState: initialState, 
    guesses: guesses, 
    _State: _State
};

},{"Data.Array":11,"Data.Identity":19,"Data.String":30,"Debug.Trace":33,"Optic.Core":35,"Prelude":44,"Thermite":52,"Thermite.Action":45,"Thermite.Events":46,"Thermite.Html":49,"Thermite.Html.Attributes":47,"Thermite.Html.Elements":48,"Thermite.Types":51}],35:[function(require,module,exports){
// Generated by psc-make version 0.6.9.3
"use strict";
var Prelude = require("Prelude");
var Optic_Getter = require("Optic.Getter");
var Optic_Lens = require("Optic.Lens");
var Optic_Prism = require("Optic.Prism");
var Optic_Setter = require("Optic.Setter");
var Optic_Types = require("Optic.Types");
var $bar$bar$tilde = Optic_Setter["||~"];
var $up$dot = Optic_Getter["^."];
var $qmark$tilde = Optic_Setter["?~"];
var $qmark$qmark = Optic_Lens["??"];
var $less$greater$tilde = Optic_Setter["<>~"];
var $div$div$tilde = Optic_Setter["//~"];
var $dot$tilde = Optic_Setter[".~"];
var $dot$dot = Prelude["<<<"];
var $minus$tilde = Optic_Setter["-~"];
var $plus$tilde = Optic_Setter["+~"];
var $plus$plus$tilde = Optic_Setter["++~"];
var $times$tilde = Optic_Setter["*~"];
var $amp$amp$tilde = Optic_Setter["&&~"];
var $percent$tilde = Optic_Setter["%~"];
var withPrism = Optic_Prism.withPrism;
var view = Optic_Getter.view;
var to = Optic_Getter.to;
var sets = Optic_Setter.sets;
var set$prime = Optic_Setter["set'"];
var set = Optic_Setter.set;
var prism$prime = Optic_Prism["prism'"];
var prism = Optic_Prism.prism;
var over = Optic_Setter.over;
var only = Optic_Prism.only;
var nearly = Optic_Prism.nearly;
var matching = Optic_Prism.matching;
var mapped = Optic_Setter.mapped;
var lens = Optic_Lens.lens;
var isn$primet = Optic_Prism["isn't"];
var is = Optic_Prism.is;
var contramapped = Optic_Setter.contramapped;

/**
 *  Prism
 */
var clonePrism = Optic_Prism.clonePrism;
var argument = Optic_Setter.argument;
module.exports = {
    sets: sets, 
    "set'": set$prime, 
    set: set, 
    over: over, 
    mapped: mapped, 
    contramapped: contramapped, 
    argument: argument, 
    "?~": $qmark$tilde, 
    "++~": $plus$plus$tilde, 
    "<>~": $less$greater$tilde, 
    "&&~": $amp$amp$tilde, 
    "||~": $bar$bar$tilde, 
    "//~": $div$div$tilde, 
    "*~": $times$tilde, 
    "-~": $minus$tilde, 
    "+~": $plus$tilde, 
    ".~": $dot$tilde, 
    "%~": $percent$tilde, 
    withPrism: withPrism, 
    "prism'": prism$prime, 
    prism: prism, 
    only: only, 
    nearly: nearly, 
    matching: matching, 
    "isn't": isn$primet, 
    is: is, 
    clonePrism: clonePrism, 
    lens: lens, 
    "??": $qmark$qmark, 
    "^.": $up$dot, 
    view: view, 
    to: to, 
    "..": $dot$dot
};

},{"Optic.Getter":36,"Optic.Lens":39,"Optic.Prism":40,"Optic.Setter":41,"Optic.Types":42,"Prelude":44}],36:[function(require,module,exports){
// Generated by psc-make version 0.6.9.3
"use strict";
var Data_Profunctor = require("Data.Profunctor");
var Data_Const = require("Data.Const");
var Prelude = require("Prelude");
var Data_Contravariant = require("Data.Contravariant");
var Optic_Types = require("Optic.Types");
var Void = function (x) {
    return x;
};
var $up$dot = function (s) {
    return function (asa) {
        return Data_Const.getConst(asa(Data_Const.Const)(s));
    };
};
var view = function (asa) {
    return function (s) {
        return Data_Const.getConst(asa(Data_Const.Const)(s));
    };
};
var absurd = function (a) {
    var spin = function (__copy__232) {
        var _232 = __copy__232;
        tco: while (true) {
            var __tco__232 = _232;
            _232 = __tco__232;
            continue tco;
        };
    };
    return spin(a);
};
var coerce = function (__dict_Contravariant_0) {
    return function (__dict_Functor_1) {
        return function (a) {
            return Prelude["<$>"](__dict_Functor_1)(absurd)(Data_Contravariant[">$<"](__dict_Contravariant_0)(absurd)(a));
        };
    };
};
var to = function (__dict_Contravariant_2) {
    return function (__dict_Functor_3) {
        return function (__dict_Profunctor_4) {
            return function (s2a) {
                return Data_Profunctor.dimap(__dict_Profunctor_4)(s2a)(coerce(__dict_Contravariant_2)(__dict_Functor_3));
            };
        };
    };
};
module.exports = {
    view: view, 
    to: to, 
    "^.": $up$dot
};

},{"Data.Const":13,"Data.Contravariant":14,"Data.Profunctor":28,"Optic.Types":42,"Prelude":44}],37:[function(require,module,exports){
// Generated by psc-make version 0.6.9.3
"use strict";
var Prelude = require("Prelude");
var Data_Either = require("Data.Either");
var Data_Profunctor = require("Data.Profunctor");
var Data_Profunctor_Choice = require("Data.Profunctor.Choice");
var Market = (function () {
    function Market(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Market.create = function (value0) {
        return function (value1) {
            return new Market(value0, value1);
        };
    };
    return Market;
})();
var profunctorMarket = new Data_Profunctor.Profunctor(function (s2r) {
    return function (t2u) {
        return function (_13) {
            return new Market(Prelude[">>>"](Prelude.semigroupoidArr)(_13.value0)(t2u), Prelude[">>>"](Prelude.semigroupoidArr)(s2r)(Prelude[">>>"](Prelude.semigroupoidArr)(_13.value1)(Data_Either.either(Prelude[">>>"](Prelude.semigroupoidArr)(t2u)(Data_Either.Left.create))(Data_Either.Right.create))));
        };
    };
});
var functorMarket = new Prelude.Functor(function (t2u) {
    return function (_12) {
        return new Market(Prelude[">>>"](Prelude.semigroupoidArr)(_12.value0)(t2u), Prelude[">>>"](Prelude.semigroupoidArr)(_12.value1)(Data_Either.either(Prelude[">>>"](Prelude.semigroupoidArr)(t2u)(Data_Either.Left.create))(Data_Either.Right.create)));
    };
});
var choiceMarket = new Data_Profunctor_Choice.Choice(function () {
    return profunctorMarket;
}, function (_14) {
    return new Market(Prelude[">>>"](Prelude.semigroupoidArr)(_14.value0)(Data_Either.Left.create), function (thing) {
        if (thing instanceof Data_Either.Left) {
            return Data_Either.either(Prelude[">>>"](Prelude.semigroupoidArr)(Data_Either.Left.create)(Data_Either.Left.create))(Data_Either.Right.create)(_14.value1(thing.value0));
        };
        if (thing instanceof Data_Either.Right) {
            return Data_Either.Left.create(new Data_Either.Right(thing.value0));
        };
        throw new Error("Failed pattern match");
    });
}, function (_15) {
    return new Market(Prelude[">>>"](Prelude.semigroupoidArr)(_15.value0)(Data_Either.Right.create), function (thing) {
        if (thing instanceof Data_Either.Left) {
            return Data_Either.Left.create(new Data_Either.Left(thing.value0));
        };
        if (thing instanceof Data_Either.Right) {
            return Data_Either.either(Prelude[">>>"](Prelude.semigroupoidArr)(Data_Either.Right.create)(Data_Either.Left.create))(Data_Either.Right.create)(_15.value1(thing.value0));
        };
        throw new Error("Failed pattern match");
    });
});
module.exports = {
    Market: Market, 
    functorMarket: functorMarket, 
    profunctorMarket: profunctorMarket, 
    choiceMarket: choiceMarket
};

},{"Data.Either":16,"Data.Profunctor":28,"Data.Profunctor.Choice":27,"Prelude":44}],38:[function(require,module,exports){
// Generated by psc-make version 0.6.9.3
"use strict";
var Data_Profunctor = require("Data.Profunctor");
var Data_Identity = require("Data.Identity");
var Prelude = require("Prelude");
var Data_Distributive = require("Data.Distributive");
var Data_Traversable = require("Data.Traversable");
var Settable = function (__superclass_Data$dotDistributive$dotDistributive_1, __superclass_Data$dotTraversable$dotTraversable_2, __superclass_Prelude$dotApplicative_0, taintedDot, untainted, untaintedDot) {
    this["__superclass_Data.Distributive.Distributive_1"] = __superclass_Data$dotDistributive$dotDistributive_1;
    this["__superclass_Data.Traversable.Traversable_2"] = __superclass_Data$dotTraversable$dotTraversable_2;
    this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
    this.taintedDot = taintedDot;
    this.untainted = untainted;
    this.untaintedDot = untaintedDot;
};
var untaintedDot = function (dict) {
    return dict.untaintedDot;
};
var untainted = function (dict) {
    return dict.untainted;
};
var taintedDot = function (dict) {
    return dict.taintedDot;
};
var settableIdentity = new Settable(function () {
    return Data_Distributive.distributiveIdentity;
}, function () {
    return Data_Identity.traversableIdentity;
}, function () {
    return Data_Identity.applicativeIdentity;
}, function (__dict_Profunctor_1) {
    return Data_Profunctor.rmap(__dict_Profunctor_1)(Data_Identity.Identity);
}, function (_231) {
    return _231;
}, function (__dict_Profunctor_0) {
    return Data_Profunctor.rmap(__dict_Profunctor_0)(Data_Identity.runIdentity);
});
module.exports = {
    Settable: Settable, 
    taintedDot: taintedDot, 
    untaintedDot: untaintedDot, 
    untainted: untainted, 
    settableIdentity: settableIdentity
};

},{"Data.Distributive":15,"Data.Identity":19,"Data.Profunctor":28,"Data.Traversable":31,"Prelude":44}],39:[function(require,module,exports){
// Generated by psc-make version 0.6.9.3
"use strict";
var Prelude = require("Prelude");
var Optic_Types = require("Optic.Types");
var $qmark$qmark = function (__dict_Functor_0) {
    return function (ff) {
        return function (x) {
            return Prelude["<$>"](__dict_Functor_0)(function (f) {
                return f(x);
            })(ff);
        };
    };
};
var lens = function (s2a) {
    return function (s2b2t) {
        return function (__dict_Functor_1) {
            return function (a2fb) {
                return function (s) {
                    return Prelude["<$>"](__dict_Functor_1)(s2b2t(s))(a2fb(s2a(s)));
                };
            };
        };
    };
};
module.exports = {
    lens: lens, 
    "??": $qmark$qmark
};

},{"Optic.Types":42,"Prelude":44}],40:[function(require,module,exports){
// Generated by psc-make version 0.6.9.3
"use strict";
var Prelude = require("Prelude");
var Data_Either = require("Data.Either");
var Data_Profunctor = require("Data.Profunctor");
var Data_Profunctor_Choice = require("Data.Profunctor.Choice");
var Data_Maybe = require("Data.Maybe");
var Data_Identity = require("Data.Identity");
var Optic_Internal_Prism = require("Optic.Internal.Prism");
var Optic_Types = require("Optic.Types");
var withPrism = function (stab) {
    return function (f) {
        var _798 = stab(new Optic_Internal_Prism.Market(Data_Identity.Identity, Data_Either.Right.create));
        return f(Prelude["<<<"](Prelude.semigroupoidArr)(Data_Identity.runIdentity)(_798.value0))(Prelude[">>>"](Prelude.semigroupoidArr)(_798.value1)(Data_Either.either(Prelude[">>>"](Prelude.semigroupoidArr)(Data_Identity.runIdentity)(Data_Either.Left.create))(Data_Either.Right.create)));
    };
};
var prism = function (__dict_Applicative_0) {
    return function (__dict_Choice_1) {
        return function (b2t) {
            return function (s2Eta) {
                return function (pafb) {
                    return Data_Profunctor.dimap(__dict_Choice_1["__superclass_Data.Profunctor.Profunctor_0"]())(s2Eta)(Data_Either.either(Prelude.pure(__dict_Applicative_0))(Prelude["<$>"]((__dict_Applicative_0["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(b2t)))(Data_Profunctor_Choice.right(__dict_Choice_1)(pafb));
                };
            };
        };
    };
};
var prism$prime = function (b2s) {
    return function (s2Ma) {
        return function (__dict_Applicative_2) {
            return function (__dict_Choice_3) {
                return prism(__dict_Applicative_2)(__dict_Choice_3)(b2s)(function (s) {
                    return Data_Maybe.maybe(new Data_Either.Left(s))(Data_Either.Right.create)(s2Ma(s));
                });
            };
        };
    };
};
var nearly = function (x) {
    return function (p) {
        return function (__dict_Applicative_4) {
            return function (__dict_Choice_5) {
                var guard = function (_234) {
                    if (_234) {
                        return new Data_Maybe.Just(Prelude.unit);
                    };
                    if (!_234) {
                        return Data_Maybe.Nothing.value;
                    };
                    throw new Error("Failed pattern match");
                };
                return prism$prime(Prelude["const"](x))(Prelude["<<<"](Prelude.semigroupoidArr)(guard)(p))(__dict_Applicative_4)(__dict_Choice_5);
            };
        };
    };
};
var only = function (__dict_Eq_6) {
    return function (x) {
        return function (__dict_Applicative_7) {
            return function (__dict_Choice_8) {
                return nearly(x)(Prelude["=="](__dict_Eq_6)(x))(__dict_Applicative_7)(__dict_Choice_8);
            };
        };
    };
};
var matching = function (stab) {
    return withPrism(stab)(function (_233) {
        return function (s) {
            return s;
        };
    });
};
var is = function (stab) {
    return function (s) {
        return Data_Either.either(Prelude["const"](false))(Prelude["const"](true))(matching(stab)(s));
    };
};
var isn$primet = function (stab) {
    return function (s) {
        return !is(stab)(s);
    };
};
var clonePrism = function (__dict_Applicative_9) {
    return function (__dict_Choice_10) {
        return function (stab) {
            return withPrism(stab)(prism(__dict_Applicative_9)(__dict_Choice_10));
        };
    };
};
module.exports = {
    withPrism: withPrism, 
    "prism'": prism$prime, 
    prism: prism, 
    only: only, 
    nearly: nearly, 
    matching: matching, 
    "isn't": isn$primet, 
    is: is, 
    clonePrism: clonePrism
};

},{"Data.Either":16,"Data.Identity":19,"Data.Maybe":20,"Data.Profunctor":28,"Data.Profunctor.Choice":27,"Optic.Internal.Prism":37,"Optic.Types":42,"Prelude":44}],41:[function(require,module,exports){
// Generated by psc-make version 0.6.9.3
"use strict";
var Data_Profunctor = require("Data.Profunctor");
var Data_Contravariant = require("Data.Contravariant");
var Prelude = require("Prelude");
var Data_Identity = require("Data.Identity");
var Optic_Internal_Setter = require("Optic.Internal.Setter");
var Data_Maybe = require("Data.Maybe");
var Optic_Types = require("Optic.Types");
var sets = function (__dict_Profunctor_0) {
    return function (__dict_Profunctor_1) {
        return function (__dict_Settable_2) {
            return function (pab2qst) {
                return Prelude[">>>"](Prelude.semigroupoidArr)(Optic_Internal_Setter.untaintedDot(__dict_Settable_2)(__dict_Profunctor_0))(Prelude[">>>"](Prelude.semigroupoidArr)(pab2qst)(Optic_Internal_Setter.taintedDot(__dict_Settable_2)(__dict_Profunctor_1)));
            };
        };
    };
};
var set$prime = function (sa) {
    return function (a) {
        return Prelude["<<<"](Prelude.semigroupoidArr)(Data_Identity.runIdentity)(sa(Prelude["<<<"](Prelude.semigroupoidArr)(Data_Identity.Identity)(Prelude["const"](a))));
    };
};
var set = function (stab) {
    return function (b) {
        return Prelude["<<<"](Prelude.semigroupoidArr)(Data_Identity.runIdentity)(stab(Prelude["<<<"](Prelude.semigroupoidArr)(Data_Identity.Identity)(Prelude["const"](b))));
    };
};
var $dot$tilde = set;
var $qmark$tilde = function (stab) {
    return function (a) {
        return set(stab)(new Data_Maybe.Just(a));
    };
};
var over = function (__dict_Profunctor_3) {
    return function (pstab) {
        return function (pab) {
            return Prelude["<<<"](Prelude.semigroupoidArr)(Data_Identity.runIdentity)(pstab(Data_Profunctor.rmap(__dict_Profunctor_3)(Data_Identity.Identity)(pab)));
        };
    };
};

/**
 *  Line noise time.
 */
var $percent$tilde = function (__dict_Profunctor_4) {
    return over(__dict_Profunctor_4);
};
var $amp$amp$tilde = function (__dict_BoolLike_5) {
    return function (staa) {
        return function (a) {
            return over(Data_Profunctor.profunctorArr)(staa)(Prelude.flip(Prelude["&&"](__dict_BoolLike_5))(a));
        };
    };
};
var $times$tilde = function (__dict_Num_6) {
    return function (staa) {
        return function (a) {
            return over(Data_Profunctor.profunctorArr)(staa)(Prelude.flip(Prelude["*"](((__dict_Num_6["__superclass_Prelude.DivisionRing_0"]())["__superclass_Prelude.ModuloSemiring_1"]())["__superclass_Prelude.Semiring_0"]()))(a));
        };
    };
};
var $plus$plus$tilde = function (__dict_Semigroup_7) {
    return function (staa) {
        return function (a) {
            return over(Data_Profunctor.profunctorArr)(staa)(Prelude.flip(Prelude["++"](__dict_Semigroup_7))(a));
        };
    };
};
var $plus$tilde = function (__dict_Num_8) {
    return function (staa) {
        return function (a) {
            return over(Data_Profunctor.profunctorArr)(staa)(Prelude.flip(Prelude["+"](((__dict_Num_8["__superclass_Prelude.DivisionRing_0"]())["__superclass_Prelude.ModuloSemiring_1"]())["__superclass_Prelude.Semiring_0"]()))(a));
        };
    };
};
var $minus$tilde = function (__dict_Num_9) {
    return function (staa) {
        return function (a) {
            return over(Data_Profunctor.profunctorArr)(staa)(Prelude.flip(Prelude["-"]((__dict_Num_9["__superclass_Prelude.DivisionRing_0"]())["__superclass_Prelude.Ring_0"]()))(a));
        };
    };
};
var $div$div$tilde = function (__dict_Num_10) {
    return function (staa) {
        return function (a) {
            return over(Data_Profunctor.profunctorArr)(staa)(Prelude.flip(Prelude["/"]((__dict_Num_10["__superclass_Prelude.DivisionRing_0"]())["__superclass_Prelude.ModuloSemiring_1"]()))(a));
        };
    };
};
var $less$greater$tilde = function (__dict_Semigroup_11) {
    return function (staa) {
        return function (a) {
            return over(Data_Profunctor.profunctorArr)(staa)(Prelude.flip(Prelude["<>"](__dict_Semigroup_11))(a));
        };
    };
};
var $bar$bar$tilde = function (__dict_BoolLike_12) {
    return function (staa) {
        return function (a) {
            return over(Data_Profunctor.profunctorArr)(staa)(Prelude.flip(Prelude["||"](__dict_BoolLike_12))(a));
        };
    };
};
var mapped = function (__dict_Functor_13) {
    return function (__dict_Settable_14) {
        return sets(Data_Profunctor.profunctorArr)(Data_Profunctor.profunctorArr)(__dict_Settable_14)(Prelude["<$>"](__dict_Functor_13));
    };
};
var contramapped = function (__dict_Contravariant_15) {
    return function (__dict_Settable_16) {
        return sets(Data_Profunctor.profunctorArr)(Data_Profunctor.profunctorArr)(__dict_Settable_16)(Data_Contravariant[">$<"](__dict_Contravariant_15));
    };
};
var argument = function (__dict_Profunctor_17) {
    return function (__dict_Settable_18) {
        return sets(Data_Profunctor.profunctorArr)(Data_Profunctor.profunctorArr)(__dict_Settable_18)(Data_Profunctor.lmap(__dict_Profunctor_17));
    };
};
module.exports = {
    sets: sets, 
    "set'": set$prime, 
    set: set, 
    over: over, 
    mapped: mapped, 
    contramapped: contramapped, 
    argument: argument, 
    "?~": $qmark$tilde, 
    "++~": $plus$plus$tilde, 
    "<>~": $less$greater$tilde, 
    "&&~": $amp$amp$tilde, 
    "||~": $bar$bar$tilde, 
    "//~": $div$div$tilde, 
    "*~": $times$tilde, 
    "-~": $minus$tilde, 
    "+~": $plus$tilde, 
    ".~": $dot$tilde, 
    "%~": $percent$tilde
};

},{"Data.Contravariant":14,"Data.Identity":19,"Data.Maybe":20,"Data.Profunctor":28,"Optic.Internal.Setter":38,"Optic.Types":42,"Prelude":44}],42:[function(require,module,exports){
// Generated by psc-make version 0.6.9.3
"use strict";
var Prelude = require("Prelude");
var Optic_Internal_Prism = require("Optic.Internal.Prism");
var Optic_Internal_Setter = require("Optic.Internal.Setter");
var Data_Const = require("Data.Const");
var Data_Contravariant = require("Data.Contravariant");
var Data_Identity = require("Data.Identity");
var Data_Profunctor = require("Data.Profunctor");
var Data_Profunctor_Choice = require("Data.Profunctor.Choice");
module.exports = {};

},{"Data.Const":13,"Data.Contravariant":14,"Data.Identity":19,"Data.Profunctor":28,"Data.Profunctor.Choice":27,"Optic.Internal.Prism":37,"Optic.Internal.Setter":38,"Prelude":44}],43:[function(require,module,exports){
// Generated by psc-make version 0.6.9.3
"use strict";
var Prelude = require("Prelude");

    function unsafeIndex(xs) {
      return function(n) {
        return xs[n];
      };
    }
    ;
module.exports = {
    unsafeIndex: unsafeIndex
};

},{"Prelude":44}],44:[function(require,module,exports){
// Generated by psc-make version 0.6.9.3
"use strict";

    function cons(e) {
      return function(l) {
        return [e].concat(l);
      };
    }
    ;

    function showStringImpl(s) {
      return JSON.stringify(s);
    }
    ;

    function showNumberImpl(n) {
      return n.toString();
    }
    ;

    function showArrayImpl(f) {
      return function(xs) {
        var ss = [];
        for (var i = 0, l = xs.length; i < l; i++) {
          ss[i] = f(xs[i]);
        }
        return '[' + ss.join(',') + ']';
      };
    }
    ;

    function numAdd(n1) {
      return function(n2) {
        return n1 + n2;
      };
    }
    ;

    function numSub(n1) {
      return function(n2) {
        return n1 - n2;
      };
    }
    ;

    function numMul(n1) {
      return function(n2) {
        return n1 * n2;
      };
    }
    ;

    function numDiv(n1) {
      return function(n2) {
        return n1 / n2;
      };
    }
    ;

    function numMod(n1) {
      return function(n2) {
        return n1 % n2;
      };
    }
    ;

    function refEq(r1) {
      return function(r2) {
        return r1 === r2;
      };
    }
    ;

    function refIneq(r1) {
      return function(r2) {
        return r1 !== r2;
      };
    }
    ;

    function eqArrayImpl(f) {
      return function(xs) {
        return function(ys) {
          if (xs.length !== ys.length) return false;
          for (var i = 0; i < xs.length; i++) {
            if (!f(xs[i])(ys[i])) return false;
          }
          return true;
        };
      };
    }
    ;

    function unsafeCompareImpl(lt) {
      return function(eq) {
        return function(gt) {
          return function(x) {
            return function(y) {
              return x < y ? lt : x > y ? gt : eq;
            };
          };
        };
      };
    }
    ;

    function numShl(n1) {
      return function(n2) {
        return n1 << n2;
      };
    }
    ;

    function numShr(n1) {
      return function(n2) {
        return n1 >> n2;
      };
    }
    ;

    function numZshr(n1) {
      return function(n2) {
        return n1 >>> n2;
      };
    }
    ;

    function numAnd(n1) {
      return function(n2) {
        return n1 & n2;
      };
    }
    ;

    function numOr(n1) {
      return function(n2) {
        return n1 | n2;
      };
    }
    ;

    function numXor(n1) {
      return function(n2) {
        return n1 ^ n2;
      };
    }
    ;

    function numComplement(n) {
      return ~n;
    }
    ;

    function boolAnd(b1) {
      return function(b2) {
        return b1 && b2;
      };
    }
    ;

    function boolOr(b1) {
      return function(b2) {
        return b1 || b2;
      };
    }
    ;

    function boolNot(b) {
      return !b;
    }
    ;

    function concatString(s1) {
      return function(s2) {
        return s1 + s2;
      };
    }
    ;

/**
 *  | The `Unit` type has a single inhabitant, called `unit`. It represents values with no computational content.
 *  |
 *  | `Unit` is often used, wrapped in a monadic type constructor, as the return type of a computation where only
 *  | the _effects_ are important.
 */
var Unit = function (x) {
    return x;
};

/**
 *  | The `Ordering` data type represents the three possible outcomes of comparing two values:
 *  |
 *  | `LT` - The first value is _less than_ the second.
 *  | `GT` - The first value is _greater than_ the second.
 *  | `EQ` - The first value is _equal to_ or _incomparable to_ the second.
 */
var LT = (function () {
    function LT() {

    };
    LT.value = new LT();
    return LT;
})();

/**
 *  | The `Ordering` data type represents the three possible outcomes of comparing two values:
 *  |
 *  | `LT` - The first value is _less than_ the second.
 *  | `GT` - The first value is _greater than_ the second.
 *  | `EQ` - The first value is _equal to_ or _incomparable to_ the second.
 */
var GT = (function () {
    function GT() {

    };
    GT.value = new GT();
    return GT;
})();

/**
 *  | The `Ordering` data type represents the three possible outcomes of comparing two values:
 *  |
 *  | `LT` - The first value is _less than_ the second.
 *  | `GT` - The first value is _greater than_ the second.
 *  | `EQ` - The first value is _equal to_ or _incomparable to_ the second.
 */
var EQ = (function () {
    function EQ() {

    };
    EQ.value = new EQ();
    return EQ;
})();

/**
 *  | A `Semigroupoid` is similar to a [`Category`](#category) but does not require an identity
 *  | element `id`, just composable morphisms.
 *  |
 *  | `Semigroupoid`s should obey the following rule:
 *  |
 *  | - Associativity: `p <<< (q <<< r) = (p <<< q) <<< r`
 *  |
 *  | One example of a `Semigroupoid` is the function type constructor `(->)`, with `(<<<)` defined
 *  | as function composition.
 */
var Semigroupoid = function ($less$less$less) {
    this["<<<"] = $less$less$less;
};

/**
 *  | `Category`s consist of objects and composable morphisms between them, and as such are
 *  | [`Semigroupoids`](#semigroupoid), but unlike `semigroupoids` must have an identity element.
 *  |
 *  | `Category`s should obey the following rules.
 *  |
 *  | - Left Identity: `id <<< p = p`
 *  | - Right Identity: `p <<< id = p`
 *  |
 */
var Category = function (__superclass_Prelude$dotSemigroupoid_0, id) {
    this["__superclass_Prelude.Semigroupoid_0"] = __superclass_Prelude$dotSemigroupoid_0;
    this.id = id;
};

/**
 *  | The `Show` type class represents those types which can be converted into a human-readable `String` representation.
 *  |
 *  | While not required, it is recommended that for any expression `x`, the string `show x` be executable PureScript code
 *  | which evaluates to the same value as the expression `x`.
 */
var Show = function (show) {
    this.show = show;
};

/**
 *  | A `Functor` is a type constructor which supports a mapping operation `(<$>)`.
 *  |
 *  | `(<$>)` can be used to turn functions `a -> b` into functions `f a -> f b` whose argument and return
 *  | types use the type constructor `f` to represent some computational context.
 *  |
 *  | `Functor` instances should satisfy the following laws:
 *  |
 *  | - Identity: `(<$>) id = id`
 *  | - Composition: `(<$>) (f <<< g) = (f <$>) <<< (g <$>)`
 *  |
 */
var Functor = function ($less$dollar$greater) {
    this["<$>"] = $less$dollar$greater;
};

/**
 *  | The `Apply` class provides the `(<*>)` which is used to apply a function to an argument under a type constructor.
 *  |
 *  | `Apply` can be used to lift functions of two or more arguments to work on values wrapped with the type constructor `f`.
 *  | It might also be understood in terms of the `lift2` function:
 *  |
 *  | ```purescript
 *  | lift2 :: forall f a b c. (Apply f) => (a -> b -> c) -> f a -> f b -> f c
 *  | lift2 f a b = f <$> a <*> b
 *  | ```
 *  |
 *  | `(<*>)` is recovered from `lift2` as `lift2 ($)`. That is, `(<*>)` lifts the function application operator `($)` to arguments
 *  | wrapped with the type constructor `f`.
 *  |
 *  | `Apply` instances should satisfy the following law:
 *  |
 *  | - Associative Composition: `(<<<) <$> f <*> g <*> h = f <*> (g <*> h)`
 *  |
 *  | Formally, `Apply` represents a strong lax semi-monoidal endofunctor.
 */
var Apply = function ($less$times$greater, __superclass_Prelude$dotFunctor_0) {
    this["<*>"] = $less$times$greater;
    this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
};

/**
 *  | The `Applicative` type class extends the [`Apply`](#apply) type class with a `pure` function, which can be used to
 *  | create values of type `f a` from values of type `a`.
 *  |
 *  | Where [`Apply`](#apply) provides the ability to lift functions of two or more arguments to functions whose arguments are wrapped using `f`,
 *  | and [`Functor`](#functor) provides the ability to lift functions of one argument, `pure` can be seen as the function which lifts functions of
 *  | _zero_ arguments. That is, `Applicative` functors support a lifting operation for any number of function arguments.
 *  |
 *  | `Applicative` instances should satisfy the following laws:
 *  |
 *  | - Identity: `(pure id) <*> v = v`
 *  | - Composition: `(pure <<<) <*> f <*> g <*> h = f <*> (g <*> h)`
 *  | - Homomorphism: `(pure f) <*> (pure x) = pure (f x)`
 *  | - Interchange: `u <*> (pure y) = (pure ($ y)) <*> u`
 *  |
 */
var Applicative = function (__superclass_Prelude$dotApply_0, pure) {
    this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
    this.pure = pure;
};

/**
 *  | The `Bind` type class extends the [`Apply`](#apply) type class with a "bind" operation `(>>=)` which composes computations
 *  | in sequence, using the return value of one computation to determine the next computation.
 *  |
 *  | The `>>=` operator can also be expressed using `do` notation, as follows:
 *  |
 *  | ```purescript
 *  | x >>= f = do y <- x
 *  |              f y
 *  | ```
 *  |
 *  | where the function argument of `f` is given the name `y`.
 *  |
 *  | `Bind` instances should satisfy the following law:
 *  |
 *  | - Associativity: `(x >>= f) >>= g = x >>= (\k => f k >>= g)`
 *  |
 *  | Or, expressed using `do` notation:
 *  |
 *  | - Associativity: `do { z <- do { y <- x ; f y } ; g z } = do { k <- x ; do { y <- f k ; g y } }`
 *  |
 *  | Associativity tells us that we can regroup operations which use do-notation, so that we can unambiguously write, for example:
 *  |
 *  | ```purescript
 *  | do x <- m1
 *  |    y <- m2 x
 *  |    m3 x y
 *  | ```
 */
var Bind = function ($greater$greater$eq, __superclass_Prelude$dotApply_0) {
    this[">>="] = $greater$greater$eq;
    this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
};

/**
 *  | The `Monad` type class combines the operations of the `Bind` and `Applicative` type classes. Therefore, `Monad` instances
 *  | represent type constructors which support sequential composition, and also lifting of functions of arbitrary arity.
 *  |
 *  | `Monad` instances should satisfy the following laws:
 *  |
 *  | - Left Identity: `pure x >>= f = f x`
 *  | - Right Identity: `x >>= pure = x`
 *  |
 *  | Or, expressed using `do` notation:
 *  |
 *  | - Left Identity: `do { y <- pure x ; f y } = f x`
 *  | - Right Identity: `do { y <- x ; pure y } = x`
 *  |
 */
var Monad = function (__superclass_Prelude$dotApplicative_0, __superclass_Prelude$dotBind_1) {
    this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
    this["__superclass_Prelude.Bind_1"] = __superclass_Prelude$dotBind_1;
};

/**
 *  | Addition and multiplication, satisfying the following laws:
 *  |
 *  | - `a` is a commutative monoid under addition
 *  | - `a` is a monoid under multiplication
 *  | - multiplication distributes over addition
 *  | - multiplication by `zero` annihilates `a`
 *  |
 */
var Semiring = function ($times, $plus, one, zero) {
    this["*"] = $times;
    this["+"] = $plus;
    this.one = one;
    this.zero = zero;
};

/**
 *  | Addition, multiplication, modulo operation and division, satisfying:
 *  |
 *  | - ```a / b * b + (a `mod` b) = a```
 *  |
 */
var ModuloSemiring = function ($div, __superclass_Prelude$dotSemiring_0, mod) {
    this["/"] = $div;
    this["__superclass_Prelude.Semiring_0"] = __superclass_Prelude$dotSemiring_0;
    this.mod = mod;
};

/**
 *  | Addition, multiplication, and subtraction.
 *  |
 *  | Has the same laws as `Semiring` but additionally satisfying:
 *  |
 *  | - `a` is an abelian group under addition
 *  |
 */
var Ring = function ($minus, __superclass_Prelude$dotSemiring_0) {
    this["-"] = $minus;
    this["__superclass_Prelude.Semiring_0"] = __superclass_Prelude$dotSemiring_0;
};

/**
 *  | Ring where every nonzero element has a multiplicative inverse so that:
 *  |
 *  | - ```a `mod` b = zero```
 *  |
 */
var DivisionRing = function (__superclass_Prelude$dotModuloSemiring_1, __superclass_Prelude$dotRing_0) {
    this["__superclass_Prelude.ModuloSemiring_1"] = __superclass_Prelude$dotModuloSemiring_1;
    this["__superclass_Prelude.Ring_0"] = __superclass_Prelude$dotRing_0;
};

/**
 *  | A commutative field
 */
var Num = function (__superclass_Prelude$dotDivisionRing_0) {
    this["__superclass_Prelude.DivisionRing_0"] = __superclass_Prelude$dotDivisionRing_0;
};

/**
 *  | The `Eq` type class represents types which support decidable equality.
 *  |
 *  | `Eq` instances should satisfy the following laws:
 *  |
 *  | - Reflexivity: `x == x = true`
 *  | - Symmetry: `x == y = y == x`
 *  | - Transitivity: if `x == y` and `y == z` then `x == z`
 *  | - Negation: `x /= y = not (x == y)`
 *  |
 *  | `(/=)` may be implemented in terms of `(==)`, but it might give a performance improvement to implement it separately.
 */
var Eq = function ($div$eq, $eq$eq) {
    this["/="] = $div$eq;
    this["=="] = $eq$eq;
};

/**
 *  | The `Ord` type class represents types which support comparisons.
 *  |
 *  | `Ord` instances should satisfy the laws of _partially orderings_:
 *  |
 *  | - Reflexivity: `a <= a`
 *  | - Antisymmetry: if `a <= b` and `b <= a` then `a = b`
 *  | - Transitivity: if `a <= b` and `b <= c` then `a <= c`
 *  |
 */
var Ord = function (__superclass_Prelude$dotEq_0, compare) {
    this["__superclass_Prelude.Eq_0"] = __superclass_Prelude$dotEq_0;
    this.compare = compare;
};

/**
 *  | The `Bits` type class identifies types which support bitwise operations.
 */
var Bits = function ($dot$amp$dot, $dot$up$dot, $dot$bar$dot, complement, shl, shr, zshr) {
    this[".&."] = $dot$amp$dot;
    this[".^."] = $dot$up$dot;
    this[".|."] = $dot$bar$dot;
    this.complement = complement;
    this.shl = shl;
    this.shr = shr;
    this.zshr = zshr;
};

/**
 *  | The `BoolLike` type class identifies types which support Boolean operations.
 *  |
 *  | `BoolLike` instances are required to satisfy the laws of a _Boolean algebra_.
 *  |
 */
var BoolLike = function ($amp$amp, not, $bar$bar) {
    this["&&"] = $amp$amp;
    this.not = not;
    this["||"] = $bar$bar;
};

/**
 *  | The `Semigroup` type class identifies an associative operation on a type.
 *  |
 *  | `Semigroup` instances are required to satisfy the following law:
 *  |
 *  | - Associativity: `(x <> y) <> z = x <> (y <> z)`
 *  |
 *  | For example, the `String` type is an instance of `Semigroup`, where `(<>)` is defined to be string concatenation.
 */
var Semigroup = function ($less$greater) {
    this["<>"] = $less$greater;
};

/**
 *  | The `BoolLike` type class identifies types which support Boolean operations.
 *  |
 *  | `BoolLike` instances are required to satisfy the laws of a _Boolean algebra_.
 *  |
 */
var $bar$bar = function (dict) {
    return dict["||"];
};

/**
 *  | The `Bind` type class extends the [`Apply`](#apply) type class with a "bind" operation `(>>=)` which composes computations
 *  | in sequence, using the return value of one computation to determine the next computation.
 *  |
 *  | The `>>=` operator can also be expressed using `do` notation, as follows:
 *  |
 *  | ```purescript
 *  | x >>= f = do y <- x
 *  |              f y
 *  | ```
 *  |
 *  | where the function argument of `f` is given the name `y`.
 *  |
 *  | `Bind` instances should satisfy the following law:
 *  |
 *  | - Associativity: `(x >>= f) >>= g = x >>= (\k => f k >>= g)`
 *  |
 *  | Or, expressed using `do` notation:
 *  |
 *  | - Associativity: `do { z <- do { y <- x ; f y } ; g z } = do { k <- x ; do { y <- f k ; g y } }`
 *  |
 *  | Associativity tells us that we can regroup operations which use do-notation, so that we can unambiguously write, for example:
 *  |
 *  | ```purescript
 *  | do x <- m1
 *  |    y <- m2 x
 *  |    m3 x y
 *  | ```
 */
var $greater$greater$eq = function (dict) {
    return dict[">>="];
};

/**
 *  | The `Eq` type class represents types which support decidable equality.
 *  |
 *  | `Eq` instances should satisfy the following laws:
 *  |
 *  | - Reflexivity: `x == x = true`
 *  | - Symmetry: `x == y = y == x`
 *  | - Transitivity: if `x == y` and `y == z` then `x == z`
 *  | - Negation: `x /= y = not (x == y)`
 *  |
 *  | `(/=)` may be implemented in terms of `(==)`, but it might give a performance improvement to implement it separately.
 */
var $eq$eq = function (dict) {
    return dict["=="];
};

/**
 *  | The `Semigroup` type class identifies an associative operation on a type.
 *  |
 *  | `Semigroup` instances are required to satisfy the following law:
 *  |
 *  | - Associativity: `(x <> y) <> z = x <> (y <> z)`
 *  |
 *  | For example, the `String` type is an instance of `Semigroup`, where `(<>)` is defined to be string concatenation.
 */
var $less$greater = function (dict) {
    return dict["<>"];
};

/**
 *  | A `Semigroupoid` is similar to a [`Category`](#category) but does not require an identity
 *  | element `id`, just composable morphisms.
 *  |
 *  | `Semigroupoid`s should obey the following rule:
 *  |
 *  | - Associativity: `p <<< (q <<< r) = (p <<< q) <<< r`
 *  |
 *  | One example of a `Semigroupoid` is the function type constructor `(->)`, with `(<<<)` defined
 *  | as function composition.
 */
var $less$less$less = function (dict) {
    return dict["<<<"];
};

/**
 *  | Forwards composition, or `(<<<)` with its arguments reversed.
 */
var $greater$greater$greater = function (__dict_Semigroupoid_0) {
    return function (f) {
        return function (g) {
            return $less$less$less(__dict_Semigroupoid_0)(g)(f);
        };
    };
};

/**
 *  | The `Apply` class provides the `(<*>)` which is used to apply a function to an argument under a type constructor.
 *  |
 *  | `Apply` can be used to lift functions of two or more arguments to work on values wrapped with the type constructor `f`.
 *  | It might also be understood in terms of the `lift2` function:
 *  |
 *  | ```purescript
 *  | lift2 :: forall f a b c. (Apply f) => (a -> b -> c) -> f a -> f b -> f c
 *  | lift2 f a b = f <$> a <*> b
 *  | ```
 *  |
 *  | `(<*>)` is recovered from `lift2` as `lift2 ($)`. That is, `(<*>)` lifts the function application operator `($)` to arguments
 *  | wrapped with the type constructor `f`.
 *  |
 *  | `Apply` instances should satisfy the following law:
 *  |
 *  | - Associative Composition: `(<<<) <$> f <*> g <*> h = f <*> (g <*> h)`
 *  |
 *  | Formally, `Apply` represents a strong lax semi-monoidal endofunctor.
 */
var $less$times$greater = function (dict) {
    return dict["<*>"];
};

/**
 *  | A `Functor` is a type constructor which supports a mapping operation `(<$>)`.
 *  |
 *  | `(<$>)` can be used to turn functions `a -> b` into functions `f a -> f b` whose argument and return
 *  | types use the type constructor `f` to represent some computational context.
 *  |
 *  | `Functor` instances should satisfy the following laws:
 *  |
 *  | - Identity: `(<$>) id = id`
 *  | - Composition: `(<$>) (f <<< g) = (f <$>) <<< (g <$>)`
 *  |
 */
var $less$dollar$greater = function (dict) {
    return dict["<$>"];
};

/**
 *  | `(<#>)` is `(<$>)` with its arguments reversed. For example:
 *  |
 *  | ```purescript
 *  | [1, 2, 3] <#> \n -> n * n
 *  | ```
 */
var $less$hash$greater = function (__dict_Functor_1) {
    return function (fa) {
        return function (f) {
            return $less$dollar$greater(__dict_Functor_1)(f)(fa);
        };
    };
};

/**
 *  | An infix alias for `cons`.
 *  |
 *  | Note, the running time of this function is `O(n)`.
 */
var $colon = cons;

/**
 *  | The `Eq` type class represents types which support decidable equality.
 *  |
 *  | `Eq` instances should satisfy the following laws:
 *  |
 *  | - Reflexivity: `x == x = true`
 *  | - Symmetry: `x == y = y == x`
 *  | - Transitivity: if `x == y` and `y == z` then `x == z`
 *  | - Negation: `x /= y = not (x == y)`
 *  |
 *  | `(/=)` may be implemented in terms of `(==)`, but it might give a performance improvement to implement it separately.
 */
var $div$eq = function (dict) {
    return dict["/="];
};

/**
 *  | Addition, multiplication, modulo operation and division, satisfying:
 *  |
 *  | - ```a / b * b + (a `mod` b) = a```
 *  |
 */
var $div = function (dict) {
    return dict["/"];
};

/**
 *  | The `Bits` type class identifies types which support bitwise operations.
 */
var $dot$bar$dot = function (dict) {
    return dict[".|."];
};

/**
 *  | The `Bits` type class identifies types which support bitwise operations.
 */
var $dot$up$dot = function (dict) {
    return dict[".^."];
};

/**
 *  | The `Bits` type class identifies types which support bitwise operations.
 */
var $dot$amp$dot = function (dict) {
    return dict[".&."];
};

/**
 *  | Addition, multiplication, and subtraction.
 *  |
 *  | Has the same laws as `Semiring` but additionally satisfying:
 *  |
 *  | - `a` is an abelian group under addition
 *  |
 */
var $minus = function (dict) {
    return dict["-"];
};

/**
 *  | `(++)` is an alias for `(<>)`.
 */
var $plus$plus = function (__dict_Semigroup_2) {
    return $less$greater(__dict_Semigroup_2);
};

/**
 *  | Addition and multiplication, satisfying the following laws:
 *  |
 *  | - `a` is a commutative monoid under addition
 *  | - `a` is a monoid under multiplication
 *  | - multiplication distributes over addition
 *  | - multiplication by `zero` annihilates `a`
 *  |
 */
var $plus = function (dict) {
    return dict["+"];
};

/**
 *  | Addition and multiplication, satisfying the following laws:
 *  |
 *  | - `a` is a commutative monoid under addition
 *  | - `a` is a monoid under multiplication
 *  | - multiplication distributes over addition
 *  | - multiplication by `zero` annihilates `a`
 *  |
 */
var $times = function (dict) {
    return dict["*"];
};

/**
 *  | The `BoolLike` type class identifies types which support Boolean operations.
 *  |
 *  | `BoolLike` instances are required to satisfy the laws of a _Boolean algebra_.
 *  |
 */
var $amp$amp = function (dict) {
    return dict["&&"];
};
var $percent = numMod;

/**
 *  | Applies a function to its argument
 *  |
 *  | ```purescript
 *  | length $ groupBy productCategory $ filter isInStock products
 *  | ```
 *  |
 *  | is equivalent to
 *  |
 *  | ```purescript
 *  | length (groupBy productCategory (filter isInStock (products)))
 *  | ```
 *  |
 *  | `($)` is different from [`(#)`](#-2) because it is right-infix instead of left, so
 *  | `a $ b $ c $ d x` = `a $ (b $ (c $ (d $ x)))` = `a (b (c (d x)))`
 *  |
 */
var $dollar = function (f) {
    return function (x) {
        return f(x);
    };
};

/**
 *  | Applies a function to its argument
 *  |
 *  | ```purescript
 *  | products # groupBy productCategory # filter isInStock # length
 *  | ```
 *  |
 *  | is equivalent to
 *  |
 *  | ```purescript
 *  | length (groupBy productCategory (filter isInStock (products)))
 *  | ```
 *  |
 *  | `(#)` is different from [`($)`](#-1) because it is left-infix instead of right, so
 *  | `x # a # b # c # d` = `(((x # a) # b) # c) # d` = `d (c (b (a x)))`
 *  |
 */
var $hash = function (x) {
    return function (f) {
        return f(x);
    };
};

/**
 *  | The `Bits` type class identifies types which support bitwise operations.
 */
var zshr = function (dict) {
    return dict.zshr;
};

/**
 *  | Addition and multiplication, satisfying the following laws:
 *  |
 *  | - `a` is a commutative monoid under addition
 *  | - `a` is a monoid under multiplication
 *  | - multiplication distributes over addition
 *  | - multiplication by `zero` annihilates `a`
 *  |
 */
var zero = function (dict) {
    return dict.zero;
};
var unsafeCompare = unsafeCompareImpl(LT.value)(EQ.value)(GT.value);

/**
 *  | `unit` is the sole inhabitant of the `Unit` type.
 */
var unit = {};

/**
 *  | The `Bits` type class identifies types which support bitwise operations.
 */
var shr = function (dict) {
    return dict.shr;
};
var showUnit = new Show(function (_5) {
    return "Unit {}";
});
var showString = new Show(showStringImpl);
var showOrdering = new Show(function (_15) {
    if (_15 instanceof LT) {
        return "LT";
    };
    if (_15 instanceof GT) {
        return "GT";
    };
    if (_15 instanceof EQ) {
        return "EQ";
    };
    throw new Error("Failed pattern match");
});
var showNumber = new Show(showNumberImpl);
var showBoolean = new Show(function (_6) {
    if (_6) {
        return "true";
    };
    if (!_6) {
        return "false";
    };
    throw new Error("Failed pattern match");
});

/**
 *  | The `Show` type class represents those types which can be converted into a human-readable `String` representation.
 *  |
 *  | While not required, it is recommended that for any expression `x`, the string `show x` be executable PureScript code
 *  | which evaluates to the same value as the expression `x`.
 */
var show = function (dict) {
    return dict.show;
};
var showArray = function (__dict_Show_3) {
    return new Show(showArrayImpl(show(__dict_Show_3)));
};

/**
 *  | The `Bits` type class identifies types which support bitwise operations.
 */
var shl = function (dict) {
    return dict.shl;
};
var semiringNumber = new Semiring(numMul, numAdd, 1, 0);
var semigroupoidArr = new Semigroupoid(function (f) {
    return function (g) {
        return function (x) {
            return f(g(x));
        };
    };
});
var semigroupUnit = new Semigroup(function (_23) {
    return function (_24) {
        return {};
    };
});
var semigroupString = new Semigroup(concatString);
var semigroupOrdering = new Semigroup(function (_16) {
    return function (y) {
        if (_16 instanceof LT) {
            return LT.value;
        };
        if (_16 instanceof GT) {
            return GT.value;
        };
        if (_16 instanceof EQ) {
            return y;
        };
        throw new Error("Failed pattern match");
    };
});
var semigroupArr = function (__dict_Semigroup_4) {
    return new Semigroup(function (f) {
        return function (g) {
            return function (x) {
                return $less$greater(__dict_Semigroup_4)(f(x))(g(x));
            };
        };
    });
};
var ringNumber = new Ring(numSub, function () {
    return semiringNumber;
});

/**
 *  | The `Applicative` type class extends the [`Apply`](#apply) type class with a `pure` function, which can be used to
 *  | create values of type `f a` from values of type `a`.
 *  |
 *  | Where [`Apply`](#apply) provides the ability to lift functions of two or more arguments to functions whose arguments are wrapped using `f`,
 *  | and [`Functor`](#functor) provides the ability to lift functions of one argument, `pure` can be seen as the function which lifts functions of
 *  | _zero_ arguments. That is, `Applicative` functors support a lifting operation for any number of function arguments.
 *  |
 *  | `Applicative` instances should satisfy the following laws:
 *  |
 *  | - Identity: `(pure id) <*> v = v`
 *  | - Composition: `(pure <<<) <*> f <*> g <*> h = f <*> (g <*> h)`
 *  | - Homomorphism: `(pure f) <*> (pure x) = pure (f x)`
 *  | - Interchange: `u <*> (pure y) = (pure ($ y)) <*> u`
 *  |
 */
var pure = function (dict) {
    return dict.pure;
};

/**
 *  | `return` is an alias for `pure`.
 */
var $$return = function (__dict_Monad_5) {
    return pure(__dict_Monad_5["__superclass_Prelude.Applicative_0"]());
};

/**
 *  | An alias for `true`, which can be useful in guard clauses:
 *  |
 *  | ```purescript
 *  | max x y | x >= y = x
 *  |         | otherwise = y
 *  | ```
 *  |
 */
var otherwise = true;

/**
 *  | Addition and multiplication, satisfying the following laws:
 *  |
 *  | - `a` is a commutative monoid under addition
 *  | - `a` is a monoid under multiplication
 *  | - multiplication distributes over addition
 *  | - multiplication by `zero` annihilates `a`
 *  |
 */
var one = function (dict) {
    return dict.one;
};

/**
 *  | The `BoolLike` type class identifies types which support Boolean operations.
 *  |
 *  | `BoolLike` instances are required to satisfy the laws of a _Boolean algebra_.
 *  |
 */
var not = function (dict) {
    return dict.not;
};
var negate = function (__dict_Ring_6) {
    return function (a) {
        return $minus(__dict_Ring_6)(zero(__dict_Ring_6["__superclass_Prelude.Semiring_0"]()))(a);
    };
};
var moduloSemiringNumber = new ModuloSemiring(numDiv, function () {
    return semiringNumber;
}, function (_7) {
    return function (_8) {
        return 0;
    };
});

/**
 *  | Addition, multiplication, modulo operation and division, satisfying:
 *  |
 *  | - ```a / b * b + (a `mod` b) = a```
 *  |
 */
var mod = function (dict) {
    return dict.mod;
};

/**
 *  | `liftM1` provides a default implementation of `(<$>)` for any [`Monad`](#monad),
 *  | without using `(<$>)` as provided by the [`Functor`](#functor)-[`Monad`](#monad) superclass relationship.
 *  |
 *  | `liftM1` can therefore be used to write [`Functor`](#functor) instances as follows:
 *  |
 *  | ```purescript
 *  | instance functorF :: Functor F where
 *  |   (<$>) = liftM1
 *  | ```
 */
var liftM1 = function (__dict_Monad_7) {
    return function (f) {
        return function (a) {
            return $greater$greater$eq(__dict_Monad_7["__superclass_Prelude.Bind_1"]())(a)(function (_0) {
                return $$return(__dict_Monad_7)(f(_0));
            });
        };
    };
};

/**
 *  | `liftA1` provides a default implementation of `(<$>)` for any [`Applicative`](#applicative) functor,
 *  | without using `(<$>)` as provided by the [`Functor`](#functor)-[`Applicative`](#applicative) superclass relationship.
 *  |
 *  | `liftA1` can therefore be used to write [`Functor`](#functor) instances as follows:
 *  |
 *  | ```purescript
 *  | instance functorF :: Functor F where
 *  |   (<$>) = liftA1
 *  | ```
 */
var liftA1 = function (__dict_Applicative_8) {
    return function (f) {
        return function (a) {
            return $less$times$greater(__dict_Applicative_8["__superclass_Prelude.Apply_0"]())(pure(__dict_Applicative_8)(f))(a);
        };
    };
};

/**
 *  | `Category`s consist of objects and composable morphisms between them, and as such are
 *  | [`Semigroupoids`](#semigroupoid), but unlike `semigroupoids` must have an identity element.
 *  |
 *  | `Category`s should obey the following rules.
 *  |
 *  | - Left Identity: `id <<< p = p`
 *  | - Right Identity: `p <<< id = p`
 *  |
 */
var id = function (dict) {
    return dict.id;
};
var functorArr = new Functor($less$less$less(semigroupoidArr));

/**
 *  | Flips the order of the arguments to a function of two arguments.
 *  |
 *  | ```purescript
 *  | flip const 1 2 = const 2 1 = 2
 *  | ```
 *  |
 */
var flip = function (f) {
    return function (b) {
        return function (a) {
            return f(a)(b);
        };
    };
};
var eqUnit = new Eq(function (_11) {
    return function (_12) {
        return false;
    };
}, function (_9) {
    return function (_10) {
        return true;
    };
});
var ordUnit = new Ord(function () {
    return eqUnit;
}, function (_17) {
    return function (_18) {
        return EQ.value;
    };
});
var eqString = new Eq(refIneq, refEq);
var ordString = new Ord(function () {
    return eqString;
}, unsafeCompare);
var eqNumber = new Eq(refIneq, refEq);
var ordNumber = new Ord(function () {
    return eqNumber;
}, unsafeCompare);
var eqBoolean = new Eq(refIneq, refEq);
var ordBoolean = new Ord(function () {
    return eqBoolean;
}, function (_19) {
    return function (_20) {
        if (!_19 && !_20) {
            return EQ.value;
        };
        if (!_19 && _20) {
            return LT.value;
        };
        if (_19 && _20) {
            return EQ.value;
        };
        if (_19 && !_20) {
            return GT.value;
        };
        throw new Error("Failed pattern match");
    };
});
var divisionRingNumber = new DivisionRing(function () {
    return moduloSemiringNumber;
}, function () {
    return ringNumber;
});
var numNumber = new Num(function () {
    return divisionRingNumber;
});

/**
 *  | Returns its first argument and ignores its second.
 *  |
 *  | ```purescript
 *  | const 1 "hello" = 1
 *  | ```
 *  |
 */
var $$const = function (a) {
    return function (_3) {
        return a;
    };
};

/**
 *  | The `void` function is used to ignore the type wrapped by a [`Functor`](#functor), replacing it with `Unit` and
 *  | keeping only the type information provided by the type constructor itself.
 *  |
 *  | `void` is often useful when using `do` notation to change the return type of a monadic computation:
 *  |
 *  | ```purescript
 *  | main = forE 1 10 \n -> void do
 *  |   print n
 *  |   print (n * n)
 *  | ```
 */
var $$void = function (__dict_Functor_10) {
    return function (fa) {
        return $less$dollar$greater(__dict_Functor_10)($$const(unit))(fa);
    };
};

/**
 *  | The `Bits` type class identifies types which support bitwise operations.
 */
var complement = function (dict) {
    return dict.complement;
};

/**
 *  | The `Ord` type class represents types which support comparisons.
 *  |
 *  | `Ord` instances should satisfy the laws of _partially orderings_:
 *  |
 *  | - Reflexivity: `a <= a`
 *  | - Antisymmetry: if `a <= b` and `b <= a` then `a = b`
 *  | - Transitivity: if `a <= b` and `b <= c` then `a <= c`
 *  |
 */
var compare = function (dict) {
    return dict.compare;
};

/**
 *  | Test whether one value is _strictly less than_ another.
 */
var $less = function (__dict_Ord_12) {
    return function (a1) {
        return function (a2) {
            var _45 = compare(__dict_Ord_12)(a1)(a2);
            if (_45 instanceof LT) {
                return true;
            };
            return false;
        };
    };
};

/**
 *  | Test whether one value is _non-strictly less than_ another.
 */
var $less$eq = function (__dict_Ord_13) {
    return function (a1) {
        return function (a2) {
            var _46 = compare(__dict_Ord_13)(a1)(a2);
            if (_46 instanceof GT) {
                return false;
            };
            return true;
        };
    };
};

/**
 *  | Test whether one value is _strictly greater than_ another.
 */
var $greater = function (__dict_Ord_14) {
    return function (a1) {
        return function (a2) {
            var _47 = compare(__dict_Ord_14)(a1)(a2);
            if (_47 instanceof GT) {
                return true;
            };
            return false;
        };
    };
};

/**
 *  | Test whether one value is _non-strictly greater than_ another.
 */
var $greater$eq = function (__dict_Ord_15) {
    return function (a1) {
        return function (a2) {
            var _48 = compare(__dict_Ord_15)(a1)(a2);
            if (_48 instanceof LT) {
                return false;
            };
            return true;
        };
    };
};
var categoryArr = new Category(function () {
    return semigroupoidArr;
}, function (x) {
    return x;
});
var boolLikeBoolean = new BoolLike(boolAnd, boolNot, boolOr);
var eqArray = function (__dict_Eq_9) {
    return new Eq(function (xs) {
        return function (ys) {
            return not(boolLikeBoolean)($eq$eq(eqArray(__dict_Eq_9))(xs)(ys));
        };
    }, function (xs) {
        return function (ys) {
            return eqArrayImpl($eq$eq(__dict_Eq_9))(xs)(ys);
        };
    });
};
var ordArray = function (__dict_Ord_11) {
    return new Ord(function () {
        return eqArray(__dict_Ord_11["__superclass_Prelude.Eq_0"]());
    }, function (_21) {
        return function (_22) {
            if (_21.length === 0 && _22.length === 0) {
                return EQ.value;
            };
            if (_21.length === 0) {
                return LT.value;
            };
            if (_22.length === 0) {
                return GT.value;
            };
            if (_21.length >= 1) {
                var _55 = _21.slice(1);
                if (_22.length >= 1) {
                    var _53 = _22.slice(1);
                    var _51 = compare(__dict_Ord_11)(_21[0])(_22[0]);
                    if (_51 instanceof EQ) {
                        return compare(ordArray(__dict_Ord_11))(_55)(_53);
                    };
                    return _51;
                };
            };
            throw new Error("Failed pattern match");
        };
    });
};
var eqOrdering = new Eq(function (x) {
    return function (y) {
        return not(boolLikeBoolean)($eq$eq(eqOrdering)(x)(y));
    };
}, function (_13) {
    return function (_14) {
        if (_13 instanceof LT && _14 instanceof LT) {
            return true;
        };
        if (_13 instanceof GT && _14 instanceof GT) {
            return true;
        };
        if (_13 instanceof EQ && _14 instanceof EQ) {
            return true;
        };
        return false;
    };
});
var bitsNumber = new Bits(numAnd, numXor, numOr, numComplement, numShl, numShr, numZshr);

/**
 *  | This function returns its first argument, and can be used to assert type equalities.
 *  | This can be useful when types are otherwise ambiguous.
 *  |
 *  | ```purescript
 *  | main = print $ [] `asTypeOf` [0]
 *  | ```
 *  |
 *  | If instead, we had written `main = print []`, the type of the argument `[]` would have
 *  | been ambiguous, resulting in a compile-time error.
 */
var asTypeOf = function (x) {
    return function (_4) {
        return x;
    };
};
var applyArr = new Apply(function (f) {
    return function (g) {
        return function (x) {
            return f(x)(g(x));
        };
    };
}, function () {
    return functorArr;
});
var bindArr = new Bind(function (m) {
    return function (f) {
        return function (x) {
            return f(m(x))(x);
        };
    };
}, function () {
    return applyArr;
});
var applicativeArr = new Applicative(function () {
    return applyArr;
}, $$const);
var monadArr = new Monad(function () {
    return applicativeArr;
}, function () {
    return bindArr;
});

/**
 *  | `ap` provides a default implementation of `(<*>)` for any [`Monad`](#monad),
 *  | without using `(<*>)` as provided by the [`Apply`](#apply)-[`Monad`](#monad) superclass relationship.
 *  |
 *  | `ap` can therefore be used to write [`Apply`](#apply) instances as follows:
 *  |
 *  | ```purescript
 *  | instance applyF :: Apply F where
 *  |   (<*>) = ap
 *  | ```
 */
var ap = function (__dict_Monad_16) {
    return function (f) {
        return function (a) {
            return $greater$greater$eq(__dict_Monad_16["__superclass_Prelude.Bind_1"]())(f)(function (_2) {
                return $greater$greater$eq(__dict_Monad_16["__superclass_Prelude.Bind_1"]())(a)(function (_1) {
                    return $$return(__dict_Monad_16)(_2(_1));
                });
            });
        };
    };
};
module.exports = {
    Unit: Unit, 
    LT: LT, 
    GT: GT, 
    EQ: EQ, 
    Semigroup: Semigroup, 
    BoolLike: BoolLike, 
    Bits: Bits, 
    Ord: Ord, 
    Eq: Eq, 
    Num: Num, 
    DivisionRing: DivisionRing, 
    Ring: Ring, 
    ModuloSemiring: ModuloSemiring, 
    Semiring: Semiring, 
    Monad: Monad, 
    Bind: Bind, 
    Applicative: Applicative, 
    Apply: Apply, 
    Functor: Functor, 
    Show: Show, 
    Category: Category, 
    Semigroupoid: Semigroupoid, 
    unit: unit, 
    "++": $plus$plus, 
    "<>": $less$greater, 
    not: not, 
    "||": $bar$bar, 
    "&&": $amp$amp, 
    complement: complement, 
    zshr: zshr, 
    shr: shr, 
    shl: shl, 
    ".^.": $dot$up$dot, 
    ".|.": $dot$bar$dot, 
    ".&.": $dot$amp$dot, 
    ">=": $greater$eq, 
    "<=": $less$eq, 
    ">": $greater, 
    "<": $less, 
    compare: compare, 
    "/=": $div$eq, 
    "==": $eq$eq, 
    negate: negate, 
    "%": $percent, 
    "-": $minus, 
    mod: mod, 
    "/": $div, 
    one: one, 
    "*": $times, 
    zero: zero, 
    "+": $plus, 
    ap: ap, 
    liftM1: liftM1, 
    "return": $$return, 
    ">>=": $greater$greater$eq, 
    liftA1: liftA1, 
    pure: pure, 
    "<*>": $less$times$greater, 
    "void": $$void, 
    "<#>": $less$hash$greater, 
    "<$>": $less$dollar$greater, 
    show: show, 
    cons: cons, 
    ":": $colon, 
    "#": $hash, 
    "$": $dollar, 
    id: id, 
    ">>>": $greater$greater$greater, 
    "<<<": $less$less$less, 
    asTypeOf: asTypeOf, 
    "const": $$const, 
    flip: flip, 
    otherwise: otherwise, 
    semigroupoidArr: semigroupoidArr, 
    categoryArr: categoryArr, 
    showUnit: showUnit, 
    showString: showString, 
    showBoolean: showBoolean, 
    showNumber: showNumber, 
    showArray: showArray, 
    functorArr: functorArr, 
    applyArr: applyArr, 
    applicativeArr: applicativeArr, 
    bindArr: bindArr, 
    monadArr: monadArr, 
    semiringNumber: semiringNumber, 
    ringNumber: ringNumber, 
    moduloSemiringNumber: moduloSemiringNumber, 
    divisionRingNumber: divisionRingNumber, 
    numNumber: numNumber, 
    eqUnit: eqUnit, 
    eqString: eqString, 
    eqNumber: eqNumber, 
    eqBoolean: eqBoolean, 
    eqArray: eqArray, 
    eqOrdering: eqOrdering, 
    showOrdering: showOrdering, 
    semigroupOrdering: semigroupOrdering, 
    ordUnit: ordUnit, 
    ordBoolean: ordBoolean, 
    ordNumber: ordNumber, 
    ordString: ordString, 
    ordArray: ordArray, 
    bitsNumber: bitsNumber, 
    boolLikeBoolean: boolLikeBoolean, 
    semigroupUnit: semigroupUnit, 
    semigroupString: semigroupString, 
    semigroupArr: semigroupArr
};

},{}],45:[function(require,module,exports){
// Generated by psc-make version 0.6.9.3
"use strict";
var Prelude = require("Prelude");
var Thermite_Internal = require("Thermite.Internal");
var Control_Monad_Eff = require("Control.Monad.Eff");
var Thermite_Types = require("Thermite.Types");
var GetState = (function () {
    function GetState(value0) {
        this.value0 = value0;
    };
    GetState.create = function (value0) {
        return new GetState(value0);
    };
    return GetState;
})();
var SetState = (function () {
    function SetState(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    SetState.create = function (value0) {
        return function (value1) {
            return new SetState(value0, value1);
        };
    };
    return SetState;
})();
var Wait = (function () {
    function Wait(value0) {
        this.value0 = value0;
    };
    Wait.create = function (value0) {
        return new Wait(value0);
    };
    return Wait;
})();
var Pure = (function () {
    function Pure(value0) {
        this.value0 = value0;
    };
    Pure.create = function (value0) {
        return new Pure(value0);
    };
    return Pure;
})();
var Impure = (function () {
    function Impure(value0) {
        this.value0 = value0;
    };
    Impure.create = function (value0) {
        return new Impure(value0);
    };
    return Impure;
})();
var setState = function (s) {
    return Impure.create(new SetState(s, new Pure(Prelude.unit)));
};
var runAction = function (ctx) {
    var go = function (_40) {
        if (_40 instanceof Pure) {
            return Prelude["return"](Control_Monad_Eff.monadEff)(Prelude.unit);
        };
        if (_40 instanceof Impure && _40.value0 instanceof GetState) {
            return Prelude["void"](Control_Monad_Eff.functorEff)(function __do() {
                var _4 = Thermite_Internal.getStateImpl(ctx)();
                return go(_40.value0.value0(_4))();
            });
        };
        if (_40 instanceof Impure && _40.value0 instanceof SetState) {
            return Prelude["void"](Control_Monad_Eff.functorEff)(function __do() {
                Thermite_Internal.setStateImpl(ctx)(_40.value0.value0)();
                return go(_40.value0.value1)();
            });
        };
        if (_40 instanceof Impure && _40.value0 instanceof Wait) {
            return _40.value0.value0(go);
        };
        throw new Error("Failed pattern match");
    };
    return go;
};
var getState = Impure.create(new GetState(Pure.create));
var functorActionF = new Prelude.Functor(function (f) {
    return function (_39) {
        if (_39 instanceof GetState) {
            return new GetState(Prelude["<<<"](Prelude.semigroupoidArr)(f)(_39.value0));
        };
        if (_39 instanceof SetState) {
            return new SetState(_39.value0, f(_39.value1));
        };
        if (_39 instanceof Wait) {
            return new Wait(function (k_1) {
                return _39.value0(Prelude["<<<"](Prelude.semigroupoidArr)(k_1)(f));
            });
        };
        throw new Error("Failed pattern match");
    };
});
var functorAction = new Prelude.Functor(function (f) {
    return function (_41) {
        if (_41 instanceof Pure) {
            return new Pure(f(_41.value0));
        };
        if (_41 instanceof Impure) {
            return new Impure(Prelude["<$>"](functorActionF)(Prelude["<$>"](functorAction)(f))(_41.value0));
        };
        throw new Error("Failed pattern match");
    };
});
var async = function (c) {
    return Impure.create(new Wait(function (k) {
        return c(Prelude["<<<"](Prelude.semigroupoidArr)(k)(Pure.create));
    }));
};
var sync = function (e) {
    return async(Prelude[">>="](Control_Monad_Eff.bindEff)(e));
};
var monadAction = new Prelude.Monad(function () {
    return applicativeAction;
}, function () {
    return bindAction;
});
var bindAction = new Prelude.Bind(function (_42) {
    return function (f) {
        if (_42 instanceof Pure) {
            return f(_42.value0);
        };
        if (_42 instanceof Impure) {
            return Impure.create(Prelude["<#>"](functorActionF)(_42.value0)(function (a_1) {
                return Prelude[">>="](bindAction)(a_1)(f);
            }));
        };
        throw new Error("Failed pattern match");
    };
}, function () {
    return applyAction;
});
var applyAction = new Prelude.Apply(Prelude.ap(monadAction), function () {
    return functorAction;
});
var applicativeAction = new Prelude.Applicative(function () {
    return applyAction;
}, Pure.create);
var asyncSetState = function (c) {
    return Prelude[">>="](bindAction)(async(c))(function (_6) {
        return setState(_6);
    });
};
var modifyState = function (f) {
    return Prelude[">>="](bindAction)(getState)(function (_5) {
        return setState(f(_5));
    });
};
module.exports = {
    asyncSetState: asyncSetState, 
    async: async, 
    sync: sync, 
    modifyState: modifyState, 
    setState: setState, 
    getState: getState, 
    runAction: runAction, 
    functorAction: functorAction, 
    applyAction: applyAction, 
    applicativeAction: applicativeAction, 
    bindAction: bindAction, 
    monadAction: monadAction
};

},{"Control.Monad.Eff":7,"Prelude":44,"Thermite.Internal":50,"Thermite.Types":51}],46:[function(require,module,exports){
// Generated by psc-make version 0.6.9.3
"use strict";
var Thermite_Internal = require("Thermite.Internal");
var Prelude = require("Prelude");
var Thermite_Types = require("Thermite.Types");
var onWheel = Thermite_Internal.event("onWheel");
var onTouchStart = Thermite_Internal.event("onTouchStart");
var onTouchMove = Thermite_Internal.event("onTouchMove");
var onTouchEnd = Thermite_Internal.event("onTouchEnd");
var onTouchCancel = Thermite_Internal.event("onTouchCancel");
var onSubmit = Thermite_Internal.event("onSubmit");
var onScroll = Thermite_Internal.event("onScroll");
var onPaste = Thermite_Internal.event("onPaste");
var onMouseUp = Thermite_Internal.event("onMouseUp");
var onMouseOver = Thermite_Internal.event("onMouseOver");
var onMouseOut = Thermite_Internal.event("onMouseOut");
var onMouseMove = Thermite_Internal.event("onMouseMove");
var onMouseLeave = Thermite_Internal.event("onMouseLeave");
var onMouseEnter = Thermite_Internal.event("onMouseEnter");
var onMouseDown = Thermite_Internal.event("onMouseDown");
var onKeyUp = Thermite_Internal.event("onKeyUp");
var onKeyPress = Thermite_Internal.event("onKeyPress");
var onKeyDown = Thermite_Internal.event("onKeyDown");
var onInput = Thermite_Internal.event("onInput");
var onFocus = Thermite_Internal.event("onFocus");
var onDrop = Thermite_Internal.event("onDrop");
var onDragStart = Thermite_Internal.event("onDragStart");
var onDragOver = Thermite_Internal.event("onDragOver");
var onDragLeave = Thermite_Internal.event("onDragLeave");
var onDragExit = Thermite_Internal.event("onDragExit");
var onDragEnter = Thermite_Internal.event("onDragEnter");
var onDragEnd = Thermite_Internal.event("onDragEnd");
var onDrag = Thermite_Internal.event("onDrag");
var onDoubleClick = Thermite_Internal.event("onDoubleClick");
var onCut = Thermite_Internal.event("onCut");
var onCopy = Thermite_Internal.event("onCopy");
var onClick = Thermite_Internal.event("onClick");
var onChange = Thermite_Internal.event("onChange");
var onBlur = Thermite_Internal.event("onBlur");
module.exports = {
    onWheel: onWheel, 
    onScroll: onScroll, 
    onTouchStart: onTouchStart, 
    onTouchMove: onTouchMove, 
    onTouchEnd: onTouchEnd, 
    onTouchCancel: onTouchCancel, 
    onMouseUp: onMouseUp, 
    onMouseOver: onMouseOver, 
    onMouseOut: onMouseOut, 
    onMouseMove: onMouseMove, 
    onMouseLeave: onMouseLeave, 
    onMouseEnter: onMouseEnter, 
    onMouseDown: onMouseDown, 
    onDrop: onDrop, 
    onDragStart: onDragStart, 
    onDragOver: onDragOver, 
    onDragLeave: onDragLeave, 
    onDragExit: onDragExit, 
    onDragEnter: onDragEnter, 
    onDragEnd: onDragEnd, 
    onDrag: onDrag, 
    onDoubleClick: onDoubleClick, 
    onClick: onClick, 
    onSubmit: onSubmit, 
    onInput: onInput, 
    onChange: onChange, 
    onBlur: onBlur, 
    onFocus: onFocus, 
    onKeyUp: onKeyUp, 
    onKeyPress: onKeyPress, 
    onKeyDown: onKeyDown, 
    onPaste: onPaste, 
    onCut: onCut, 
    onCopy: onCopy
};

},{"Prelude":44,"Thermite.Internal":50,"Thermite.Types":51}],47:[function(require,module,exports){
// Generated by psc-make version 0.6.9.3
"use strict";
var Thermite_Internal = require("Thermite.Internal");
var Prelude = require("Prelude");
var Thermite_Types = require("Thermite.Types");
var wmode = Thermite_Internal.unsafeAttribute("wmode");
var width = Thermite_Internal.unsafeAttribute("width");
var value = Thermite_Internal.unsafeAttribute("value");
var useMap = Thermite_Internal.unsafeAttribute("useMap");
var title = Thermite_Internal.unsafeAttribute("title");
var target = Thermite_Internal.unsafeAttribute("target");
var tabIndex = Thermite_Internal.unsafeAttribute("tabIndex");
var step = Thermite_Internal.unsafeAttribute("step");
var start = Thermite_Internal.unsafeAttribute("start");
var srcSet = Thermite_Internal.unsafeAttribute("srcSet");
var srcDoc = Thermite_Internal.unsafeAttribute("srcDoc");
var src = Thermite_Internal.unsafeAttribute("src");
var spellCheck = Thermite_Internal.unsafeAttribute("spellCheck");
var span = Thermite_Internal.unsafeAttribute("span");
var sizes = Thermite_Internal.unsafeAttribute("sizes");
var size = Thermite_Internal.unsafeAttribute("size");
var shape = Thermite_Internal.unsafeAttribute("shape");
var selected = Thermite_Internal.unsafeAttribute("selected");
var seamless = Thermite_Internal.unsafeAttribute("seamless");
var scrolling = Thermite_Internal.unsafeAttribute("scrolling");
var scope = Thermite_Internal.unsafeAttribute("scope");
var sandbox = Thermite_Internal.unsafeAttribute("sandbox");
var rows = Thermite_Internal.unsafeAttribute("rows");
var rowSpan = Thermite_Internal.unsafeAttribute("rowSpan");
var role = Thermite_Internal.unsafeAttribute("role");
var required = Thermite_Internal.unsafeAttribute("required");
var rel = Thermite_Internal.unsafeAttribute("rel");
var readOnly = Thermite_Internal.unsafeAttribute("readOnly");
var radioGroup = Thermite_Internal.unsafeAttribute("radioGroup");
var preload = Thermite_Internal.unsafeAttribute("preload");
var poster = Thermite_Internal.unsafeAttribute("poster");
var placeholder = Thermite_Internal.unsafeAttribute("placeholder");
var pattern = Thermite_Internal.unsafeAttribute("pattern");
var open = Thermite_Internal.unsafeAttribute("open");
var noValidate = Thermite_Internal.unsafeAttribute("noValidate");
var name = Thermite_Internal.unsafeAttribute("name");
var muted = Thermite_Internal.unsafeAttribute("muted");
var multiple = Thermite_Internal.unsafeAttribute("multiple");
var min = Thermite_Internal.unsafeAttribute("min");
var method = Thermite_Internal.unsafeAttribute("method");
var mediaGroup = Thermite_Internal.unsafeAttribute("mediaGroup");
var media = Thermite_Internal.unsafeAttribute("media");
var maxLength = Thermite_Internal.unsafeAttribute("maxLength");
var max = Thermite_Internal.unsafeAttribute("max");
var marginWidth = Thermite_Internal.unsafeAttribute("marginWidth");
var marginHeight = Thermite_Internal.unsafeAttribute("marginHeight");
var manifest = Thermite_Internal.unsafeAttribute("manifest");
var loop = Thermite_Internal.unsafeAttribute("loop");
var list = Thermite_Internal.unsafeAttribute("list");
var lang = Thermite_Internal.unsafeAttribute("lang");
var label = Thermite_Internal.unsafeAttribute("label");
var icon = Thermite_Internal.unsafeAttribute("icon");
var httpEquiv = Thermite_Internal.unsafeAttribute("httpEquiv");
var htmlFor = Thermite_Internal.unsafeAttribute("htmlFor");
var hrefLang = Thermite_Internal.unsafeAttribute("hrefLang");
var href = Thermite_Internal.unsafeAttribute("href");
var hidden = Thermite_Internal.unsafeAttribute("hidden");
var height = Thermite_Internal.unsafeAttribute("height");
var frameBorder = Thermite_Internal.unsafeAttribute("frameBorder");
var formTarget = Thermite_Internal.unsafeAttribute("formTarget");
var formNoValidate = Thermite_Internal.unsafeAttribute("formNoValidate");
var formMethod = Thermite_Internal.unsafeAttribute("formMethod");
var formEncType = Thermite_Internal.unsafeAttribute("formEncType");
var formAction = Thermite_Internal.unsafeAttribute("formAction");
var form = Thermite_Internal.unsafeAttribute("form");
var encType = Thermite_Internal.unsafeAttribute("encType");
var draggable = Thermite_Internal.unsafeAttribute("draggable");
var download = Thermite_Internal.unsafeAttribute("download");
var disabled = Thermite_Internal.unsafeAttribute("disabled");
var dir = Thermite_Internal.unsafeAttribute("dir");
var defer = Thermite_Internal.unsafeAttribute("defer");
var dateTime = Thermite_Internal.unsafeAttribute("dateTime");
var crossOrigin = Thermite_Internal.unsafeAttribute("crossOrigin");
var coords = Thermite_Internal.unsafeAttribute("coords");
var controls = Thermite_Internal.unsafeAttribute("controls");
var contextMenu = Thermite_Internal.unsafeAttribute("contextMenu");
var contentEditable = Thermite_Internal.unsafeAttribute("contentEditable");
var content = Thermite_Internal.unsafeAttribute("content");
var cols = Thermite_Internal.unsafeAttribute("cols");
var colSpan = Thermite_Internal.unsafeAttribute("colSpan");
var className = Thermite_Internal.unsafeAttribute("className");
var classID = Thermite_Internal.unsafeAttribute("classID");
var checked = Thermite_Internal.unsafeAttribute("checked");
var charSet = Thermite_Internal.unsafeAttribute("charSet");
var cellSpacing = Thermite_Internal.unsafeAttribute("cellSpacing");
var cellPadding = Thermite_Internal.unsafeAttribute("cellPadding");
var autoPlay = Thermite_Internal.unsafeAttribute("autoPlay");
var autoFocus = Thermite_Internal.unsafeAttribute("autoFocus");
var autoComplete = Thermite_Internal.unsafeAttribute("autoComplete");
var async = Thermite_Internal.unsafeAttribute("async");
var alt = Thermite_Internal.unsafeAttribute("alt");
var allowTransparency = Thermite_Internal.unsafeAttribute("allowTransparency");
var allowFullScreen = Thermite_Internal.unsafeAttribute("allowFullScreen");
var action = Thermite_Internal.unsafeAttribute("action");
var accessKey = Thermite_Internal.unsafeAttribute("accessKey");
var acceptCharset = Thermite_Internal.unsafeAttribute("acceptCharset");
var accept = Thermite_Internal.unsafeAttribute("accept");
var _type = Thermite_Internal.unsafeAttribute("type");
var _id = Thermite_Internal.unsafeAttribute("id");
module.exports = {
    wmode: wmode, 
    width: width, 
    value: value, 
    useMap: useMap, 
    _type: _type, 
    title: title, 
    target: target, 
    tabIndex: tabIndex, 
    step: step, 
    start: start, 
    srcSet: srcSet, 
    srcDoc: srcDoc, 
    src: src, 
    spellCheck: spellCheck, 
    span: span, 
    sizes: sizes, 
    size: size, 
    shape: shape, 
    selected: selected, 
    seamless: seamless, 
    scrolling: scrolling, 
    scope: scope, 
    sandbox: sandbox, 
    rowSpan: rowSpan, 
    rows: rows, 
    role: role, 
    required: required, 
    rel: rel, 
    readOnly: readOnly, 
    radioGroup: radioGroup, 
    preload: preload, 
    poster: poster, 
    placeholder: placeholder, 
    pattern: pattern, 
    open: open, 
    noValidate: noValidate, 
    name: name, 
    muted: muted, 
    multiple: multiple, 
    min: min, 
    method: method, 
    mediaGroup: mediaGroup, 
    media: media, 
    maxLength: maxLength, 
    max: max, 
    marginWidth: marginWidth, 
    marginHeight: marginHeight, 
    manifest: manifest, 
    loop: loop, 
    list: list, 
    lang: lang, 
    label: label, 
    _id: _id, 
    icon: icon, 
    httpEquiv: httpEquiv, 
    htmlFor: htmlFor, 
    hrefLang: hrefLang, 
    href: href, 
    hidden: hidden, 
    height: height, 
    frameBorder: frameBorder, 
    formTarget: formTarget, 
    formNoValidate: formNoValidate, 
    formMethod: formMethod, 
    formEncType: formEncType, 
    formAction: formAction, 
    form: form, 
    encType: encType, 
    draggable: draggable, 
    download: download, 
    disabled: disabled, 
    dir: dir, 
    defer: defer, 
    dateTime: dateTime, 
    crossOrigin: crossOrigin, 
    coords: coords, 
    controls: controls, 
    contextMenu: contextMenu, 
    contentEditable: contentEditable, 
    content: content, 
    colSpan: colSpan, 
    cols: cols, 
    className: className, 
    classID: classID, 
    checked: checked, 
    charSet: charSet, 
    cellSpacing: cellSpacing, 
    cellPadding: cellPadding, 
    autoPlay: autoPlay, 
    autoFocus: autoFocus, 
    autoComplete: autoComplete, 
    async: async, 
    alt: alt, 
    allowTransparency: allowTransparency, 
    allowFullScreen: allowFullScreen, 
    action: action, 
    accessKey: accessKey, 
    acceptCharset: acceptCharset, 
    accept: accept
};

},{"Prelude":44,"Thermite.Internal":50,"Thermite.Types":51}],48:[function(require,module,exports){
// Generated by psc-make version 0.6.9.3
"use strict";
var Thermite_Internal = require("Thermite.Internal");
var Prelude = require("Prelude");
var Thermite_Types = require("Thermite.Types");
var wbr = Thermite_Internal.createElementImpl("body");
var wbr$prime = wbr([  ]);
var video = Thermite_Internal.createElementImpl("video");
var video$prime = video([  ]);
var $$var = Thermite_Internal.createElementImpl("var");
var var$prime = $$var([  ]);
var ul = Thermite_Internal.createElementImpl("ul");
var ul$prime = ul([  ]);
var u = Thermite_Internal.createElementImpl("u");
var u$prime = u([  ]);
var track = Thermite_Internal.createElementImpl("track");
var track$prime = track([  ]);
var tr = Thermite_Internal.createElementImpl("tr");
var tr$prime = tr([  ]);
var title = Thermite_Internal.createElementImpl("title");
var title$prime = title([  ]);
var time = Thermite_Internal.createElementImpl("time");
var time$prime = time([  ]);
var thead = Thermite_Internal.createElementImpl("thead");
var thead$prime = thead([  ]);
var th = Thermite_Internal.createElementImpl("th");
var th$prime = th([  ]);
var tfoot = Thermite_Internal.createElementImpl("tfoot");
var tfoot$prime = tfoot([  ]);
var textarea = Thermite_Internal.createElementImpl("textarea");
var textarea$prime = textarea([  ]);
var td = Thermite_Internal.createElementImpl("td");
var td$prime = td([  ]);
var tbody = Thermite_Internal.createElementImpl("tbody");
var tbody$prime = tbody([  ]);
var table = Thermite_Internal.createElementImpl("table");
var table$prime = table([  ]);
var sup = Thermite_Internal.createElementImpl("sup");
var sup$prime = sup([  ]);
var summary = Thermite_Internal.createElementImpl("summary");
var summary$prime = summary([  ]);
var sub = Thermite_Internal.createElementImpl("sub");
var sub$prime = sub([  ]);
var style = Thermite_Internal.createElementImpl("style");
var style$prime = style([  ]);
var strong = Thermite_Internal.createElementImpl("strong");
var strong$prime = strong([  ]);
var span = Thermite_Internal.createElementImpl("span");
var span$prime = span([  ]);
var source = Thermite_Internal.createElementImpl("source");
var source$prime = source([  ]);
var small = Thermite_Internal.createElementImpl("small");
var small$prime = small([  ]);
var select = Thermite_Internal.createElementImpl("select");
var select$prime = select([  ]);
var section = Thermite_Internal.createElementImpl("section");
var section$prime = section([  ]);
var script = Thermite_Internal.createElementImpl("script");
var script$prime = script([  ]);
var samp = Thermite_Internal.createElementImpl("samp");
var samp$prime = samp([  ]);
var s = Thermite_Internal.createElementImpl("s");
var s$prime = s([  ]);
var ruby = Thermite_Internal.createElementImpl("ruby");
var ruby$prime = ruby([  ]);
var rt = Thermite_Internal.createElementImpl("rt");
var rt$prime = rt([  ]);
var rp = Thermite_Internal.createElementImpl("rp");
var rp$prime = rp([  ]);
var q = Thermite_Internal.createElementImpl("q");
var q$prime = q([  ]);
var progress = Thermite_Internal.createElementImpl("progress");
var progress$prime = progress([  ]);
var pre = Thermite_Internal.createElementImpl("pre");
var pre$prime = pre([  ]);
var picture = Thermite_Internal.createElementImpl("picture");
var picture$prime = picture([  ]);
var param = Thermite_Internal.createElementImpl("param");
var param$prime = param([  ]);
var p = Thermite_Internal.createElementImpl("p");
var p$prime = p([  ]);
var output = Thermite_Internal.createElementImpl("output");
var output$prime = output([  ]);
var option = Thermite_Internal.createElementImpl("option");
var option$prime = option([  ]);
var optgroup = Thermite_Internal.createElementImpl("optgroup");
var optgroup$prime = optgroup([  ]);
var ol = Thermite_Internal.createElementImpl("ol");
var ol$prime = ol([  ]);
var object = Thermite_Internal.createElementImpl("object");
var object$prime = object([  ]);
var noscript = Thermite_Internal.createElementImpl("noscript");
var noscript$prime = noscript([  ]);
var nav = Thermite_Internal.createElementImpl("nav");
var nav$prime = nav([  ]);
var meter = Thermite_Internal.createElementImpl("meter");
var meter$prime = meter([  ]);
var meta = Thermite_Internal.createElementImpl("meta");
var meta$prime = meta([  ]);
var menuitem = Thermite_Internal.createElementImpl("menuitem");
var menuitem$prime = menuitem([  ]);
var menu = Thermite_Internal.createElementImpl("menu");
var menu$prime = menu([  ]);
var mark = Thermite_Internal.createElementImpl("mark");
var mark$prime = mark([  ]);
var map = Thermite_Internal.createElementImpl("map");
var map$prime = map([  ]);
var main = Thermite_Internal.createElementImpl("main");
var main$prime = main([  ]);
var link = Thermite_Internal.createElementImpl("link");
var li = Thermite_Internal.createElementImpl("li");
var li$prime = li([  ]);
var legend = Thermite_Internal.createElementImpl("legend");
var legend$prime = legend([  ]);
var label = Thermite_Internal.createElementImpl("label");
var label$prime = label([  ]);
var keygen = Thermite_Internal.createElementImpl("keygen");
var keygen$prime = keygen([  ]);
var kbd = Thermite_Internal.createElementImpl("kbd");
var kbd$prime = kbd([  ]);
var ins = Thermite_Internal.createElementImpl("ins");
var ins$prime = ins([  ]);
var input = Thermite_Internal.createElementImpl("input");
var input$prime = input([  ]);
var img = Thermite_Internal.createElementImpl("img");
var img$prime = img([  ]);
var iframe = Thermite_Internal.createElementImpl("iframe");
var iframe$prime = iframe([  ]);
var i = Thermite_Internal.createElementImpl("i");
var i$prime = i([  ]);
var html = Thermite_Internal.createElementImpl("html");
var html$prime = html([  ]);
var hr = Thermite_Internal.createElementImpl("hr");
var hr$prime = hr([  ]);
var header = Thermite_Internal.createElementImpl("header");
var header$prime = header([  ]);
var head = Thermite_Internal.createElementImpl("head");
var head$prime = head([  ]);
var h6 = Thermite_Internal.createElementImpl("h6");
var h6$prime = h6([  ]);
var h5 = Thermite_Internal.createElementImpl("h5");
var h5$prime = h5([  ]);
var h4 = Thermite_Internal.createElementImpl("h4");
var h4$prime = h4([  ]);
var h3 = Thermite_Internal.createElementImpl("h3");
var h3$prime = h3([  ]);
var h2 = Thermite_Internal.createElementImpl("h2");
var h2$prime = h2([  ]);
var h1 = Thermite_Internal.createElementImpl("h1");
var h1$prime = h1([  ]);
var form = Thermite_Internal.createElementImpl("form");
var form$prime = form([  ]);
var footer = Thermite_Internal.createElementImpl("footer");
var footer$prime = footer([  ]);
var figure = Thermite_Internal.createElementImpl("figure");
var figure$prime = figure([  ]);
var figcaption = Thermite_Internal.createElementImpl("figcaption");
var figcaption$prime = figcaption([  ]);
var fieldset = Thermite_Internal.createElementImpl("fieldset");
var fieldset$prime = fieldset([  ]);
var embed = Thermite_Internal.createElementImpl("embed");
var embed$prime = embed([  ]);
var em = Thermite_Internal.createElementImpl("em");
var em$prime = em([  ]);
var dt = Thermite_Internal.createElementImpl("dt");
var dt$prime = dt([  ]);
var dl = Thermite_Internal.createElementImpl("dl");
var dl$prime = dl([  ]);
var div = Thermite_Internal.createElementImpl("div");
var div$prime = div([  ]);
var dialog = Thermite_Internal.createElementImpl("dialog");
var dialog$prime = dialog([  ]);
var dfn = Thermite_Internal.createElementImpl("dfn");
var dfn$prime = dfn([  ]);
var details = Thermite_Internal.createElementImpl("details");
var details$prime = details([  ]);
var del = Thermite_Internal.createElementImpl("del");
var del$prime = del([  ]);
var dd = Thermite_Internal.createElementImpl("dd");
var dd$prime = dd([  ]);
var datalist = Thermite_Internal.createElementImpl("datalist");
var datalist$prime = datalist([  ]);
var colgroup = Thermite_Internal.createElementImpl("colgroup");
var colgroup$prime = colgroup([  ]);
var col = Thermite_Internal.createElementImpl("col");
var col$prime = col([  ]);
var code = Thermite_Internal.createElementImpl("code");
var code$prime = code([  ]);
var cite = Thermite_Internal.createElementImpl("cite");
var cite$prime = cite([  ]);
var caption = Thermite_Internal.createElementImpl("caption");
var caption$prime = caption([  ]);
var canvas = Thermite_Internal.createElementImpl("canvas");
var canvas$prime = canvas([  ]);
var button = Thermite_Internal.createElementImpl("button");
var button$prime = button([  ]);
var br = Thermite_Internal.createElementImpl("br");
var br$prime = br([  ]);
var body = Thermite_Internal.createElementImpl("body");
var body$prime = body([  ]);
var link$prime = body([  ]);
var blockquote = Thermite_Internal.createElementImpl("blockquote");
var blockquote$prime = blockquote([  ]);
var big = Thermite_Internal.createElementImpl("big");
var big$prime = big([  ]);
var bdo = Thermite_Internal.createElementImpl("bdo");
var bdo$prime = bdo([  ]);
var bdi = Thermite_Internal.createElementImpl("bdi");
var bdi$prime = bdi([  ]);
var base = Thermite_Internal.createElementImpl("base");
var base$prime = base([  ]);
var b = Thermite_Internal.createElementImpl("b");
var b$prime = b([  ]);
var audio = Thermite_Internal.createElementImpl("audio");
var audio$prime = audio([  ]);
var aside = Thermite_Internal.createElementImpl("aside");
var aside$prime = aside([  ]);
var article = Thermite_Internal.createElementImpl("article");
var article$prime = article([  ]);
var area = Thermite_Internal.createElementImpl("area");
var area$prime = area([  ]);
var address = Thermite_Internal.createElementImpl("address");
var address$prime = address([  ]);
var abbr = Thermite_Internal.createElementImpl("abbr");
var abbr$prime = abbr([  ]);
var a = Thermite_Internal.createElementImpl("a");
var a$prime = a([  ]);
var _data = Thermite_Internal.createElementImpl("data");
var _data$prime = _data([  ]);
module.exports = {
    "wbr'": wbr$prime, 
    wbr: wbr, 
    "video'": video$prime, 
    video: video, 
    "var'": var$prime, 
    "var": $$var, 
    "ul'": ul$prime, 
    ul: ul, 
    "u'": u$prime, 
    u: u, 
    "track'": track$prime, 
    track: track, 
    "tr'": tr$prime, 
    tr: tr, 
    "title'": title$prime, 
    title: title, 
    "time'": time$prime, 
    time: time, 
    "thead'": thead$prime, 
    thead: thead, 
    "th'": th$prime, 
    th: th, 
    "tfoot'": tfoot$prime, 
    tfoot: tfoot, 
    "textarea'": textarea$prime, 
    textarea: textarea, 
    "td'": td$prime, 
    td: td, 
    "tbody'": tbody$prime, 
    tbody: tbody, 
    "table'": table$prime, 
    table: table, 
    "sup'": sup$prime, 
    sup: sup, 
    "summary'": summary$prime, 
    summary: summary, 
    "sub'": sub$prime, 
    sub: sub, 
    "style'": style$prime, 
    style: style, 
    "strong'": strong$prime, 
    strong: strong, 
    "span'": span$prime, 
    span: span, 
    "source'": source$prime, 
    source: source, 
    "small'": small$prime, 
    small: small, 
    "select'": select$prime, 
    select: select, 
    "section'": section$prime, 
    section: section, 
    "script'": script$prime, 
    script: script, 
    "samp'": samp$prime, 
    samp: samp, 
    "s'": s$prime, 
    s: s, 
    "ruby'": ruby$prime, 
    ruby: ruby, 
    "rt'": rt$prime, 
    rt: rt, 
    "rp'": rp$prime, 
    rp: rp, 
    "q'": q$prime, 
    q: q, 
    "progress'": progress$prime, 
    progress: progress, 
    "pre'": pre$prime, 
    pre: pre, 
    "picture'": picture$prime, 
    picture: picture, 
    "param'": param$prime, 
    param: param, 
    "p'": p$prime, 
    p: p, 
    "output'": output$prime, 
    output: output, 
    "option'": option$prime, 
    option: option, 
    "optgroup'": optgroup$prime, 
    optgroup: optgroup, 
    "ol'": ol$prime, 
    ol: ol, 
    "object'": object$prime, 
    object: object, 
    "noscript'": noscript$prime, 
    noscript: noscript, 
    "nav'": nav$prime, 
    nav: nav, 
    "meter'": meter$prime, 
    meter: meter, 
    "meta'": meta$prime, 
    meta: meta, 
    "menuitem'": menuitem$prime, 
    menuitem: menuitem, 
    "menu'": menu$prime, 
    menu: menu, 
    "mark'": mark$prime, 
    mark: mark, 
    "map'": map$prime, 
    map: map, 
    "main'": main$prime, 
    main: main, 
    "link'": link$prime, 
    link: link, 
    "li'": li$prime, 
    li: li, 
    "legend'": legend$prime, 
    legend: legend, 
    "label'": label$prime, 
    label: label, 
    "keygen'": keygen$prime, 
    keygen: keygen, 
    "kbd'": kbd$prime, 
    kbd: kbd, 
    "ins'": ins$prime, 
    ins: ins, 
    "input'": input$prime, 
    input: input, 
    "img'": img$prime, 
    img: img, 
    "iframe'": iframe$prime, 
    iframe: iframe, 
    "i'": i$prime, 
    i: i, 
    "html'": html$prime, 
    html: html, 
    "hr'": hr$prime, 
    hr: hr, 
    "header'": header$prime, 
    header: header, 
    "head'": head$prime, 
    head: head, 
    "h6'": h6$prime, 
    h6: h6, 
    "h5'": h5$prime, 
    h5: h5, 
    "h4'": h4$prime, 
    h4: h4, 
    "h3'": h3$prime, 
    h3: h3, 
    "h2'": h2$prime, 
    h2: h2, 
    "h1'": h1$prime, 
    h1: h1, 
    "form'": form$prime, 
    form: form, 
    "footer'": footer$prime, 
    footer: footer, 
    "figure'": figure$prime, 
    figure: figure, 
    "figcaption'": figcaption$prime, 
    figcaption: figcaption, 
    "fieldset'": fieldset$prime, 
    fieldset: fieldset, 
    "embed'": embed$prime, 
    embed: embed, 
    "em'": em$prime, 
    em: em, 
    "dt'": dt$prime, 
    dt: dt, 
    "dl'": dl$prime, 
    dl: dl, 
    "div'": div$prime, 
    div: div, 
    "dialog'": dialog$prime, 
    dialog: dialog, 
    "dfn'": dfn$prime, 
    dfn: dfn, 
    "details'": details$prime, 
    details: details, 
    "del'": del$prime, 
    del: del, 
    "dd'": dd$prime, 
    dd: dd, 
    "datalist'": datalist$prime, 
    datalist: datalist, 
    "_data'": _data$prime, 
    _data: _data, 
    "colgroup'": colgroup$prime, 
    colgroup: colgroup, 
    "col'": col$prime, 
    col: col, 
    "code'": code$prime, 
    code: code, 
    "cite'": cite$prime, 
    cite: cite, 
    "caption'": caption$prime, 
    caption: caption, 
    "canvas'": canvas$prime, 
    canvas: canvas, 
    "button'": button$prime, 
    button: button, 
    "br'": br$prime, 
    br: br, 
    "body'": body$prime, 
    body: body, 
    "blockquote'": blockquote$prime, 
    blockquote: blockquote, 
    "big'": big$prime, 
    big: big, 
    "bdo'": bdo$prime, 
    bdo: bdo, 
    "bdi'": bdi$prime, 
    bdi: bdi, 
    "base'": base$prime, 
    base: base, 
    "b'": b$prime, 
    b: b, 
    "audio'": audio$prime, 
    audio: audio, 
    "aside'": aside$prime, 
    aside: aside, 
    "article'": article$prime, 
    article: article, 
    "area'": area$prime, 
    area: area, 
    "address'": address$prime, 
    address: address, 
    "abbr'": abbr$prime, 
    abbr: abbr, 
    "a'": a$prime, 
    a: a
};

},{"Prelude":44,"Thermite.Internal":50,"Thermite.Types":51}],49:[function(require,module,exports){
// Generated by psc-make version 0.6.9.3
"use strict";
var Thermite_Internal = require("Thermite.Internal");
var Prelude = require("Prelude");
var Thermite_Types = require("Thermite.Types");
var text = Thermite_Internal.textImpl;
var createElement = Thermite_Internal.createElementImpl;
module.exports = {
    text: text, 
    createElement: createElement
};

},{"Prelude":44,"Thermite.Internal":50,"Thermite.Types":51}],50:[function(require,module,exports){
// Generated by psc-make version 0.6.9.3
"use strict";
var Prelude = require("Prelude");
var DOM = require("DOM");
var Data_Maybe = require("Data.Maybe");
var Control_Monad_Eff = require("Control.Monad.Eff");
var Thermite_Types = require("Thermite.Types");

  function getStateImpl(ctx) {
    return function() {
      return ctx.state;
    };
  }
  ;

  function setStateImpl(ctx) {
    return function(state) {
      return function() {
        ctx.setState(state);
      };
    };
  }
  ;

  function textImpl(s) {
    return s;
  }
  ;

  function createElementImpl(name) {
    return function(ps) {
      return function(children) {
        var props = {};

        for (var i = 0; i < ps.length; i++) {
          var p = ps[i];
          props[p[0]] = p[1];
        }

        return React.createElement(name, props, children);
      };
    };
  }
  ;

  function unsafeAttribute(attr) {
    return function(value) {
      return [attr, value];
    };
  }
  ;

  function event(name) {
    return function(context) {
      return function(f) {
        return [name, function(e) {
          context.performAction(f(e));
        }];
      };
    };
  }
  ;

  function createClassImpl(runAction) {
    return function(maybe) {
      return function(spec) {
        return React.createClass({
          getInitialState: function() {
            return spec.initialState;
          },
          performAction: function(action) {
            runAction(this)(spec.performAction(this.props)(action))();
          },
          render: function() {
            return spec.render(this)(this.state)(this.props);
          },
          componentWillMount: function() {
            var self = this;
            maybe(function() { })(function(action) {
              return function() {
                self.performAction(action);
              };
            })(spec.componentWillMount)();
          },
          displayName: maybe(undefined)(function(a) { return a; })(spec.displayName)
        })
      };
    };
  }
  ;

  function documentBody(component) {
    return document.body;
  }
  ;

  function renderToImpl(element) {
    return function (component) {
      return function(props) {
        return function() {
          React.render(React.createElement(component, props), element);
        };
      };
    }
  }
  ;
module.exports = {
    renderToImpl: renderToImpl, 
    documentBody: documentBody, 
    createClassImpl: createClassImpl, 
    event: event, 
    unsafeAttribute: unsafeAttribute, 
    createElementImpl: createElementImpl, 
    textImpl: textImpl, 
    setStateImpl: setStateImpl, 
    getStateImpl: getStateImpl
};

},{"Control.Monad.Eff":7,"DOM":10,"Data.Maybe":20,"Prelude":44,"Thermite.Types":51}],51:[function(require,module,exports){
// Generated by psc-make version 0.6.9.3
"use strict";
var Prelude = require("Prelude");
var Data_Maybe = require("Data.Maybe");
var Spec = function (x) {
    return x;
};
module.exports = {
    Spec: Spec
};

},{"Data.Maybe":20,"Prelude":44}],52:[function(require,module,exports){
// Generated by psc-make version 0.6.9.3
"use strict";
var Thermite_Internal = require("Thermite.Internal");
var Thermite_Action = require("Thermite.Action");
var Data_Maybe = require("Data.Maybe");
var Prelude = require("Prelude");
var DOM = require("DOM");
var Control_Monad_Eff = require("Control.Monad.Eff");
var Thermite_Html = require("Thermite.Html");
var Thermite_Types = require("Thermite.Types");
var simpleSpec = function (initialState) {
    return function (performAction) {
        return function (render_1) {
            return {
                initialState: initialState, 
                performAction: performAction, 
                render: render_1, 
                componentWillMount: Data_Maybe.Nothing.value, 
                displayName: Data_Maybe.Nothing.value
            };
        };
    };
};
var renderTo = Thermite_Internal.renderToImpl;
var render = function (cc) {
    return function (props) {
        return function __do() {
            var _7 = Thermite_Internal.documentBody();
            return renderTo(_7)(cc)(props)();
        };
    };
};
var displayName = function (name) {
    return function (_44) {
        var _186 = {};
        for (var _187 in _44) {
            if (_44.hasOwnProperty(_187)) {
                _186[_187] = _44[_187];
            };
        };
        _186.displayName = new Data_Maybe.Just(name);
        return _186;
    };
};
var createClass = Thermite_Internal.createClassImpl(Thermite_Action.runAction)(Data_Maybe.maybe);
var componentWillMount = function (action) {
    return function (_43) {
        var _190 = {};
        for (var _191 in _43) {
            if (_43.hasOwnProperty(_191)) {
                _190[_191] = _43[_191];
            };
        };
        _190.componentWillMount = new Data_Maybe.Just(action);
        return _190;
    };
};
module.exports = {
    renderTo: renderTo, 
    render: render, 
    displayName: displayName, 
    createClass: createClass, 
    componentWillMount: componentWillMount, 
    simpleSpec: simpleSpec
};

},{"Control.Monad.Eff":7,"DOM":10,"Data.Maybe":20,"Prelude":44,"Thermite.Action":45,"Thermite.Html":49,"Thermite.Internal":50,"Thermite.Types":51}],53:[function(require,module,exports){
require('Main').main();

},{"Main":34}]},{},[53]);
